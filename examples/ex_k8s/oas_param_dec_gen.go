// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

func decodeListAdmissionregistrationV1MutatingWebhookConfigurationParams(args map[string]string, r *http.Request) (ListAdmissionregistrationV1MutatingWebhookConfigurationParams, error) {
	var params ListAdmissionregistrationV1MutatingWebhookConfigurationParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListAdmissionregistrationV1ValidatingWebhookConfigurationParams(args map[string]string, r *http.Request) (ListAdmissionregistrationV1ValidatingWebhookConfigurationParams, error) {
	var params ListAdmissionregistrationV1ValidatingWebhookConfigurationParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListApiextensionsV1CustomResourceDefinitionParams(args map[string]string, r *http.Request) (ListApiextensionsV1CustomResourceDefinitionParams, error) {
	var params ListApiextensionsV1CustomResourceDefinitionParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListApiregistrationV1APIServiceParams(args map[string]string, r *http.Request) (ListApiregistrationV1APIServiceParams, error) {
	var params ListApiregistrationV1APIServiceParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListAppsV1ControllerRevisionForAllNamespacesParams(args map[string]string, r *http.Request) (ListAppsV1ControllerRevisionForAllNamespacesParams, error) {
	var params ListAppsV1ControllerRevisionForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListAppsV1DaemonSetForAllNamespacesParams(args map[string]string, r *http.Request) (ListAppsV1DaemonSetForAllNamespacesParams, error) {
	var params ListAppsV1DaemonSetForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListAppsV1DeploymentForAllNamespacesParams(args map[string]string, r *http.Request) (ListAppsV1DeploymentForAllNamespacesParams, error) {
	var params ListAppsV1DeploymentForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListAppsV1NamespacedControllerRevisionParams(args map[string]string, r *http.Request) (ListAppsV1NamespacedControllerRevisionParams, error) {
	var params ListAppsV1NamespacedControllerRevisionParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListAppsV1NamespacedDaemonSetParams(args map[string]string, r *http.Request) (ListAppsV1NamespacedDaemonSetParams, error) {
	var params ListAppsV1NamespacedDaemonSetParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListAppsV1NamespacedDeploymentParams(args map[string]string, r *http.Request) (ListAppsV1NamespacedDeploymentParams, error) {
	var params ListAppsV1NamespacedDeploymentParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListAppsV1NamespacedReplicaSetParams(args map[string]string, r *http.Request) (ListAppsV1NamespacedReplicaSetParams, error) {
	var params ListAppsV1NamespacedReplicaSetParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListAppsV1NamespacedStatefulSetParams(args map[string]string, r *http.Request) (ListAppsV1NamespacedStatefulSetParams, error) {
	var params ListAppsV1NamespacedStatefulSetParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListAppsV1ReplicaSetForAllNamespacesParams(args map[string]string, r *http.Request) (ListAppsV1ReplicaSetForAllNamespacesParams, error) {
	var params ListAppsV1ReplicaSetForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListAppsV1StatefulSetForAllNamespacesParams(args map[string]string, r *http.Request) (ListAppsV1StatefulSetForAllNamespacesParams, error) {
	var params ListAppsV1StatefulSetForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesParams(args map[string]string, r *http.Request) (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesParams, error) {
	var params ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListAutoscalingV1NamespacedHorizontalPodAutoscalerParams(args map[string]string, r *http.Request) (ListAutoscalingV1NamespacedHorizontalPodAutoscalerParams, error) {
	var params ListAutoscalingV1NamespacedHorizontalPodAutoscalerParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesParams(args map[string]string, r *http.Request) (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesParams, error) {
	var params ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams(args map[string]string, r *http.Request) (ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams, error) {
	var params ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesParams(args map[string]string, r *http.Request) (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesParams, error) {
	var params ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams(args map[string]string, r *http.Request) (ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams, error) {
	var params ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListBatchV1CronJobForAllNamespacesParams(args map[string]string, r *http.Request) (ListBatchV1CronJobForAllNamespacesParams, error) {
	var params ListBatchV1CronJobForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListBatchV1JobForAllNamespacesParams(args map[string]string, r *http.Request) (ListBatchV1JobForAllNamespacesParams, error) {
	var params ListBatchV1JobForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListBatchV1NamespacedCronJobParams(args map[string]string, r *http.Request) (ListBatchV1NamespacedCronJobParams, error) {
	var params ListBatchV1NamespacedCronJobParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListBatchV1NamespacedJobParams(args map[string]string, r *http.Request) (ListBatchV1NamespacedJobParams, error) {
	var params ListBatchV1NamespacedJobParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListBatchV1beta1CronJobForAllNamespacesParams(args map[string]string, r *http.Request) (ListBatchV1beta1CronJobForAllNamespacesParams, error) {
	var params ListBatchV1beta1CronJobForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListBatchV1beta1NamespacedCronJobParams(args map[string]string, r *http.Request) (ListBatchV1beta1NamespacedCronJobParams, error) {
	var params ListBatchV1beta1NamespacedCronJobParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCertificatesV1CertificateSigningRequestParams(args map[string]string, r *http.Request) (ListCertificatesV1CertificateSigningRequestParams, error) {
	var params ListCertificatesV1CertificateSigningRequestParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoordinationV1LeaseForAllNamespacesParams(args map[string]string, r *http.Request) (ListCoordinationV1LeaseForAllNamespacesParams, error) {
	var params ListCoordinationV1LeaseForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoordinationV1NamespacedLeaseParams(args map[string]string, r *http.Request) (ListCoordinationV1NamespacedLeaseParams, error) {
	var params ListCoordinationV1NamespacedLeaseParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1ComponentStatusParams(args map[string]string, r *http.Request) (ListCoreV1ComponentStatusParams, error) {
	var params ListCoreV1ComponentStatusParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1ConfigMapForAllNamespacesParams(args map[string]string, r *http.Request) (ListCoreV1ConfigMapForAllNamespacesParams, error) {
	var params ListCoreV1ConfigMapForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1EndpointsForAllNamespacesParams(args map[string]string, r *http.Request) (ListCoreV1EndpointsForAllNamespacesParams, error) {
	var params ListCoreV1EndpointsForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1EventForAllNamespacesParams(args map[string]string, r *http.Request) (ListCoreV1EventForAllNamespacesParams, error) {
	var params ListCoreV1EventForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1LimitRangeForAllNamespacesParams(args map[string]string, r *http.Request) (ListCoreV1LimitRangeForAllNamespacesParams, error) {
	var params ListCoreV1LimitRangeForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespaceParams(args map[string]string, r *http.Request) (ListCoreV1NamespaceParams, error) {
	var params ListCoreV1NamespaceParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedConfigMapParams(args map[string]string, r *http.Request) (ListCoreV1NamespacedConfigMapParams, error) {
	var params ListCoreV1NamespacedConfigMapParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedEndpointsParams(args map[string]string, r *http.Request) (ListCoreV1NamespacedEndpointsParams, error) {
	var params ListCoreV1NamespacedEndpointsParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedEventParams(args map[string]string, r *http.Request) (ListCoreV1NamespacedEventParams, error) {
	var params ListCoreV1NamespacedEventParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedLimitRangeParams(args map[string]string, r *http.Request) (ListCoreV1NamespacedLimitRangeParams, error) {
	var params ListCoreV1NamespacedLimitRangeParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedPersistentVolumeClaimParams(args map[string]string, r *http.Request) (ListCoreV1NamespacedPersistentVolumeClaimParams, error) {
	var params ListCoreV1NamespacedPersistentVolumeClaimParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedPodParams(args map[string]string, r *http.Request) (ListCoreV1NamespacedPodParams, error) {
	var params ListCoreV1NamespacedPodParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedPodTemplateParams(args map[string]string, r *http.Request) (ListCoreV1NamespacedPodTemplateParams, error) {
	var params ListCoreV1NamespacedPodTemplateParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedReplicationControllerParams(args map[string]string, r *http.Request) (ListCoreV1NamespacedReplicationControllerParams, error) {
	var params ListCoreV1NamespacedReplicationControllerParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedResourceQuotaParams(args map[string]string, r *http.Request) (ListCoreV1NamespacedResourceQuotaParams, error) {
	var params ListCoreV1NamespacedResourceQuotaParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedSecretParams(args map[string]string, r *http.Request) (ListCoreV1NamespacedSecretParams, error) {
	var params ListCoreV1NamespacedSecretParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedServiceParams(args map[string]string, r *http.Request) (ListCoreV1NamespacedServiceParams, error) {
	var params ListCoreV1NamespacedServiceParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedServiceAccountParams(args map[string]string, r *http.Request) (ListCoreV1NamespacedServiceAccountParams, error) {
	var params ListCoreV1NamespacedServiceAccountParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NodeParams(args map[string]string, r *http.Request) (ListCoreV1NodeParams, error) {
	var params ListCoreV1NodeParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1PersistentVolumeParams(args map[string]string, r *http.Request) (ListCoreV1PersistentVolumeParams, error) {
	var params ListCoreV1PersistentVolumeParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1PersistentVolumeClaimForAllNamespacesParams(args map[string]string, r *http.Request) (ListCoreV1PersistentVolumeClaimForAllNamespacesParams, error) {
	var params ListCoreV1PersistentVolumeClaimForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1PodForAllNamespacesParams(args map[string]string, r *http.Request) (ListCoreV1PodForAllNamespacesParams, error) {
	var params ListCoreV1PodForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1PodTemplateForAllNamespacesParams(args map[string]string, r *http.Request) (ListCoreV1PodTemplateForAllNamespacesParams, error) {
	var params ListCoreV1PodTemplateForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1ReplicationControllerForAllNamespacesParams(args map[string]string, r *http.Request) (ListCoreV1ReplicationControllerForAllNamespacesParams, error) {
	var params ListCoreV1ReplicationControllerForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1ResourceQuotaForAllNamespacesParams(args map[string]string, r *http.Request) (ListCoreV1ResourceQuotaForAllNamespacesParams, error) {
	var params ListCoreV1ResourceQuotaForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1SecretForAllNamespacesParams(args map[string]string, r *http.Request) (ListCoreV1SecretForAllNamespacesParams, error) {
	var params ListCoreV1SecretForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1ServiceAccountForAllNamespacesParams(args map[string]string, r *http.Request) (ListCoreV1ServiceAccountForAllNamespacesParams, error) {
	var params ListCoreV1ServiceAccountForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListCoreV1ServiceForAllNamespacesParams(args map[string]string, r *http.Request) (ListCoreV1ServiceForAllNamespacesParams, error) {
	var params ListCoreV1ServiceForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListDiscoveryV1EndpointSliceForAllNamespacesParams(args map[string]string, r *http.Request) (ListDiscoveryV1EndpointSliceForAllNamespacesParams, error) {
	var params ListDiscoveryV1EndpointSliceForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListDiscoveryV1NamespacedEndpointSliceParams(args map[string]string, r *http.Request) (ListDiscoveryV1NamespacedEndpointSliceParams, error) {
	var params ListDiscoveryV1NamespacedEndpointSliceParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListDiscoveryV1beta1EndpointSliceForAllNamespacesParams(args map[string]string, r *http.Request) (ListDiscoveryV1beta1EndpointSliceForAllNamespacesParams, error) {
	var params ListDiscoveryV1beta1EndpointSliceForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListDiscoveryV1beta1NamespacedEndpointSliceParams(args map[string]string, r *http.Request) (ListDiscoveryV1beta1NamespacedEndpointSliceParams, error) {
	var params ListDiscoveryV1beta1NamespacedEndpointSliceParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListEventsV1EventForAllNamespacesParams(args map[string]string, r *http.Request) (ListEventsV1EventForAllNamespacesParams, error) {
	var params ListEventsV1EventForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListEventsV1NamespacedEventParams(args map[string]string, r *http.Request) (ListEventsV1NamespacedEventParams, error) {
	var params ListEventsV1NamespacedEventParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListEventsV1beta1EventForAllNamespacesParams(args map[string]string, r *http.Request) (ListEventsV1beta1EventForAllNamespacesParams, error) {
	var params ListEventsV1beta1EventForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListEventsV1beta1NamespacedEventParams(args map[string]string, r *http.Request) (ListEventsV1beta1NamespacedEventParams, error) {
	var params ListEventsV1beta1NamespacedEventParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListFlowcontrolApiserverV1beta1FlowSchemaParams(args map[string]string, r *http.Request) (ListFlowcontrolApiserverV1beta1FlowSchemaParams, error) {
	var params ListFlowcontrolApiserverV1beta1FlowSchemaParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams(args map[string]string, r *http.Request) (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams, error) {
	var params ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListFlowcontrolApiserverV1beta2FlowSchemaParams(args map[string]string, r *http.Request) (ListFlowcontrolApiserverV1beta2FlowSchemaParams, error) {
	var params ListFlowcontrolApiserverV1beta2FlowSchemaParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams(args map[string]string, r *http.Request) (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams, error) {
	var params ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListInternalApiserverV1alpha1StorageVersionParams(args map[string]string, r *http.Request) (ListInternalApiserverV1alpha1StorageVersionParams, error) {
	var params ListInternalApiserverV1alpha1StorageVersionParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListNetworkingV1IngressClassParams(args map[string]string, r *http.Request) (ListNetworkingV1IngressClassParams, error) {
	var params ListNetworkingV1IngressClassParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListNetworkingV1IngressForAllNamespacesParams(args map[string]string, r *http.Request) (ListNetworkingV1IngressForAllNamespacesParams, error) {
	var params ListNetworkingV1IngressForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListNetworkingV1NamespacedIngressParams(args map[string]string, r *http.Request) (ListNetworkingV1NamespacedIngressParams, error) {
	var params ListNetworkingV1NamespacedIngressParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListNetworkingV1NamespacedNetworkPolicyParams(args map[string]string, r *http.Request) (ListNetworkingV1NamespacedNetworkPolicyParams, error) {
	var params ListNetworkingV1NamespacedNetworkPolicyParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListNetworkingV1NetworkPolicyForAllNamespacesParams(args map[string]string, r *http.Request) (ListNetworkingV1NetworkPolicyForAllNamespacesParams, error) {
	var params ListNetworkingV1NetworkPolicyForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListNodeV1RuntimeClassParams(args map[string]string, r *http.Request) (ListNodeV1RuntimeClassParams, error) {
	var params ListNodeV1RuntimeClassParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListNodeV1alpha1RuntimeClassParams(args map[string]string, r *http.Request) (ListNodeV1alpha1RuntimeClassParams, error) {
	var params ListNodeV1alpha1RuntimeClassParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListNodeV1beta1RuntimeClassParams(args map[string]string, r *http.Request) (ListNodeV1beta1RuntimeClassParams, error) {
	var params ListNodeV1beta1RuntimeClassParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListPolicyV1NamespacedPodDisruptionBudgetParams(args map[string]string, r *http.Request) (ListPolicyV1NamespacedPodDisruptionBudgetParams, error) {
	var params ListPolicyV1NamespacedPodDisruptionBudgetParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListPolicyV1PodDisruptionBudgetForAllNamespacesParams(args map[string]string, r *http.Request) (ListPolicyV1PodDisruptionBudgetForAllNamespacesParams, error) {
	var params ListPolicyV1PodDisruptionBudgetForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListPolicyV1beta1NamespacedPodDisruptionBudgetParams(args map[string]string, r *http.Request) (ListPolicyV1beta1NamespacedPodDisruptionBudgetParams, error) {
	var params ListPolicyV1beta1NamespacedPodDisruptionBudgetParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListPolicyV1beta1PodDisruptionBudgetForAllNamespacesParams(args map[string]string, r *http.Request) (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesParams, error) {
	var params ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListPolicyV1beta1PodSecurityPolicyParams(args map[string]string, r *http.Request) (ListPolicyV1beta1PodSecurityPolicyParams, error) {
	var params ListPolicyV1beta1PodSecurityPolicyParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListRbacAuthorizationV1ClusterRoleParams(args map[string]string, r *http.Request) (ListRbacAuthorizationV1ClusterRoleParams, error) {
	var params ListRbacAuthorizationV1ClusterRoleParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListRbacAuthorizationV1ClusterRoleBindingParams(args map[string]string, r *http.Request) (ListRbacAuthorizationV1ClusterRoleBindingParams, error) {
	var params ListRbacAuthorizationV1ClusterRoleBindingParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListRbacAuthorizationV1NamespacedRoleParams(args map[string]string, r *http.Request) (ListRbacAuthorizationV1NamespacedRoleParams, error) {
	var params ListRbacAuthorizationV1NamespacedRoleParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListRbacAuthorizationV1NamespacedRoleBindingParams(args map[string]string, r *http.Request) (ListRbacAuthorizationV1NamespacedRoleBindingParams, error) {
	var params ListRbacAuthorizationV1NamespacedRoleBindingParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListRbacAuthorizationV1RoleBindingForAllNamespacesParams(args map[string]string, r *http.Request) (ListRbacAuthorizationV1RoleBindingForAllNamespacesParams, error) {
	var params ListRbacAuthorizationV1RoleBindingForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListRbacAuthorizationV1RoleForAllNamespacesParams(args map[string]string, r *http.Request) (ListRbacAuthorizationV1RoleForAllNamespacesParams, error) {
	var params ListRbacAuthorizationV1RoleForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListSchedulingV1PriorityClassParams(args map[string]string, r *http.Request) (ListSchedulingV1PriorityClassParams, error) {
	var params ListSchedulingV1PriorityClassParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListStorageV1CSIDriverParams(args map[string]string, r *http.Request) (ListStorageV1CSIDriverParams, error) {
	var params ListStorageV1CSIDriverParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListStorageV1CSINodeParams(args map[string]string, r *http.Request) (ListStorageV1CSINodeParams, error) {
	var params ListStorageV1CSINodeParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListStorageV1StorageClassParams(args map[string]string, r *http.Request) (ListStorageV1StorageClassParams, error) {
	var params ListStorageV1StorageClassParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListStorageV1VolumeAttachmentParams(args map[string]string, r *http.Request) (ListStorageV1VolumeAttachmentParams, error) {
	var params ListStorageV1VolumeAttachmentParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListStorageV1alpha1CSIStorageCapacityForAllNamespacesParams(args map[string]string, r *http.Request) (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesParams, error) {
	var params ListStorageV1alpha1CSIStorageCapacityForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListStorageV1alpha1NamespacedCSIStorageCapacityParams(args map[string]string, r *http.Request) (ListStorageV1alpha1NamespacedCSIStorageCapacityParams, error) {
	var params ListStorageV1alpha1NamespacedCSIStorageCapacityParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeListStorageV1beta1CSIStorageCapacityForAllNamespacesParams(args map[string]string, r *http.Request) (ListStorageV1beta1CSIStorageCapacityForAllNamespacesParams, error) {
	var params ListStorageV1beta1CSIStorageCapacityForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeListStorageV1beta1NamespacedCSIStorageCapacityParams(args map[string]string, r *http.Request) (ListStorageV1beta1NamespacedCSIStorageCapacityParams, error) {
	var params ListStorageV1beta1NamespacedCSIStorageCapacityParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeLogFileHandlerParams(args map[string]string, r *http.Request) (LogFileHandlerParams, error) {
	var params LogFileHandlerParams
	// Decode path: logpath.
	{
		param := args["logpath"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "logpath",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Logpath = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: logpath: not specified`)
		}
	}
	return params, nil
}

func decodeReadAdmissionregistrationV1MutatingWebhookConfigurationParams(args map[string]string, r *http.Request) (ReadAdmissionregistrationV1MutatingWebhookConfigurationParams, error) {
	var params ReadAdmissionregistrationV1MutatingWebhookConfigurationParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAdmissionregistrationV1ValidatingWebhookConfigurationParams(args map[string]string, r *http.Request) (ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams, error) {
	var params ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadApiextensionsV1CustomResourceDefinitionParams(args map[string]string, r *http.Request) (ReadApiextensionsV1CustomResourceDefinitionParams, error) {
	var params ReadApiextensionsV1CustomResourceDefinitionParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadApiextensionsV1CustomResourceDefinitionStatusParams(args map[string]string, r *http.Request) (ReadApiextensionsV1CustomResourceDefinitionStatusParams, error) {
	var params ReadApiextensionsV1CustomResourceDefinitionStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadApiregistrationV1APIServiceParams(args map[string]string, r *http.Request) (ReadApiregistrationV1APIServiceParams, error) {
	var params ReadApiregistrationV1APIServiceParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadApiregistrationV1APIServiceStatusParams(args map[string]string, r *http.Request) (ReadApiregistrationV1APIServiceStatusParams, error) {
	var params ReadApiregistrationV1APIServiceStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedControllerRevisionParams(args map[string]string, r *http.Request) (ReadAppsV1NamespacedControllerRevisionParams, error) {
	var params ReadAppsV1NamespacedControllerRevisionParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedDaemonSetParams(args map[string]string, r *http.Request) (ReadAppsV1NamespacedDaemonSetParams, error) {
	var params ReadAppsV1NamespacedDaemonSetParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedDaemonSetStatusParams(args map[string]string, r *http.Request) (ReadAppsV1NamespacedDaemonSetStatusParams, error) {
	var params ReadAppsV1NamespacedDaemonSetStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedDeploymentParams(args map[string]string, r *http.Request) (ReadAppsV1NamespacedDeploymentParams, error) {
	var params ReadAppsV1NamespacedDeploymentParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedDeploymentScaleParams(args map[string]string, r *http.Request) (ReadAppsV1NamespacedDeploymentScaleParams, error) {
	var params ReadAppsV1NamespacedDeploymentScaleParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedDeploymentStatusParams(args map[string]string, r *http.Request) (ReadAppsV1NamespacedDeploymentStatusParams, error) {
	var params ReadAppsV1NamespacedDeploymentStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedReplicaSetParams(args map[string]string, r *http.Request) (ReadAppsV1NamespacedReplicaSetParams, error) {
	var params ReadAppsV1NamespacedReplicaSetParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedReplicaSetScaleParams(args map[string]string, r *http.Request) (ReadAppsV1NamespacedReplicaSetScaleParams, error) {
	var params ReadAppsV1NamespacedReplicaSetScaleParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedReplicaSetStatusParams(args map[string]string, r *http.Request) (ReadAppsV1NamespacedReplicaSetStatusParams, error) {
	var params ReadAppsV1NamespacedReplicaSetStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedStatefulSetParams(args map[string]string, r *http.Request) (ReadAppsV1NamespacedStatefulSetParams, error) {
	var params ReadAppsV1NamespacedStatefulSetParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedStatefulSetScaleParams(args map[string]string, r *http.Request) (ReadAppsV1NamespacedStatefulSetScaleParams, error) {
	var params ReadAppsV1NamespacedStatefulSetScaleParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedStatefulSetStatusParams(args map[string]string, r *http.Request) (ReadAppsV1NamespacedStatefulSetStatusParams, error) {
	var params ReadAppsV1NamespacedStatefulSetStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAutoscalingV1NamespacedHorizontalPodAutoscalerParams(args map[string]string, r *http.Request) (ReadAutoscalingV1NamespacedHorizontalPodAutoscalerParams, error) {
	var params ReadAutoscalingV1NamespacedHorizontalPodAutoscalerParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusParams(args map[string]string, r *http.Request) (ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusParams, error) {
	var params ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams(args map[string]string, r *http.Request) (ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams, error) {
	var params ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusParams(args map[string]string, r *http.Request) (ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusParams, error) {
	var params ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams(args map[string]string, r *http.Request) (ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams, error) {
	var params ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusParams(args map[string]string, r *http.Request) (ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusParams, error) {
	var params ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadBatchV1NamespacedCronJobParams(args map[string]string, r *http.Request) (ReadBatchV1NamespacedCronJobParams, error) {
	var params ReadBatchV1NamespacedCronJobParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadBatchV1NamespacedCronJobStatusParams(args map[string]string, r *http.Request) (ReadBatchV1NamespacedCronJobStatusParams, error) {
	var params ReadBatchV1NamespacedCronJobStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadBatchV1NamespacedJobParams(args map[string]string, r *http.Request) (ReadBatchV1NamespacedJobParams, error) {
	var params ReadBatchV1NamespacedJobParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadBatchV1NamespacedJobStatusParams(args map[string]string, r *http.Request) (ReadBatchV1NamespacedJobStatusParams, error) {
	var params ReadBatchV1NamespacedJobStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadBatchV1beta1NamespacedCronJobParams(args map[string]string, r *http.Request) (ReadBatchV1beta1NamespacedCronJobParams, error) {
	var params ReadBatchV1beta1NamespacedCronJobParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadBatchV1beta1NamespacedCronJobStatusParams(args map[string]string, r *http.Request) (ReadBatchV1beta1NamespacedCronJobStatusParams, error) {
	var params ReadBatchV1beta1NamespacedCronJobStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCertificatesV1CertificateSigningRequestParams(args map[string]string, r *http.Request) (ReadCertificatesV1CertificateSigningRequestParams, error) {
	var params ReadCertificatesV1CertificateSigningRequestParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCertificatesV1CertificateSigningRequestApprovalParams(args map[string]string, r *http.Request) (ReadCertificatesV1CertificateSigningRequestApprovalParams, error) {
	var params ReadCertificatesV1CertificateSigningRequestApprovalParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCertificatesV1CertificateSigningRequestStatusParams(args map[string]string, r *http.Request) (ReadCertificatesV1CertificateSigningRequestStatusParams, error) {
	var params ReadCertificatesV1CertificateSigningRequestStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoordinationV1NamespacedLeaseParams(args map[string]string, r *http.Request) (ReadCoordinationV1NamespacedLeaseParams, error) {
	var params ReadCoordinationV1NamespacedLeaseParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1ComponentStatusParams(args map[string]string, r *http.Request) (ReadCoreV1ComponentStatusParams, error) {
	var params ReadCoreV1ComponentStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespaceParams(args map[string]string, r *http.Request) (ReadCoreV1NamespaceParams, error) {
	var params ReadCoreV1NamespaceParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespaceStatusParams(args map[string]string, r *http.Request) (ReadCoreV1NamespaceStatusParams, error) {
	var params ReadCoreV1NamespaceStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedConfigMapParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedConfigMapParams, error) {
	var params ReadCoreV1NamespacedConfigMapParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedEndpointsParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedEndpointsParams, error) {
	var params ReadCoreV1NamespacedEndpointsParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedEventParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedEventParams, error) {
	var params ReadCoreV1NamespacedEventParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedLimitRangeParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedLimitRangeParams, error) {
	var params ReadCoreV1NamespacedLimitRangeParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedPersistentVolumeClaimParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedPersistentVolumeClaimParams, error) {
	var params ReadCoreV1NamespacedPersistentVolumeClaimParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedPersistentVolumeClaimStatusParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedPersistentVolumeClaimStatusParams, error) {
	var params ReadCoreV1NamespacedPersistentVolumeClaimStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedPodParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedPodParams, error) {
	var params ReadCoreV1NamespacedPodParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedPodEphemeralcontainersParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedPodEphemeralcontainersParams, error) {
	var params ReadCoreV1NamespacedPodEphemeralcontainersParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedPodLogParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedPodLogParams, error) {
	var params ReadCoreV1NamespacedPodLogParams
	// Decode query: container.
	{
		values, ok := r.URL.Query()["container"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContainerVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContainerVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Container.SetTo(paramsContainerVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: container: parse`)
			}
		}
	}
	// Decode query: follow.
	{
		values, ok := r.URL.Query()["follow"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFollowVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsFollowVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Follow.SetTo(paramsFollowVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: follow: parse`)
			}
		}
	}
	// Decode query: insecureSkipTLSVerifyBackend.
	{
		values, ok := r.URL.Query()["insecureSkipTLSVerifyBackend"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsInsecureSkipTLSVerifyBackendVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsInsecureSkipTLSVerifyBackendVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.InsecureSkipTLSVerifyBackend.SetTo(paramsInsecureSkipTLSVerifyBackendVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: insecureSkipTLSVerifyBackend: parse`)
			}
		}
	}
	// Decode query: limitBytes.
	{
		values, ok := r.URL.Query()["limitBytes"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitBytesVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitBytesVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LimitBytes.SetTo(paramsLimitBytesVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limitBytes: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: previous.
	{
		values, ok := r.URL.Query()["previous"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPreviousVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsPreviousVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Previous.SetTo(paramsPreviousVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: previous: parse`)
			}
		}
	}
	// Decode query: sinceSeconds.
	{
		values, ok := r.URL.Query()["sinceSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsSinceSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsSinceSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SinceSeconds.SetTo(paramsSinceSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: sinceSeconds: parse`)
			}
		}
	}
	// Decode query: tailLines.
	{
		values, ok := r.URL.Query()["tailLines"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTailLinesVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTailLinesVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TailLines.SetTo(paramsTailLinesVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: tailLines: parse`)
			}
		}
	}
	// Decode query: timestamps.
	{
		values, ok := r.URL.Query()["timestamps"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimestampsVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsTimestampsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Timestamps.SetTo(paramsTimestampsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timestamps: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedPodStatusParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedPodStatusParams, error) {
	var params ReadCoreV1NamespacedPodStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedPodTemplateParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedPodTemplateParams, error) {
	var params ReadCoreV1NamespacedPodTemplateParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedReplicationControllerParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedReplicationControllerParams, error) {
	var params ReadCoreV1NamespacedReplicationControllerParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedReplicationControllerScaleParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedReplicationControllerScaleParams, error) {
	var params ReadCoreV1NamespacedReplicationControllerScaleParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedReplicationControllerStatusParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedReplicationControllerStatusParams, error) {
	var params ReadCoreV1NamespacedReplicationControllerStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedResourceQuotaParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedResourceQuotaParams, error) {
	var params ReadCoreV1NamespacedResourceQuotaParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedResourceQuotaStatusParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedResourceQuotaStatusParams, error) {
	var params ReadCoreV1NamespacedResourceQuotaStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedSecretParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedSecretParams, error) {
	var params ReadCoreV1NamespacedSecretParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedServiceParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedServiceParams, error) {
	var params ReadCoreV1NamespacedServiceParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedServiceAccountParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedServiceAccountParams, error) {
	var params ReadCoreV1NamespacedServiceAccountParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedServiceStatusParams(args map[string]string, r *http.Request) (ReadCoreV1NamespacedServiceStatusParams, error) {
	var params ReadCoreV1NamespacedServiceStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NodeParams(args map[string]string, r *http.Request) (ReadCoreV1NodeParams, error) {
	var params ReadCoreV1NodeParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NodeStatusParams(args map[string]string, r *http.Request) (ReadCoreV1NodeStatusParams, error) {
	var params ReadCoreV1NodeStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1PersistentVolumeParams(args map[string]string, r *http.Request) (ReadCoreV1PersistentVolumeParams, error) {
	var params ReadCoreV1PersistentVolumeParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1PersistentVolumeStatusParams(args map[string]string, r *http.Request) (ReadCoreV1PersistentVolumeStatusParams, error) {
	var params ReadCoreV1PersistentVolumeStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadDiscoveryV1NamespacedEndpointSliceParams(args map[string]string, r *http.Request) (ReadDiscoveryV1NamespacedEndpointSliceParams, error) {
	var params ReadDiscoveryV1NamespacedEndpointSliceParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadDiscoveryV1beta1NamespacedEndpointSliceParams(args map[string]string, r *http.Request) (ReadDiscoveryV1beta1NamespacedEndpointSliceParams, error) {
	var params ReadDiscoveryV1beta1NamespacedEndpointSliceParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadEventsV1NamespacedEventParams(args map[string]string, r *http.Request) (ReadEventsV1NamespacedEventParams, error) {
	var params ReadEventsV1NamespacedEventParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadEventsV1beta1NamespacedEventParams(args map[string]string, r *http.Request) (ReadEventsV1beta1NamespacedEventParams, error) {
	var params ReadEventsV1beta1NamespacedEventParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadFlowcontrolApiserverV1beta1FlowSchemaParams(args map[string]string, r *http.Request) (ReadFlowcontrolApiserverV1beta1FlowSchemaParams, error) {
	var params ReadFlowcontrolApiserverV1beta1FlowSchemaParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadFlowcontrolApiserverV1beta1FlowSchemaStatusParams(args map[string]string, r *http.Request) (ReadFlowcontrolApiserverV1beta1FlowSchemaStatusParams, error) {
	var params ReadFlowcontrolApiserverV1beta1FlowSchemaStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams(args map[string]string, r *http.Request) (ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams, error) {
	var params ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusParams(args map[string]string, r *http.Request) (ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusParams, error) {
	var params ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadFlowcontrolApiserverV1beta2FlowSchemaParams(args map[string]string, r *http.Request) (ReadFlowcontrolApiserverV1beta2FlowSchemaParams, error) {
	var params ReadFlowcontrolApiserverV1beta2FlowSchemaParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadFlowcontrolApiserverV1beta2FlowSchemaStatusParams(args map[string]string, r *http.Request) (ReadFlowcontrolApiserverV1beta2FlowSchemaStatusParams, error) {
	var params ReadFlowcontrolApiserverV1beta2FlowSchemaStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams(args map[string]string, r *http.Request) (ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams, error) {
	var params ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusParams(args map[string]string, r *http.Request) (ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusParams, error) {
	var params ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadInternalApiserverV1alpha1StorageVersionParams(args map[string]string, r *http.Request) (ReadInternalApiserverV1alpha1StorageVersionParams, error) {
	var params ReadInternalApiserverV1alpha1StorageVersionParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadInternalApiserverV1alpha1StorageVersionStatusParams(args map[string]string, r *http.Request) (ReadInternalApiserverV1alpha1StorageVersionStatusParams, error) {
	var params ReadInternalApiserverV1alpha1StorageVersionStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadNetworkingV1IngressClassParams(args map[string]string, r *http.Request) (ReadNetworkingV1IngressClassParams, error) {
	var params ReadNetworkingV1IngressClassParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadNetworkingV1NamespacedIngressParams(args map[string]string, r *http.Request) (ReadNetworkingV1NamespacedIngressParams, error) {
	var params ReadNetworkingV1NamespacedIngressParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadNetworkingV1NamespacedIngressStatusParams(args map[string]string, r *http.Request) (ReadNetworkingV1NamespacedIngressStatusParams, error) {
	var params ReadNetworkingV1NamespacedIngressStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadNetworkingV1NamespacedNetworkPolicyParams(args map[string]string, r *http.Request) (ReadNetworkingV1NamespacedNetworkPolicyParams, error) {
	var params ReadNetworkingV1NamespacedNetworkPolicyParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadNodeV1RuntimeClassParams(args map[string]string, r *http.Request) (ReadNodeV1RuntimeClassParams, error) {
	var params ReadNodeV1RuntimeClassParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadNodeV1alpha1RuntimeClassParams(args map[string]string, r *http.Request) (ReadNodeV1alpha1RuntimeClassParams, error) {
	var params ReadNodeV1alpha1RuntimeClassParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadNodeV1beta1RuntimeClassParams(args map[string]string, r *http.Request) (ReadNodeV1beta1RuntimeClassParams, error) {
	var params ReadNodeV1beta1RuntimeClassParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadPolicyV1NamespacedPodDisruptionBudgetParams(args map[string]string, r *http.Request) (ReadPolicyV1NamespacedPodDisruptionBudgetParams, error) {
	var params ReadPolicyV1NamespacedPodDisruptionBudgetParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadPolicyV1NamespacedPodDisruptionBudgetStatusParams(args map[string]string, r *http.Request) (ReadPolicyV1NamespacedPodDisruptionBudgetStatusParams, error) {
	var params ReadPolicyV1NamespacedPodDisruptionBudgetStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadPolicyV1beta1NamespacedPodDisruptionBudgetParams(args map[string]string, r *http.Request) (ReadPolicyV1beta1NamespacedPodDisruptionBudgetParams, error) {
	var params ReadPolicyV1beta1NamespacedPodDisruptionBudgetParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams(args map[string]string, r *http.Request) (ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams, error) {
	var params ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadPolicyV1beta1PodSecurityPolicyParams(args map[string]string, r *http.Request) (ReadPolicyV1beta1PodSecurityPolicyParams, error) {
	var params ReadPolicyV1beta1PodSecurityPolicyParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadRbacAuthorizationV1ClusterRoleParams(args map[string]string, r *http.Request) (ReadRbacAuthorizationV1ClusterRoleParams, error) {
	var params ReadRbacAuthorizationV1ClusterRoleParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadRbacAuthorizationV1ClusterRoleBindingParams(args map[string]string, r *http.Request) (ReadRbacAuthorizationV1ClusterRoleBindingParams, error) {
	var params ReadRbacAuthorizationV1ClusterRoleBindingParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadRbacAuthorizationV1NamespacedRoleParams(args map[string]string, r *http.Request) (ReadRbacAuthorizationV1NamespacedRoleParams, error) {
	var params ReadRbacAuthorizationV1NamespacedRoleParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadRbacAuthorizationV1NamespacedRoleBindingParams(args map[string]string, r *http.Request) (ReadRbacAuthorizationV1NamespacedRoleBindingParams, error) {
	var params ReadRbacAuthorizationV1NamespacedRoleBindingParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadSchedulingV1PriorityClassParams(args map[string]string, r *http.Request) (ReadSchedulingV1PriorityClassParams, error) {
	var params ReadSchedulingV1PriorityClassParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadStorageV1CSIDriverParams(args map[string]string, r *http.Request) (ReadStorageV1CSIDriverParams, error) {
	var params ReadStorageV1CSIDriverParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadStorageV1CSINodeParams(args map[string]string, r *http.Request) (ReadStorageV1CSINodeParams, error) {
	var params ReadStorageV1CSINodeParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadStorageV1StorageClassParams(args map[string]string, r *http.Request) (ReadStorageV1StorageClassParams, error) {
	var params ReadStorageV1StorageClassParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadStorageV1VolumeAttachmentParams(args map[string]string, r *http.Request) (ReadStorageV1VolumeAttachmentParams, error) {
	var params ReadStorageV1VolumeAttachmentParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadStorageV1VolumeAttachmentStatusParams(args map[string]string, r *http.Request) (ReadStorageV1VolumeAttachmentStatusParams, error) {
	var params ReadStorageV1VolumeAttachmentStatusParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadStorageV1alpha1NamespacedCSIStorageCapacityParams(args map[string]string, r *http.Request) (ReadStorageV1alpha1NamespacedCSIStorageCapacityParams, error) {
	var params ReadStorageV1alpha1NamespacedCSIStorageCapacityParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeReadStorageV1beta1NamespacedCSIStorageCapacityParams(args map[string]string, r *http.Request) (ReadStorageV1beta1NamespacedCSIStorageCapacityParams, error) {
	var params ReadStorageV1beta1NamespacedCSIStorageCapacityParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAdmissionregistrationV1MutatingWebhookConfigurationParams(args map[string]string, r *http.Request) (WatchAdmissionregistrationV1MutatingWebhookConfigurationParams, error) {
	var params WatchAdmissionregistrationV1MutatingWebhookConfigurationParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAdmissionregistrationV1MutatingWebhookConfigurationListParams(args map[string]string, r *http.Request) (WatchAdmissionregistrationV1MutatingWebhookConfigurationListParams, error) {
	var params WatchAdmissionregistrationV1MutatingWebhookConfigurationListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAdmissionregistrationV1ValidatingWebhookConfigurationParams(args map[string]string, r *http.Request) (WatchAdmissionregistrationV1ValidatingWebhookConfigurationParams, error) {
	var params WatchAdmissionregistrationV1ValidatingWebhookConfigurationParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAdmissionregistrationV1ValidatingWebhookConfigurationListParams(args map[string]string, r *http.Request) (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListParams, error) {
	var params WatchAdmissionregistrationV1ValidatingWebhookConfigurationListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchApiextensionsV1CustomResourceDefinitionParams(args map[string]string, r *http.Request) (WatchApiextensionsV1CustomResourceDefinitionParams, error) {
	var params WatchApiextensionsV1CustomResourceDefinitionParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchApiextensionsV1CustomResourceDefinitionListParams(args map[string]string, r *http.Request) (WatchApiextensionsV1CustomResourceDefinitionListParams, error) {
	var params WatchApiextensionsV1CustomResourceDefinitionListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchApiregistrationV1APIServiceParams(args map[string]string, r *http.Request) (WatchApiregistrationV1APIServiceParams, error) {
	var params WatchApiregistrationV1APIServiceParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchApiregistrationV1APIServiceListParams(args map[string]string, r *http.Request) (WatchApiregistrationV1APIServiceListParams, error) {
	var params WatchApiregistrationV1APIServiceListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1ControllerRevisionListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchAppsV1ControllerRevisionListForAllNamespacesParams, error) {
	var params WatchAppsV1ControllerRevisionListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1DaemonSetListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchAppsV1DaemonSetListForAllNamespacesParams, error) {
	var params WatchAppsV1DaemonSetListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1DeploymentListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchAppsV1DeploymentListForAllNamespacesParams, error) {
	var params WatchAppsV1DeploymentListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedControllerRevisionParams(args map[string]string, r *http.Request) (WatchAppsV1NamespacedControllerRevisionParams, error) {
	var params WatchAppsV1NamespacedControllerRevisionParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedControllerRevisionListParams(args map[string]string, r *http.Request) (WatchAppsV1NamespacedControllerRevisionListParams, error) {
	var params WatchAppsV1NamespacedControllerRevisionListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedDaemonSetParams(args map[string]string, r *http.Request) (WatchAppsV1NamespacedDaemonSetParams, error) {
	var params WatchAppsV1NamespacedDaemonSetParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedDaemonSetListParams(args map[string]string, r *http.Request) (WatchAppsV1NamespacedDaemonSetListParams, error) {
	var params WatchAppsV1NamespacedDaemonSetListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedDeploymentParams(args map[string]string, r *http.Request) (WatchAppsV1NamespacedDeploymentParams, error) {
	var params WatchAppsV1NamespacedDeploymentParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedDeploymentListParams(args map[string]string, r *http.Request) (WatchAppsV1NamespacedDeploymentListParams, error) {
	var params WatchAppsV1NamespacedDeploymentListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedReplicaSetParams(args map[string]string, r *http.Request) (WatchAppsV1NamespacedReplicaSetParams, error) {
	var params WatchAppsV1NamespacedReplicaSetParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedReplicaSetListParams(args map[string]string, r *http.Request) (WatchAppsV1NamespacedReplicaSetListParams, error) {
	var params WatchAppsV1NamespacedReplicaSetListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedStatefulSetParams(args map[string]string, r *http.Request) (WatchAppsV1NamespacedStatefulSetParams, error) {
	var params WatchAppsV1NamespacedStatefulSetParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedStatefulSetListParams(args map[string]string, r *http.Request) (WatchAppsV1NamespacedStatefulSetListParams, error) {
	var params WatchAppsV1NamespacedStatefulSetListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1ReplicaSetListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchAppsV1ReplicaSetListForAllNamespacesParams, error) {
	var params WatchAppsV1ReplicaSetListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1StatefulSetListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchAppsV1StatefulSetListForAllNamespacesParams, error) {
	var params WatchAppsV1StatefulSetListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesParams, error) {
	var params WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV1NamespacedHorizontalPodAutoscalerParams(args map[string]string, r *http.Request) (WatchAutoscalingV1NamespacedHorizontalPodAutoscalerParams, error) {
	var params WatchAutoscalingV1NamespacedHorizontalPodAutoscalerParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV1NamespacedHorizontalPodAutoscalerListParams(args map[string]string, r *http.Request) (WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListParams, error) {
	var params WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesParams, error) {
	var params WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams(args map[string]string, r *http.Request) (WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams, error) {
	var params WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListParams(args map[string]string, r *http.Request) (WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListParams, error) {
	var params WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesParams, error) {
	var params WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams(args map[string]string, r *http.Request) (WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams, error) {
	var params WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListParams(args map[string]string, r *http.Request) (WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListParams, error) {
	var params WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1CronJobListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchBatchV1CronJobListForAllNamespacesParams, error) {
	var params WatchBatchV1CronJobListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1JobListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchBatchV1JobListForAllNamespacesParams, error) {
	var params WatchBatchV1JobListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1NamespacedCronJobParams(args map[string]string, r *http.Request) (WatchBatchV1NamespacedCronJobParams, error) {
	var params WatchBatchV1NamespacedCronJobParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1NamespacedCronJobListParams(args map[string]string, r *http.Request) (WatchBatchV1NamespacedCronJobListParams, error) {
	var params WatchBatchV1NamespacedCronJobListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1NamespacedJobParams(args map[string]string, r *http.Request) (WatchBatchV1NamespacedJobParams, error) {
	var params WatchBatchV1NamespacedJobParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1NamespacedJobListParams(args map[string]string, r *http.Request) (WatchBatchV1NamespacedJobListParams, error) {
	var params WatchBatchV1NamespacedJobListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1beta1CronJobListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchBatchV1beta1CronJobListForAllNamespacesParams, error) {
	var params WatchBatchV1beta1CronJobListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1beta1NamespacedCronJobParams(args map[string]string, r *http.Request) (WatchBatchV1beta1NamespacedCronJobParams, error) {
	var params WatchBatchV1beta1NamespacedCronJobParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1beta1NamespacedCronJobListParams(args map[string]string, r *http.Request) (WatchBatchV1beta1NamespacedCronJobListParams, error) {
	var params WatchBatchV1beta1NamespacedCronJobListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCertificatesV1CertificateSigningRequestParams(args map[string]string, r *http.Request) (WatchCertificatesV1CertificateSigningRequestParams, error) {
	var params WatchCertificatesV1CertificateSigningRequestParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCertificatesV1CertificateSigningRequestListParams(args map[string]string, r *http.Request) (WatchCertificatesV1CertificateSigningRequestListParams, error) {
	var params WatchCertificatesV1CertificateSigningRequestListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoordinationV1LeaseListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchCoordinationV1LeaseListForAllNamespacesParams, error) {
	var params WatchCoordinationV1LeaseListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoordinationV1NamespacedLeaseParams(args map[string]string, r *http.Request) (WatchCoordinationV1NamespacedLeaseParams, error) {
	var params WatchCoordinationV1NamespacedLeaseParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoordinationV1NamespacedLeaseListParams(args map[string]string, r *http.Request) (WatchCoordinationV1NamespacedLeaseListParams, error) {
	var params WatchCoordinationV1NamespacedLeaseListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1ConfigMapListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchCoreV1ConfigMapListForAllNamespacesParams, error) {
	var params WatchCoreV1ConfigMapListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1EndpointsListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchCoreV1EndpointsListForAllNamespacesParams, error) {
	var params WatchCoreV1EndpointsListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1EventListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchCoreV1EventListForAllNamespacesParams, error) {
	var params WatchCoreV1EventListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1LimitRangeListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchCoreV1LimitRangeListForAllNamespacesParams, error) {
	var params WatchCoreV1LimitRangeListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespaceParams(args map[string]string, r *http.Request) (WatchCoreV1NamespaceParams, error) {
	var params WatchCoreV1NamespaceParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespaceListParams(args map[string]string, r *http.Request) (WatchCoreV1NamespaceListParams, error) {
	var params WatchCoreV1NamespaceListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedConfigMapParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedConfigMapParams, error) {
	var params WatchCoreV1NamespacedConfigMapParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedConfigMapListParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedConfigMapListParams, error) {
	var params WatchCoreV1NamespacedConfigMapListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedEndpointsParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedEndpointsParams, error) {
	var params WatchCoreV1NamespacedEndpointsParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedEndpointsListParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedEndpointsListParams, error) {
	var params WatchCoreV1NamespacedEndpointsListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedEventParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedEventParams, error) {
	var params WatchCoreV1NamespacedEventParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedEventListParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedEventListParams, error) {
	var params WatchCoreV1NamespacedEventListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedLimitRangeParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedLimitRangeParams, error) {
	var params WatchCoreV1NamespacedLimitRangeParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedLimitRangeListParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedLimitRangeListParams, error) {
	var params WatchCoreV1NamespacedLimitRangeListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedPersistentVolumeClaimParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedPersistentVolumeClaimParams, error) {
	var params WatchCoreV1NamespacedPersistentVolumeClaimParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedPersistentVolumeClaimListParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedPersistentVolumeClaimListParams, error) {
	var params WatchCoreV1NamespacedPersistentVolumeClaimListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedPodParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedPodParams, error) {
	var params WatchCoreV1NamespacedPodParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedPodListParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedPodListParams, error) {
	var params WatchCoreV1NamespacedPodListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedPodTemplateParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedPodTemplateParams, error) {
	var params WatchCoreV1NamespacedPodTemplateParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedPodTemplateListParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedPodTemplateListParams, error) {
	var params WatchCoreV1NamespacedPodTemplateListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedReplicationControllerParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedReplicationControllerParams, error) {
	var params WatchCoreV1NamespacedReplicationControllerParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedReplicationControllerListParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedReplicationControllerListParams, error) {
	var params WatchCoreV1NamespacedReplicationControllerListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedResourceQuotaParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedResourceQuotaParams, error) {
	var params WatchCoreV1NamespacedResourceQuotaParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedResourceQuotaListParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedResourceQuotaListParams, error) {
	var params WatchCoreV1NamespacedResourceQuotaListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedSecretParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedSecretParams, error) {
	var params WatchCoreV1NamespacedSecretParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedSecretListParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedSecretListParams, error) {
	var params WatchCoreV1NamespacedSecretListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedServiceParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedServiceParams, error) {
	var params WatchCoreV1NamespacedServiceParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedServiceAccountParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedServiceAccountParams, error) {
	var params WatchCoreV1NamespacedServiceAccountParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedServiceAccountListParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedServiceAccountListParams, error) {
	var params WatchCoreV1NamespacedServiceAccountListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedServiceListParams(args map[string]string, r *http.Request) (WatchCoreV1NamespacedServiceListParams, error) {
	var params WatchCoreV1NamespacedServiceListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NodeParams(args map[string]string, r *http.Request) (WatchCoreV1NodeParams, error) {
	var params WatchCoreV1NodeParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NodeListParams(args map[string]string, r *http.Request) (WatchCoreV1NodeListParams, error) {
	var params WatchCoreV1NodeListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1PersistentVolumeParams(args map[string]string, r *http.Request) (WatchCoreV1PersistentVolumeParams, error) {
	var params WatchCoreV1PersistentVolumeParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1PersistentVolumeClaimListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchCoreV1PersistentVolumeClaimListForAllNamespacesParams, error) {
	var params WatchCoreV1PersistentVolumeClaimListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1PersistentVolumeListParams(args map[string]string, r *http.Request) (WatchCoreV1PersistentVolumeListParams, error) {
	var params WatchCoreV1PersistentVolumeListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1PodListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchCoreV1PodListForAllNamespacesParams, error) {
	var params WatchCoreV1PodListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1PodTemplateListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchCoreV1PodTemplateListForAllNamespacesParams, error) {
	var params WatchCoreV1PodTemplateListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1ReplicationControllerListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchCoreV1ReplicationControllerListForAllNamespacesParams, error) {
	var params WatchCoreV1ReplicationControllerListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1ResourceQuotaListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchCoreV1ResourceQuotaListForAllNamespacesParams, error) {
	var params WatchCoreV1ResourceQuotaListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1SecretListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchCoreV1SecretListForAllNamespacesParams, error) {
	var params WatchCoreV1SecretListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1ServiceAccountListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchCoreV1ServiceAccountListForAllNamespacesParams, error) {
	var params WatchCoreV1ServiceAccountListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1ServiceListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchCoreV1ServiceListForAllNamespacesParams, error) {
	var params WatchCoreV1ServiceListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchDiscoveryV1EndpointSliceListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchDiscoveryV1EndpointSliceListForAllNamespacesParams, error) {
	var params WatchDiscoveryV1EndpointSliceListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchDiscoveryV1NamespacedEndpointSliceParams(args map[string]string, r *http.Request) (WatchDiscoveryV1NamespacedEndpointSliceParams, error) {
	var params WatchDiscoveryV1NamespacedEndpointSliceParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchDiscoveryV1NamespacedEndpointSliceListParams(args map[string]string, r *http.Request) (WatchDiscoveryV1NamespacedEndpointSliceListParams, error) {
	var params WatchDiscoveryV1NamespacedEndpointSliceListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchDiscoveryV1beta1EndpointSliceListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesParams, error) {
	var params WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchDiscoveryV1beta1NamespacedEndpointSliceParams(args map[string]string, r *http.Request) (WatchDiscoveryV1beta1NamespacedEndpointSliceParams, error) {
	var params WatchDiscoveryV1beta1NamespacedEndpointSliceParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchDiscoveryV1beta1NamespacedEndpointSliceListParams(args map[string]string, r *http.Request) (WatchDiscoveryV1beta1NamespacedEndpointSliceListParams, error) {
	var params WatchDiscoveryV1beta1NamespacedEndpointSliceListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchEventsV1EventListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchEventsV1EventListForAllNamespacesParams, error) {
	var params WatchEventsV1EventListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchEventsV1NamespacedEventParams(args map[string]string, r *http.Request) (WatchEventsV1NamespacedEventParams, error) {
	var params WatchEventsV1NamespacedEventParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchEventsV1NamespacedEventListParams(args map[string]string, r *http.Request) (WatchEventsV1NamespacedEventListParams, error) {
	var params WatchEventsV1NamespacedEventListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchEventsV1beta1EventListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchEventsV1beta1EventListForAllNamespacesParams, error) {
	var params WatchEventsV1beta1EventListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchEventsV1beta1NamespacedEventParams(args map[string]string, r *http.Request) (WatchEventsV1beta1NamespacedEventParams, error) {
	var params WatchEventsV1beta1NamespacedEventParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchEventsV1beta1NamespacedEventListParams(args map[string]string, r *http.Request) (WatchEventsV1beta1NamespacedEventListParams, error) {
	var params WatchEventsV1beta1NamespacedEventListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchFlowcontrolApiserverV1beta1FlowSchemaParams(args map[string]string, r *http.Request) (WatchFlowcontrolApiserverV1beta1FlowSchemaParams, error) {
	var params WatchFlowcontrolApiserverV1beta1FlowSchemaParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchFlowcontrolApiserverV1beta1FlowSchemaListParams(args map[string]string, r *http.Request) (WatchFlowcontrolApiserverV1beta1FlowSchemaListParams, error) {
	var params WatchFlowcontrolApiserverV1beta1FlowSchemaListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams(args map[string]string, r *http.Request) (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams, error) {
	var params WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListParams(args map[string]string, r *http.Request) (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListParams, error) {
	var params WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchFlowcontrolApiserverV1beta2FlowSchemaParams(args map[string]string, r *http.Request) (WatchFlowcontrolApiserverV1beta2FlowSchemaParams, error) {
	var params WatchFlowcontrolApiserverV1beta2FlowSchemaParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchFlowcontrolApiserverV1beta2FlowSchemaListParams(args map[string]string, r *http.Request) (WatchFlowcontrolApiserverV1beta2FlowSchemaListParams, error) {
	var params WatchFlowcontrolApiserverV1beta2FlowSchemaListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams(args map[string]string, r *http.Request) (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams, error) {
	var params WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListParams(args map[string]string, r *http.Request) (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListParams, error) {
	var params WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchInternalApiserverV1alpha1StorageVersionParams(args map[string]string, r *http.Request) (WatchInternalApiserverV1alpha1StorageVersionParams, error) {
	var params WatchInternalApiserverV1alpha1StorageVersionParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchInternalApiserverV1alpha1StorageVersionListParams(args map[string]string, r *http.Request) (WatchInternalApiserverV1alpha1StorageVersionListParams, error) {
	var params WatchInternalApiserverV1alpha1StorageVersionListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchNetworkingV1IngressClassParams(args map[string]string, r *http.Request) (WatchNetworkingV1IngressClassParams, error) {
	var params WatchNetworkingV1IngressClassParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchNetworkingV1IngressClassListParams(args map[string]string, r *http.Request) (WatchNetworkingV1IngressClassListParams, error) {
	var params WatchNetworkingV1IngressClassListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchNetworkingV1IngressListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchNetworkingV1IngressListForAllNamespacesParams, error) {
	var params WatchNetworkingV1IngressListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchNetworkingV1NamespacedIngressParams(args map[string]string, r *http.Request) (WatchNetworkingV1NamespacedIngressParams, error) {
	var params WatchNetworkingV1NamespacedIngressParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchNetworkingV1NamespacedIngressListParams(args map[string]string, r *http.Request) (WatchNetworkingV1NamespacedIngressListParams, error) {
	var params WatchNetworkingV1NamespacedIngressListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchNetworkingV1NamespacedNetworkPolicyParams(args map[string]string, r *http.Request) (WatchNetworkingV1NamespacedNetworkPolicyParams, error) {
	var params WatchNetworkingV1NamespacedNetworkPolicyParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchNetworkingV1NamespacedNetworkPolicyListParams(args map[string]string, r *http.Request) (WatchNetworkingV1NamespacedNetworkPolicyListParams, error) {
	var params WatchNetworkingV1NamespacedNetworkPolicyListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchNetworkingV1NetworkPolicyListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchNetworkingV1NetworkPolicyListForAllNamespacesParams, error) {
	var params WatchNetworkingV1NetworkPolicyListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchNodeV1RuntimeClassParams(args map[string]string, r *http.Request) (WatchNodeV1RuntimeClassParams, error) {
	var params WatchNodeV1RuntimeClassParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchNodeV1RuntimeClassListParams(args map[string]string, r *http.Request) (WatchNodeV1RuntimeClassListParams, error) {
	var params WatchNodeV1RuntimeClassListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchNodeV1alpha1RuntimeClassParams(args map[string]string, r *http.Request) (WatchNodeV1alpha1RuntimeClassParams, error) {
	var params WatchNodeV1alpha1RuntimeClassParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchNodeV1alpha1RuntimeClassListParams(args map[string]string, r *http.Request) (WatchNodeV1alpha1RuntimeClassListParams, error) {
	var params WatchNodeV1alpha1RuntimeClassListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchNodeV1beta1RuntimeClassParams(args map[string]string, r *http.Request) (WatchNodeV1beta1RuntimeClassParams, error) {
	var params WatchNodeV1beta1RuntimeClassParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchNodeV1beta1RuntimeClassListParams(args map[string]string, r *http.Request) (WatchNodeV1beta1RuntimeClassListParams, error) {
	var params WatchNodeV1beta1RuntimeClassListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchPolicyV1NamespacedPodDisruptionBudgetParams(args map[string]string, r *http.Request) (WatchPolicyV1NamespacedPodDisruptionBudgetParams, error) {
	var params WatchPolicyV1NamespacedPodDisruptionBudgetParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchPolicyV1NamespacedPodDisruptionBudgetListParams(args map[string]string, r *http.Request) (WatchPolicyV1NamespacedPodDisruptionBudgetListParams, error) {
	var params WatchPolicyV1NamespacedPodDisruptionBudgetListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchPolicyV1PodDisruptionBudgetListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesParams, error) {
	var params WatchPolicyV1PodDisruptionBudgetListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchPolicyV1beta1NamespacedPodDisruptionBudgetParams(args map[string]string, r *http.Request) (WatchPolicyV1beta1NamespacedPodDisruptionBudgetParams, error) {
	var params WatchPolicyV1beta1NamespacedPodDisruptionBudgetParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchPolicyV1beta1NamespacedPodDisruptionBudgetListParams(args map[string]string, r *http.Request) (WatchPolicyV1beta1NamespacedPodDisruptionBudgetListParams, error) {
	var params WatchPolicyV1beta1NamespacedPodDisruptionBudgetListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesParams, error) {
	var params WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchPolicyV1beta1PodSecurityPolicyParams(args map[string]string, r *http.Request) (WatchPolicyV1beta1PodSecurityPolicyParams, error) {
	var params WatchPolicyV1beta1PodSecurityPolicyParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchPolicyV1beta1PodSecurityPolicyListParams(args map[string]string, r *http.Request) (WatchPolicyV1beta1PodSecurityPolicyListParams, error) {
	var params WatchPolicyV1beta1PodSecurityPolicyListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1ClusterRoleParams(args map[string]string, r *http.Request) (WatchRbacAuthorizationV1ClusterRoleParams, error) {
	var params WatchRbacAuthorizationV1ClusterRoleParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1ClusterRoleBindingParams(args map[string]string, r *http.Request) (WatchRbacAuthorizationV1ClusterRoleBindingParams, error) {
	var params WatchRbacAuthorizationV1ClusterRoleBindingParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1ClusterRoleBindingListParams(args map[string]string, r *http.Request) (WatchRbacAuthorizationV1ClusterRoleBindingListParams, error) {
	var params WatchRbacAuthorizationV1ClusterRoleBindingListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1ClusterRoleListParams(args map[string]string, r *http.Request) (WatchRbacAuthorizationV1ClusterRoleListParams, error) {
	var params WatchRbacAuthorizationV1ClusterRoleListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1NamespacedRoleParams(args map[string]string, r *http.Request) (WatchRbacAuthorizationV1NamespacedRoleParams, error) {
	var params WatchRbacAuthorizationV1NamespacedRoleParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1NamespacedRoleBindingParams(args map[string]string, r *http.Request) (WatchRbacAuthorizationV1NamespacedRoleBindingParams, error) {
	var params WatchRbacAuthorizationV1NamespacedRoleBindingParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1NamespacedRoleBindingListParams(args map[string]string, r *http.Request) (WatchRbacAuthorizationV1NamespacedRoleBindingListParams, error) {
	var params WatchRbacAuthorizationV1NamespacedRoleBindingListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1NamespacedRoleListParams(args map[string]string, r *http.Request) (WatchRbacAuthorizationV1NamespacedRoleListParams, error) {
	var params WatchRbacAuthorizationV1NamespacedRoleListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1RoleBindingListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesParams, error) {
	var params WatchRbacAuthorizationV1RoleBindingListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1RoleListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchRbacAuthorizationV1RoleListForAllNamespacesParams, error) {
	var params WatchRbacAuthorizationV1RoleListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchSchedulingV1PriorityClassParams(args map[string]string, r *http.Request) (WatchSchedulingV1PriorityClassParams, error) {
	var params WatchSchedulingV1PriorityClassParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchSchedulingV1PriorityClassListParams(args map[string]string, r *http.Request) (WatchSchedulingV1PriorityClassListParams, error) {
	var params WatchSchedulingV1PriorityClassListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1CSIDriverParams(args map[string]string, r *http.Request) (WatchStorageV1CSIDriverParams, error) {
	var params WatchStorageV1CSIDriverParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1CSIDriverListParams(args map[string]string, r *http.Request) (WatchStorageV1CSIDriverListParams, error) {
	var params WatchStorageV1CSIDriverListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1CSINodeParams(args map[string]string, r *http.Request) (WatchStorageV1CSINodeParams, error) {
	var params WatchStorageV1CSINodeParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1CSINodeListParams(args map[string]string, r *http.Request) (WatchStorageV1CSINodeListParams, error) {
	var params WatchStorageV1CSINodeListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1StorageClassParams(args map[string]string, r *http.Request) (WatchStorageV1StorageClassParams, error) {
	var params WatchStorageV1StorageClassParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1StorageClassListParams(args map[string]string, r *http.Request) (WatchStorageV1StorageClassListParams, error) {
	var params WatchStorageV1StorageClassListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1VolumeAttachmentParams(args map[string]string, r *http.Request) (WatchStorageV1VolumeAttachmentParams, error) {
	var params WatchStorageV1VolumeAttachmentParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1VolumeAttachmentListParams(args map[string]string, r *http.Request) (WatchStorageV1VolumeAttachmentListParams, error) {
	var params WatchStorageV1VolumeAttachmentListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesParams, error) {
	var params WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1alpha1NamespacedCSIStorageCapacityParams(args map[string]string, r *http.Request) (WatchStorageV1alpha1NamespacedCSIStorageCapacityParams, error) {
	var params WatchStorageV1alpha1NamespacedCSIStorageCapacityParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1alpha1NamespacedCSIStorageCapacityListParams(args map[string]string, r *http.Request) (WatchStorageV1alpha1NamespacedCSIStorageCapacityListParams, error) {
	var params WatchStorageV1alpha1NamespacedCSIStorageCapacityListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1beta1CSIStorageCapacityListForAllNamespacesParams(args map[string]string, r *http.Request) (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesParams, error) {
	var params WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1beta1NamespacedCSIStorageCapacityParams(args map[string]string, r *http.Request) (WatchStorageV1beta1NamespacedCSIStorageCapacityParams, error) {
	var params WatchStorageV1beta1NamespacedCSIStorageCapacityParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1beta1NamespacedCSIStorageCapacityListParams(args map[string]string, r *http.Request) (WatchStorageV1beta1NamespacedCSIStorageCapacityListParams, error) {
	var params WatchStorageV1beta1NamespacedCSIStorageCapacityListParams
	// Decode query: allowWatchBookmarks.
	{
		values, ok := r.URL.Query()["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: allowWatchBookmarks: parse`)
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := r.URL.Query()["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: continue: parse`)
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := r.URL.Query()["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: fieldSelector: parse`)
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := r.URL.Query()["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: labelSelector: parse`)
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := r.URL.Query()["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: limit: parse`)
			}
		}
	}
	// Decode path: namespace.
	{
		param := args["namespace"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: namespace: not specified`)
		}
	}
	// Decode query: pretty.
	{
		values, ok := r.URL.Query()["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: pretty: parse`)
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := r.URL.Query()["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersion: parse`)
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := r.URL.Query()["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: resourceVersionMatch: parse`)
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := r.URL.Query()["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: timeoutSeconds: parse`)
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := r.URL.Query()["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: watch: parse`)
			}
		}
	}
	return params, nil
}
