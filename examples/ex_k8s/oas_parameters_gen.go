// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
)

type ListAdmissionregistrationV1MutatingWebhookConfigurationParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListAdmissionregistrationV1MutatingWebhookConfigurationParams(args [0]string, r *http.Request) (params ListAdmissionregistrationV1MutatingWebhookConfigurationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListAdmissionregistrationV1ValidatingWebhookConfigurationParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListAdmissionregistrationV1ValidatingWebhookConfigurationParams(args [0]string, r *http.Request) (params ListAdmissionregistrationV1ValidatingWebhookConfigurationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListApiextensionsV1CustomResourceDefinitionParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListApiextensionsV1CustomResourceDefinitionParams(args [0]string, r *http.Request) (params ListApiextensionsV1CustomResourceDefinitionParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListApiregistrationV1APIServiceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListApiregistrationV1APIServiceParams(args [0]string, r *http.Request) (params ListApiregistrationV1APIServiceParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListAppsV1ControllerRevisionForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListAppsV1ControllerRevisionForAllNamespacesParams(args [0]string, r *http.Request) (params ListAppsV1ControllerRevisionForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListAppsV1DaemonSetForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListAppsV1DaemonSetForAllNamespacesParams(args [0]string, r *http.Request) (params ListAppsV1DaemonSetForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListAppsV1DeploymentForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListAppsV1DeploymentForAllNamespacesParams(args [0]string, r *http.Request) (params ListAppsV1DeploymentForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListAppsV1NamespacedControllerRevisionParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListAppsV1NamespacedControllerRevisionParams(args [1]string, r *http.Request) (params ListAppsV1NamespacedControllerRevisionParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListAppsV1NamespacedDaemonSetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListAppsV1NamespacedDaemonSetParams(args [1]string, r *http.Request) (params ListAppsV1NamespacedDaemonSetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListAppsV1NamespacedDeploymentParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListAppsV1NamespacedDeploymentParams(args [1]string, r *http.Request) (params ListAppsV1NamespacedDeploymentParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListAppsV1NamespacedReplicaSetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListAppsV1NamespacedReplicaSetParams(args [1]string, r *http.Request) (params ListAppsV1NamespacedReplicaSetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListAppsV1NamespacedStatefulSetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListAppsV1NamespacedStatefulSetParams(args [1]string, r *http.Request) (params ListAppsV1NamespacedStatefulSetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListAppsV1ReplicaSetForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListAppsV1ReplicaSetForAllNamespacesParams(args [0]string, r *http.Request) (params ListAppsV1ReplicaSetForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListAppsV1StatefulSetForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListAppsV1StatefulSetForAllNamespacesParams(args [0]string, r *http.Request) (params ListAppsV1StatefulSetForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesParams(args [0]string, r *http.Request) (params ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListAutoscalingV1NamespacedHorizontalPodAutoscalerParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListAutoscalingV1NamespacedHorizontalPodAutoscalerParams(args [1]string, r *http.Request) (params ListAutoscalingV1NamespacedHorizontalPodAutoscalerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesParams(args [0]string, r *http.Request) (params ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams(args [1]string, r *http.Request) (params ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesParams(args [0]string, r *http.Request) (params ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams(args [1]string, r *http.Request) (params ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListBatchV1CronJobForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListBatchV1CronJobForAllNamespacesParams(args [0]string, r *http.Request) (params ListBatchV1CronJobForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListBatchV1JobForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListBatchV1JobForAllNamespacesParams(args [0]string, r *http.Request) (params ListBatchV1JobForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListBatchV1NamespacedCronJobParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListBatchV1NamespacedCronJobParams(args [1]string, r *http.Request) (params ListBatchV1NamespacedCronJobParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListBatchV1NamespacedJobParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListBatchV1NamespacedJobParams(args [1]string, r *http.Request) (params ListBatchV1NamespacedJobParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListBatchV1beta1CronJobForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListBatchV1beta1CronJobForAllNamespacesParams(args [0]string, r *http.Request) (params ListBatchV1beta1CronJobForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListBatchV1beta1NamespacedCronJobParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListBatchV1beta1NamespacedCronJobParams(args [1]string, r *http.Request) (params ListBatchV1beta1NamespacedCronJobParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCertificatesV1CertificateSigningRequestParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListCertificatesV1CertificateSigningRequestParams(args [0]string, r *http.Request) (params ListCertificatesV1CertificateSigningRequestParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCoordinationV1LeaseForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListCoordinationV1LeaseForAllNamespacesParams(args [0]string, r *http.Request) (params ListCoordinationV1LeaseForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListCoordinationV1NamespacedLeaseParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListCoordinationV1NamespacedLeaseParams(args [1]string, r *http.Request) (params ListCoordinationV1NamespacedLeaseParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1ComponentStatusParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListCoreV1ComponentStatusParams(args [0]string, r *http.Request) (params ListCoreV1ComponentStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1ConfigMapForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListCoreV1ConfigMapForAllNamespacesParams(args [0]string, r *http.Request) (params ListCoreV1ConfigMapForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1EndpointsForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListCoreV1EndpointsForAllNamespacesParams(args [0]string, r *http.Request) (params ListCoreV1EndpointsForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1EventForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListCoreV1EventForAllNamespacesParams(args [0]string, r *http.Request) (params ListCoreV1EventForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1LimitRangeForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListCoreV1LimitRangeForAllNamespacesParams(args [0]string, r *http.Request) (params ListCoreV1LimitRangeForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1NamespaceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListCoreV1NamespaceParams(args [0]string, r *http.Request) (params ListCoreV1NamespaceParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1NamespacedConfigMapParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListCoreV1NamespacedConfigMapParams(args [1]string, r *http.Request) (params ListCoreV1NamespacedConfigMapParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1NamespacedEndpointsParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListCoreV1NamespacedEndpointsParams(args [1]string, r *http.Request) (params ListCoreV1NamespacedEndpointsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1NamespacedEventParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListCoreV1NamespacedEventParams(args [1]string, r *http.Request) (params ListCoreV1NamespacedEventParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1NamespacedLimitRangeParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListCoreV1NamespacedLimitRangeParams(args [1]string, r *http.Request) (params ListCoreV1NamespacedLimitRangeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1NamespacedPersistentVolumeClaimParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListCoreV1NamespacedPersistentVolumeClaimParams(args [1]string, r *http.Request) (params ListCoreV1NamespacedPersistentVolumeClaimParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1NamespacedPodParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListCoreV1NamespacedPodParams(args [1]string, r *http.Request) (params ListCoreV1NamespacedPodParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1NamespacedPodTemplateParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListCoreV1NamespacedPodTemplateParams(args [1]string, r *http.Request) (params ListCoreV1NamespacedPodTemplateParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1NamespacedReplicationControllerParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListCoreV1NamespacedReplicationControllerParams(args [1]string, r *http.Request) (params ListCoreV1NamespacedReplicationControllerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1NamespacedResourceQuotaParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListCoreV1NamespacedResourceQuotaParams(args [1]string, r *http.Request) (params ListCoreV1NamespacedResourceQuotaParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1NamespacedSecretParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListCoreV1NamespacedSecretParams(args [1]string, r *http.Request) (params ListCoreV1NamespacedSecretParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1NamespacedServiceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListCoreV1NamespacedServiceParams(args [1]string, r *http.Request) (params ListCoreV1NamespacedServiceParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1NamespacedServiceAccountParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListCoreV1NamespacedServiceAccountParams(args [1]string, r *http.Request) (params ListCoreV1NamespacedServiceAccountParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1NodeParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListCoreV1NodeParams(args [0]string, r *http.Request) (params ListCoreV1NodeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1PersistentVolumeParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListCoreV1PersistentVolumeParams(args [0]string, r *http.Request) (params ListCoreV1PersistentVolumeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1PersistentVolumeClaimForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListCoreV1PersistentVolumeClaimForAllNamespacesParams(args [0]string, r *http.Request) (params ListCoreV1PersistentVolumeClaimForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1PodForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListCoreV1PodForAllNamespacesParams(args [0]string, r *http.Request) (params ListCoreV1PodForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1PodTemplateForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListCoreV1PodTemplateForAllNamespacesParams(args [0]string, r *http.Request) (params ListCoreV1PodTemplateForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1ReplicationControllerForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListCoreV1ReplicationControllerForAllNamespacesParams(args [0]string, r *http.Request) (params ListCoreV1ReplicationControllerForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1ResourceQuotaForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListCoreV1ResourceQuotaForAllNamespacesParams(args [0]string, r *http.Request) (params ListCoreV1ResourceQuotaForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1SecretForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListCoreV1SecretForAllNamespacesParams(args [0]string, r *http.Request) (params ListCoreV1SecretForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1ServiceAccountForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListCoreV1ServiceAccountForAllNamespacesParams(args [0]string, r *http.Request) (params ListCoreV1ServiceAccountForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListCoreV1ServiceForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListCoreV1ServiceForAllNamespacesParams(args [0]string, r *http.Request) (params ListCoreV1ServiceForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListDiscoveryV1EndpointSliceForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListDiscoveryV1EndpointSliceForAllNamespacesParams(args [0]string, r *http.Request) (params ListDiscoveryV1EndpointSliceForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListDiscoveryV1NamespacedEndpointSliceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListDiscoveryV1NamespacedEndpointSliceParams(args [1]string, r *http.Request) (params ListDiscoveryV1NamespacedEndpointSliceParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListDiscoveryV1beta1EndpointSliceForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListDiscoveryV1beta1EndpointSliceForAllNamespacesParams(args [0]string, r *http.Request) (params ListDiscoveryV1beta1EndpointSliceForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListDiscoveryV1beta1NamespacedEndpointSliceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListDiscoveryV1beta1NamespacedEndpointSliceParams(args [1]string, r *http.Request) (params ListDiscoveryV1beta1NamespacedEndpointSliceParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListEventsV1EventForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListEventsV1EventForAllNamespacesParams(args [0]string, r *http.Request) (params ListEventsV1EventForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListEventsV1NamespacedEventParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListEventsV1NamespacedEventParams(args [1]string, r *http.Request) (params ListEventsV1NamespacedEventParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListEventsV1beta1EventForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListEventsV1beta1EventForAllNamespacesParams(args [0]string, r *http.Request) (params ListEventsV1beta1EventForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListEventsV1beta1NamespacedEventParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListEventsV1beta1NamespacedEventParams(args [1]string, r *http.Request) (params ListEventsV1beta1NamespacedEventParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListFlowcontrolApiserverV1beta1FlowSchemaParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListFlowcontrolApiserverV1beta1FlowSchemaParams(args [0]string, r *http.Request) (params ListFlowcontrolApiserverV1beta1FlowSchemaParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams(args [0]string, r *http.Request) (params ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListFlowcontrolApiserverV1beta2FlowSchemaParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListFlowcontrolApiserverV1beta2FlowSchemaParams(args [0]string, r *http.Request) (params ListFlowcontrolApiserverV1beta2FlowSchemaParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams(args [0]string, r *http.Request) (params ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListInternalApiserverV1alpha1StorageVersionParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListInternalApiserverV1alpha1StorageVersionParams(args [0]string, r *http.Request) (params ListInternalApiserverV1alpha1StorageVersionParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListNetworkingV1IngressClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListNetworkingV1IngressClassParams(args [0]string, r *http.Request) (params ListNetworkingV1IngressClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListNetworkingV1IngressForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListNetworkingV1IngressForAllNamespacesParams(args [0]string, r *http.Request) (params ListNetworkingV1IngressForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListNetworkingV1NamespacedIngressParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListNetworkingV1NamespacedIngressParams(args [1]string, r *http.Request) (params ListNetworkingV1NamespacedIngressParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListNetworkingV1NamespacedNetworkPolicyParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListNetworkingV1NamespacedNetworkPolicyParams(args [1]string, r *http.Request) (params ListNetworkingV1NamespacedNetworkPolicyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListNetworkingV1NetworkPolicyForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListNetworkingV1NetworkPolicyForAllNamespacesParams(args [0]string, r *http.Request) (params ListNetworkingV1NetworkPolicyForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListNodeV1RuntimeClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListNodeV1RuntimeClassParams(args [0]string, r *http.Request) (params ListNodeV1RuntimeClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListNodeV1alpha1RuntimeClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListNodeV1alpha1RuntimeClassParams(args [0]string, r *http.Request) (params ListNodeV1alpha1RuntimeClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListNodeV1beta1RuntimeClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListNodeV1beta1RuntimeClassParams(args [0]string, r *http.Request) (params ListNodeV1beta1RuntimeClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListPolicyV1NamespacedPodDisruptionBudgetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListPolicyV1NamespacedPodDisruptionBudgetParams(args [1]string, r *http.Request) (params ListPolicyV1NamespacedPodDisruptionBudgetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListPolicyV1PodDisruptionBudgetForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListPolicyV1PodDisruptionBudgetForAllNamespacesParams(args [0]string, r *http.Request) (params ListPolicyV1PodDisruptionBudgetForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListPolicyV1beta1NamespacedPodDisruptionBudgetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListPolicyV1beta1NamespacedPodDisruptionBudgetParams(args [1]string, r *http.Request) (params ListPolicyV1beta1NamespacedPodDisruptionBudgetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListPolicyV1beta1PodDisruptionBudgetForAllNamespacesParams(args [0]string, r *http.Request) (params ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListPolicyV1beta1PodSecurityPolicyParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListPolicyV1beta1PodSecurityPolicyParams(args [0]string, r *http.Request) (params ListPolicyV1beta1PodSecurityPolicyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListRbacAuthorizationV1ClusterRoleParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListRbacAuthorizationV1ClusterRoleParams(args [0]string, r *http.Request) (params ListRbacAuthorizationV1ClusterRoleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListRbacAuthorizationV1ClusterRoleBindingParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListRbacAuthorizationV1ClusterRoleBindingParams(args [0]string, r *http.Request) (params ListRbacAuthorizationV1ClusterRoleBindingParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListRbacAuthorizationV1NamespacedRoleParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListRbacAuthorizationV1NamespacedRoleParams(args [1]string, r *http.Request) (params ListRbacAuthorizationV1NamespacedRoleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListRbacAuthorizationV1NamespacedRoleBindingParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListRbacAuthorizationV1NamespacedRoleBindingParams(args [1]string, r *http.Request) (params ListRbacAuthorizationV1NamespacedRoleBindingParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListRbacAuthorizationV1RoleBindingForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListRbacAuthorizationV1RoleBindingForAllNamespacesParams(args [0]string, r *http.Request) (params ListRbacAuthorizationV1RoleBindingForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListRbacAuthorizationV1RoleForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListRbacAuthorizationV1RoleForAllNamespacesParams(args [0]string, r *http.Request) (params ListRbacAuthorizationV1RoleForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListSchedulingV1PriorityClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListSchedulingV1PriorityClassParams(args [0]string, r *http.Request) (params ListSchedulingV1PriorityClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListStorageV1CSIDriverParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListStorageV1CSIDriverParams(args [0]string, r *http.Request) (params ListStorageV1CSIDriverParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListStorageV1CSINodeParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListStorageV1CSINodeParams(args [0]string, r *http.Request) (params ListStorageV1CSINodeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListStorageV1StorageClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListStorageV1StorageClassParams(args [0]string, r *http.Request) (params ListStorageV1StorageClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListStorageV1VolumeAttachmentParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListStorageV1VolumeAttachmentParams(args [0]string, r *http.Request) (params ListStorageV1VolumeAttachmentParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListStorageV1alpha1CSIStorageCapacityForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListStorageV1alpha1CSIStorageCapacityForAllNamespacesParams(args [0]string, r *http.Request) (params ListStorageV1alpha1CSIStorageCapacityForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListStorageV1alpha1NamespacedCSIStorageCapacityParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListStorageV1alpha1NamespacedCSIStorageCapacityParams(args [1]string, r *http.Request) (params ListStorageV1alpha1NamespacedCSIStorageCapacityParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ListStorageV1beta1CSIStorageCapacityForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeListStorageV1beta1CSIStorageCapacityForAllNamespacesParams(args [0]string, r *http.Request) (params ListStorageV1beta1CSIStorageCapacityForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type ListStorageV1beta1NamespacedCSIStorageCapacityParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeListStorageV1beta1NamespacedCSIStorageCapacityParams(args [1]string, r *http.Request) (params ListStorageV1beta1NamespacedCSIStorageCapacityParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type LogFileHandlerParams struct {
	// Path to the log.
	Logpath string
}

func decodeLogFileHandlerParams(args [1]string, r *http.Request) (params LogFileHandlerParams, _ error) {
	// Decode path: logpath.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "logpath",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Logpath = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: logpath: not specified")
		}
	}
	return params, nil
}

type ReadAdmissionregistrationV1MutatingWebhookConfigurationParams struct {
	// Name of the MutatingWebhookConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAdmissionregistrationV1MutatingWebhookConfigurationParams(args [1]string, r *http.Request) (params ReadAdmissionregistrationV1MutatingWebhookConfigurationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams struct {
	// Name of the ValidatingWebhookConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAdmissionregistrationV1ValidatingWebhookConfigurationParams(args [1]string, r *http.Request) (params ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadApiextensionsV1CustomResourceDefinitionParams struct {
	// Name of the CustomResourceDefinition.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadApiextensionsV1CustomResourceDefinitionParams(args [1]string, r *http.Request) (params ReadApiextensionsV1CustomResourceDefinitionParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadApiextensionsV1CustomResourceDefinitionStatusParams struct {
	// Name of the CustomResourceDefinition.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadApiextensionsV1CustomResourceDefinitionStatusParams(args [1]string, r *http.Request) (params ReadApiextensionsV1CustomResourceDefinitionStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadApiregistrationV1APIServiceParams struct {
	// Name of the APIService.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadApiregistrationV1APIServiceParams(args [1]string, r *http.Request) (params ReadApiregistrationV1APIServiceParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadApiregistrationV1APIServiceStatusParams struct {
	// Name of the APIService.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadApiregistrationV1APIServiceStatusParams(args [1]string, r *http.Request) (params ReadApiregistrationV1APIServiceStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAppsV1NamespacedControllerRevisionParams struct {
	// Name of the ControllerRevision.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAppsV1NamespacedControllerRevisionParams(args [2]string, r *http.Request) (params ReadAppsV1NamespacedControllerRevisionParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAppsV1NamespacedDaemonSetParams struct {
	// Name of the DaemonSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAppsV1NamespacedDaemonSetParams(args [2]string, r *http.Request) (params ReadAppsV1NamespacedDaemonSetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAppsV1NamespacedDaemonSetStatusParams struct {
	// Name of the DaemonSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAppsV1NamespacedDaemonSetStatusParams(args [2]string, r *http.Request) (params ReadAppsV1NamespacedDaemonSetStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAppsV1NamespacedDeploymentParams struct {
	// Name of the Deployment.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAppsV1NamespacedDeploymentParams(args [2]string, r *http.Request) (params ReadAppsV1NamespacedDeploymentParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAppsV1NamespacedDeploymentScaleParams struct {
	// Name of the Scale.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAppsV1NamespacedDeploymentScaleParams(args [2]string, r *http.Request) (params ReadAppsV1NamespacedDeploymentScaleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAppsV1NamespacedDeploymentStatusParams struct {
	// Name of the Deployment.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAppsV1NamespacedDeploymentStatusParams(args [2]string, r *http.Request) (params ReadAppsV1NamespacedDeploymentStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAppsV1NamespacedReplicaSetParams struct {
	// Name of the ReplicaSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAppsV1NamespacedReplicaSetParams(args [2]string, r *http.Request) (params ReadAppsV1NamespacedReplicaSetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAppsV1NamespacedReplicaSetScaleParams struct {
	// Name of the Scale.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAppsV1NamespacedReplicaSetScaleParams(args [2]string, r *http.Request) (params ReadAppsV1NamespacedReplicaSetScaleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAppsV1NamespacedReplicaSetStatusParams struct {
	// Name of the ReplicaSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAppsV1NamespacedReplicaSetStatusParams(args [2]string, r *http.Request) (params ReadAppsV1NamespacedReplicaSetStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAppsV1NamespacedStatefulSetParams struct {
	// Name of the StatefulSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAppsV1NamespacedStatefulSetParams(args [2]string, r *http.Request) (params ReadAppsV1NamespacedStatefulSetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAppsV1NamespacedStatefulSetScaleParams struct {
	// Name of the Scale.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAppsV1NamespacedStatefulSetScaleParams(args [2]string, r *http.Request) (params ReadAppsV1NamespacedStatefulSetScaleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAppsV1NamespacedStatefulSetStatusParams struct {
	// Name of the StatefulSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAppsV1NamespacedStatefulSetStatusParams(args [2]string, r *http.Request) (params ReadAppsV1NamespacedStatefulSetStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAutoscalingV1NamespacedHorizontalPodAutoscalerParams struct {
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAutoscalingV1NamespacedHorizontalPodAutoscalerParams(args [2]string, r *http.Request) (params ReadAutoscalingV1NamespacedHorizontalPodAutoscalerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusParams struct {
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusParams(args [2]string, r *http.Request) (params ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams struct {
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams(args [2]string, r *http.Request) (params ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusParams struct {
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusParams(args [2]string, r *http.Request) (params ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams struct {
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams(args [2]string, r *http.Request) (params ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusParams struct {
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusParams(args [2]string, r *http.Request) (params ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadBatchV1NamespacedCronJobParams struct {
	// Name of the CronJob.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadBatchV1NamespacedCronJobParams(args [2]string, r *http.Request) (params ReadBatchV1NamespacedCronJobParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadBatchV1NamespacedCronJobStatusParams struct {
	// Name of the CronJob.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadBatchV1NamespacedCronJobStatusParams(args [2]string, r *http.Request) (params ReadBatchV1NamespacedCronJobStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadBatchV1NamespacedJobParams struct {
	// Name of the Job.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadBatchV1NamespacedJobParams(args [2]string, r *http.Request) (params ReadBatchV1NamespacedJobParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadBatchV1NamespacedJobStatusParams struct {
	// Name of the Job.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadBatchV1NamespacedJobStatusParams(args [2]string, r *http.Request) (params ReadBatchV1NamespacedJobStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadBatchV1beta1NamespacedCronJobParams struct {
	// Name of the CronJob.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadBatchV1beta1NamespacedCronJobParams(args [2]string, r *http.Request) (params ReadBatchV1beta1NamespacedCronJobParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadBatchV1beta1NamespacedCronJobStatusParams struct {
	// Name of the CronJob.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadBatchV1beta1NamespacedCronJobStatusParams(args [2]string, r *http.Request) (params ReadBatchV1beta1NamespacedCronJobStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCertificatesV1CertificateSigningRequestParams struct {
	// Name of the CertificateSigningRequest.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCertificatesV1CertificateSigningRequestParams(args [1]string, r *http.Request) (params ReadCertificatesV1CertificateSigningRequestParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCertificatesV1CertificateSigningRequestApprovalParams struct {
	// Name of the CertificateSigningRequest.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCertificatesV1CertificateSigningRequestApprovalParams(args [1]string, r *http.Request) (params ReadCertificatesV1CertificateSigningRequestApprovalParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCertificatesV1CertificateSigningRequestStatusParams struct {
	// Name of the CertificateSigningRequest.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCertificatesV1CertificateSigningRequestStatusParams(args [1]string, r *http.Request) (params ReadCertificatesV1CertificateSigningRequestStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoordinationV1NamespacedLeaseParams struct {
	// Name of the Lease.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoordinationV1NamespacedLeaseParams(args [2]string, r *http.Request) (params ReadCoordinationV1NamespacedLeaseParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1ComponentStatusParams struct {
	// Name of the ComponentStatus.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1ComponentStatusParams(args [1]string, r *http.Request) (params ReadCoreV1ComponentStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespaceParams struct {
	// Name of the Namespace.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespaceParams(args [1]string, r *http.Request) (params ReadCoreV1NamespaceParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespaceStatusParams struct {
	// Name of the Namespace.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespaceStatusParams(args [1]string, r *http.Request) (params ReadCoreV1NamespaceStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedConfigMapParams struct {
	// Name of the ConfigMap.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedConfigMapParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedConfigMapParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedEndpointsParams struct {
	// Name of the Endpoints.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedEndpointsParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedEndpointsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedEventParams struct {
	// Name of the Event.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedEventParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedEventParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedLimitRangeParams struct {
	// Name of the LimitRange.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedLimitRangeParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedLimitRangeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedPersistentVolumeClaimParams struct {
	// Name of the PersistentVolumeClaim.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedPersistentVolumeClaimParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedPersistentVolumeClaimParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedPersistentVolumeClaimStatusParams struct {
	// Name of the PersistentVolumeClaim.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedPersistentVolumeClaimStatusParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedPersistentVolumeClaimStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedPodParams struct {
	// Name of the Pod.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedPodParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedPodParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedPodEphemeralcontainersParams struct {
	// Name of the Pod.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedPodEphemeralcontainersParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedPodEphemeralcontainersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedPodLogParams struct {
	// The container for which to stream logs. Defaults to only container if there is one container in
	// the pod.
	Container OptString
	// Follow the log stream of the pod. Defaults to false.
	Follow OptBool
	// InsecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the
	// serving certificate of the backend it is connecting to.  This will make the HTTPS connection
	// between the apiserver and the backend insecure. This means the apiserver cannot verify the log
	// data it is receiving came from the real kubelet.  If the kubelet is configured to verify the
	// apiserver's TLS credentials, it does not mean the connection to the real kubelet is vulnerable to
	// a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from
	// the real kubelet).
	InsecureSkipTLSVerifyBackend OptBool
	// If set, the number of bytes to read from the server before terminating the log output. This may
	// not display a complete final line of logging, and may return slightly more or slightly less than
	// the specified limit.
	LimitBytes OptInt
	// Name of the Pod.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// Return previous terminated container logs. Defaults to false.
	Previous OptBool
	// A relative time in seconds before the current time from which to show logs. If this value precedes
	// the time a pod was started, only logs since the pod start will be returned. If this value is in
	// the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
	SinceSeconds OptInt
	// If set, the number of lines from the end of the logs to show. If not specified, logs are shown
	// from the creation of the container or sinceSeconds or sinceTime.
	TailLines OptInt
	// If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output.
	// Defaults to false.
	Timestamps OptBool
}

func decodeReadCoreV1NamespacedPodLogParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedPodLogParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: container.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "container",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContainerVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContainerVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Container.SetTo(paramsDotContainerVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: container: parse")
			}
		}
	}
	// Decode query: follow.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "follow",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFollowVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotFollowVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Follow.SetTo(paramsDotFollowVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: follow: parse")
			}
		}
	}
	// Decode query: insecureSkipTLSVerifyBackend.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "insecureSkipTLSVerifyBackend",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotInsecureSkipTLSVerifyBackendVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotInsecureSkipTLSVerifyBackendVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.InsecureSkipTLSVerifyBackend.SetTo(paramsDotInsecureSkipTLSVerifyBackendVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: insecureSkipTLSVerifyBackend: parse")
			}
		}
	}
	// Decode query: limitBytes.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limitBytes",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitBytesVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitBytesVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LimitBytes.SetTo(paramsDotLimitBytesVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limitBytes: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: previous.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "previous",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPreviousVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotPreviousVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Previous.SetTo(paramsDotPreviousVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: previous: parse")
			}
		}
	}
	// Decode query: sinceSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sinceSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotSinceSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SinceSeconds.SetTo(paramsDotSinceSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sinceSeconds: parse")
			}
		}
	}
	// Decode query: tailLines.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tailLines",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTailLinesVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTailLinesVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TailLines.SetTo(paramsDotTailLinesVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: tailLines: parse")
			}
		}
	}
	// Decode query: timestamps.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timestamps",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimestampsVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotTimestampsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Timestamps.SetTo(paramsDotTimestampsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timestamps: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedPodStatusParams struct {
	// Name of the Pod.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedPodStatusParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedPodStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedPodTemplateParams struct {
	// Name of the PodTemplate.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedPodTemplateParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedPodTemplateParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedReplicationControllerParams struct {
	// Name of the ReplicationController.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedReplicationControllerParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedReplicationControllerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedReplicationControllerScaleParams struct {
	// Name of the Scale.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedReplicationControllerScaleParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedReplicationControllerScaleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedReplicationControllerStatusParams struct {
	// Name of the ReplicationController.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedReplicationControllerStatusParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedReplicationControllerStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedResourceQuotaParams struct {
	// Name of the ResourceQuota.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedResourceQuotaParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedResourceQuotaParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedResourceQuotaStatusParams struct {
	// Name of the ResourceQuota.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedResourceQuotaStatusParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedResourceQuotaStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedSecretParams struct {
	// Name of the Secret.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedSecretParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedSecretParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedServiceParams struct {
	// Name of the Service.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedServiceParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedServiceParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedServiceAccountParams struct {
	// Name of the ServiceAccount.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedServiceAccountParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedServiceAccountParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NamespacedServiceStatusParams struct {
	// Name of the Service.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NamespacedServiceStatusParams(args [2]string, r *http.Request) (params ReadCoreV1NamespacedServiceStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NodeParams struct {
	// Name of the Node.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NodeParams(args [1]string, r *http.Request) (params ReadCoreV1NodeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1NodeStatusParams struct {
	// Name of the Node.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1NodeStatusParams(args [1]string, r *http.Request) (params ReadCoreV1NodeStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1PersistentVolumeParams struct {
	// Name of the PersistentVolume.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1PersistentVolumeParams(args [1]string, r *http.Request) (params ReadCoreV1PersistentVolumeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadCoreV1PersistentVolumeStatusParams struct {
	// Name of the PersistentVolume.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadCoreV1PersistentVolumeStatusParams(args [1]string, r *http.Request) (params ReadCoreV1PersistentVolumeStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadDiscoveryV1NamespacedEndpointSliceParams struct {
	// Name of the EndpointSlice.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadDiscoveryV1NamespacedEndpointSliceParams(args [2]string, r *http.Request) (params ReadDiscoveryV1NamespacedEndpointSliceParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadDiscoveryV1beta1NamespacedEndpointSliceParams struct {
	// Name of the EndpointSlice.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadDiscoveryV1beta1NamespacedEndpointSliceParams(args [2]string, r *http.Request) (params ReadDiscoveryV1beta1NamespacedEndpointSliceParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadEventsV1NamespacedEventParams struct {
	// Name of the Event.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadEventsV1NamespacedEventParams(args [2]string, r *http.Request) (params ReadEventsV1NamespacedEventParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadEventsV1beta1NamespacedEventParams struct {
	// Name of the Event.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadEventsV1beta1NamespacedEventParams(args [2]string, r *http.Request) (params ReadEventsV1beta1NamespacedEventParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadFlowcontrolApiserverV1beta1FlowSchemaParams struct {
	// Name of the FlowSchema.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadFlowcontrolApiserverV1beta1FlowSchemaParams(args [1]string, r *http.Request) (params ReadFlowcontrolApiserverV1beta1FlowSchemaParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadFlowcontrolApiserverV1beta1FlowSchemaStatusParams struct {
	// Name of the FlowSchema.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadFlowcontrolApiserverV1beta1FlowSchemaStatusParams(args [1]string, r *http.Request) (params ReadFlowcontrolApiserverV1beta1FlowSchemaStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams struct {
	// Name of the PriorityLevelConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams(args [1]string, r *http.Request) (params ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusParams struct {
	// Name of the PriorityLevelConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusParams(args [1]string, r *http.Request) (params ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadFlowcontrolApiserverV1beta2FlowSchemaParams struct {
	// Name of the FlowSchema.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadFlowcontrolApiserverV1beta2FlowSchemaParams(args [1]string, r *http.Request) (params ReadFlowcontrolApiserverV1beta2FlowSchemaParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadFlowcontrolApiserverV1beta2FlowSchemaStatusParams struct {
	// Name of the FlowSchema.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadFlowcontrolApiserverV1beta2FlowSchemaStatusParams(args [1]string, r *http.Request) (params ReadFlowcontrolApiserverV1beta2FlowSchemaStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams struct {
	// Name of the PriorityLevelConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams(args [1]string, r *http.Request) (params ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusParams struct {
	// Name of the PriorityLevelConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusParams(args [1]string, r *http.Request) (params ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadInternalApiserverV1alpha1StorageVersionParams struct {
	// Name of the StorageVersion.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadInternalApiserverV1alpha1StorageVersionParams(args [1]string, r *http.Request) (params ReadInternalApiserverV1alpha1StorageVersionParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadInternalApiserverV1alpha1StorageVersionStatusParams struct {
	// Name of the StorageVersion.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadInternalApiserverV1alpha1StorageVersionStatusParams(args [1]string, r *http.Request) (params ReadInternalApiserverV1alpha1StorageVersionStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadNetworkingV1IngressClassParams struct {
	// Name of the IngressClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadNetworkingV1IngressClassParams(args [1]string, r *http.Request) (params ReadNetworkingV1IngressClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadNetworkingV1NamespacedIngressParams struct {
	// Name of the Ingress.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadNetworkingV1NamespacedIngressParams(args [2]string, r *http.Request) (params ReadNetworkingV1NamespacedIngressParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadNetworkingV1NamespacedIngressStatusParams struct {
	// Name of the Ingress.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadNetworkingV1NamespacedIngressStatusParams(args [2]string, r *http.Request) (params ReadNetworkingV1NamespacedIngressStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadNetworkingV1NamespacedNetworkPolicyParams struct {
	// Name of the NetworkPolicy.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadNetworkingV1NamespacedNetworkPolicyParams(args [2]string, r *http.Request) (params ReadNetworkingV1NamespacedNetworkPolicyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadNodeV1RuntimeClassParams struct {
	// Name of the RuntimeClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadNodeV1RuntimeClassParams(args [1]string, r *http.Request) (params ReadNodeV1RuntimeClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadNodeV1alpha1RuntimeClassParams struct {
	// Name of the RuntimeClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadNodeV1alpha1RuntimeClassParams(args [1]string, r *http.Request) (params ReadNodeV1alpha1RuntimeClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadNodeV1beta1RuntimeClassParams struct {
	// Name of the RuntimeClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadNodeV1beta1RuntimeClassParams(args [1]string, r *http.Request) (params ReadNodeV1beta1RuntimeClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadPolicyV1NamespacedPodDisruptionBudgetParams struct {
	// Name of the PodDisruptionBudget.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadPolicyV1NamespacedPodDisruptionBudgetParams(args [2]string, r *http.Request) (params ReadPolicyV1NamespacedPodDisruptionBudgetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadPolicyV1NamespacedPodDisruptionBudgetStatusParams struct {
	// Name of the PodDisruptionBudget.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadPolicyV1NamespacedPodDisruptionBudgetStatusParams(args [2]string, r *http.Request) (params ReadPolicyV1NamespacedPodDisruptionBudgetStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadPolicyV1beta1NamespacedPodDisruptionBudgetParams struct {
	// Name of the PodDisruptionBudget.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadPolicyV1beta1NamespacedPodDisruptionBudgetParams(args [2]string, r *http.Request) (params ReadPolicyV1beta1NamespacedPodDisruptionBudgetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams struct {
	// Name of the PodDisruptionBudget.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams(args [2]string, r *http.Request) (params ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadPolicyV1beta1PodSecurityPolicyParams struct {
	// Name of the PodSecurityPolicy.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadPolicyV1beta1PodSecurityPolicyParams(args [1]string, r *http.Request) (params ReadPolicyV1beta1PodSecurityPolicyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadRbacAuthorizationV1ClusterRoleParams struct {
	// Name of the ClusterRole.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadRbacAuthorizationV1ClusterRoleParams(args [1]string, r *http.Request) (params ReadRbacAuthorizationV1ClusterRoleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadRbacAuthorizationV1ClusterRoleBindingParams struct {
	// Name of the ClusterRoleBinding.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadRbacAuthorizationV1ClusterRoleBindingParams(args [1]string, r *http.Request) (params ReadRbacAuthorizationV1ClusterRoleBindingParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadRbacAuthorizationV1NamespacedRoleParams struct {
	// Name of the Role.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadRbacAuthorizationV1NamespacedRoleParams(args [2]string, r *http.Request) (params ReadRbacAuthorizationV1NamespacedRoleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadRbacAuthorizationV1NamespacedRoleBindingParams struct {
	// Name of the RoleBinding.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadRbacAuthorizationV1NamespacedRoleBindingParams(args [2]string, r *http.Request) (params ReadRbacAuthorizationV1NamespacedRoleBindingParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadSchedulingV1PriorityClassParams struct {
	// Name of the PriorityClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadSchedulingV1PriorityClassParams(args [1]string, r *http.Request) (params ReadSchedulingV1PriorityClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadStorageV1CSIDriverParams struct {
	// Name of the CSIDriver.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadStorageV1CSIDriverParams(args [1]string, r *http.Request) (params ReadStorageV1CSIDriverParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadStorageV1CSINodeParams struct {
	// Name of the CSINode.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadStorageV1CSINodeParams(args [1]string, r *http.Request) (params ReadStorageV1CSINodeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadStorageV1StorageClassParams struct {
	// Name of the StorageClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadStorageV1StorageClassParams(args [1]string, r *http.Request) (params ReadStorageV1StorageClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadStorageV1VolumeAttachmentParams struct {
	// Name of the VolumeAttachment.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadStorageV1VolumeAttachmentParams(args [1]string, r *http.Request) (params ReadStorageV1VolumeAttachmentParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadStorageV1VolumeAttachmentStatusParams struct {
	// Name of the VolumeAttachment.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadStorageV1VolumeAttachmentStatusParams(args [1]string, r *http.Request) (params ReadStorageV1VolumeAttachmentStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadStorageV1alpha1NamespacedCSIStorageCapacityParams struct {
	// Name of the CSIStorageCapacity.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadStorageV1alpha1NamespacedCSIStorageCapacityParams(args [2]string, r *http.Request) (params ReadStorageV1alpha1NamespacedCSIStorageCapacityParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type ReadStorageV1beta1NamespacedCSIStorageCapacityParams struct {
	// Name of the CSIStorageCapacity.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

func decodeReadStorageV1beta1NamespacedCSIStorageCapacityParams(args [2]string, r *http.Request) (params ReadStorageV1beta1NamespacedCSIStorageCapacityParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

type WatchAdmissionregistrationV1MutatingWebhookConfigurationParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the MutatingWebhookConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAdmissionregistrationV1MutatingWebhookConfigurationParams(args [1]string, r *http.Request) (params WatchAdmissionregistrationV1MutatingWebhookConfigurationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAdmissionregistrationV1MutatingWebhookConfigurationListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAdmissionregistrationV1MutatingWebhookConfigurationListParams(args [0]string, r *http.Request) (params WatchAdmissionregistrationV1MutatingWebhookConfigurationListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAdmissionregistrationV1ValidatingWebhookConfigurationParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ValidatingWebhookConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAdmissionregistrationV1ValidatingWebhookConfigurationParams(args [1]string, r *http.Request) (params WatchAdmissionregistrationV1ValidatingWebhookConfigurationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAdmissionregistrationV1ValidatingWebhookConfigurationListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAdmissionregistrationV1ValidatingWebhookConfigurationListParams(args [0]string, r *http.Request) (params WatchAdmissionregistrationV1ValidatingWebhookConfigurationListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchApiextensionsV1CustomResourceDefinitionParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the CustomResourceDefinition.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchApiextensionsV1CustomResourceDefinitionParams(args [1]string, r *http.Request) (params WatchApiextensionsV1CustomResourceDefinitionParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchApiextensionsV1CustomResourceDefinitionListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchApiextensionsV1CustomResourceDefinitionListParams(args [0]string, r *http.Request) (params WatchApiextensionsV1CustomResourceDefinitionListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchApiregistrationV1APIServiceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the APIService.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchApiregistrationV1APIServiceParams(args [1]string, r *http.Request) (params WatchApiregistrationV1APIServiceParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchApiregistrationV1APIServiceListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchApiregistrationV1APIServiceListParams(args [0]string, r *http.Request) (params WatchApiregistrationV1APIServiceListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAppsV1ControllerRevisionListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAppsV1ControllerRevisionListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchAppsV1ControllerRevisionListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAppsV1DaemonSetListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAppsV1DaemonSetListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchAppsV1DaemonSetListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAppsV1DeploymentListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAppsV1DeploymentListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchAppsV1DeploymentListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAppsV1NamespacedControllerRevisionParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ControllerRevision.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAppsV1NamespacedControllerRevisionParams(args [2]string, r *http.Request) (params WatchAppsV1NamespacedControllerRevisionParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAppsV1NamespacedControllerRevisionListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAppsV1NamespacedControllerRevisionListParams(args [1]string, r *http.Request) (params WatchAppsV1NamespacedControllerRevisionListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAppsV1NamespacedDaemonSetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the DaemonSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAppsV1NamespacedDaemonSetParams(args [2]string, r *http.Request) (params WatchAppsV1NamespacedDaemonSetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAppsV1NamespacedDaemonSetListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAppsV1NamespacedDaemonSetListParams(args [1]string, r *http.Request) (params WatchAppsV1NamespacedDaemonSetListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAppsV1NamespacedDeploymentParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Deployment.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAppsV1NamespacedDeploymentParams(args [2]string, r *http.Request) (params WatchAppsV1NamespacedDeploymentParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAppsV1NamespacedDeploymentListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAppsV1NamespacedDeploymentListParams(args [1]string, r *http.Request) (params WatchAppsV1NamespacedDeploymentListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAppsV1NamespacedReplicaSetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ReplicaSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAppsV1NamespacedReplicaSetParams(args [2]string, r *http.Request) (params WatchAppsV1NamespacedReplicaSetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAppsV1NamespacedReplicaSetListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAppsV1NamespacedReplicaSetListParams(args [1]string, r *http.Request) (params WatchAppsV1NamespacedReplicaSetListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAppsV1NamespacedStatefulSetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the StatefulSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAppsV1NamespacedStatefulSetParams(args [2]string, r *http.Request) (params WatchAppsV1NamespacedStatefulSetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAppsV1NamespacedStatefulSetListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAppsV1NamespacedStatefulSetListParams(args [1]string, r *http.Request) (params WatchAppsV1NamespacedStatefulSetListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAppsV1ReplicaSetListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAppsV1ReplicaSetListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchAppsV1ReplicaSetListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAppsV1StatefulSetListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAppsV1StatefulSetListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchAppsV1StatefulSetListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAutoscalingV1NamespacedHorizontalPodAutoscalerParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAutoscalingV1NamespacedHorizontalPodAutoscalerParams(args [2]string, r *http.Request) (params WatchAutoscalingV1NamespacedHorizontalPodAutoscalerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAutoscalingV1NamespacedHorizontalPodAutoscalerListParams(args [1]string, r *http.Request) (params WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams(args [2]string, r *http.Request) (params WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListParams(args [1]string, r *http.Request) (params WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams(args [2]string, r *http.Request) (params WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListParams(args [1]string, r *http.Request) (params WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchBatchV1CronJobListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchBatchV1CronJobListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchBatchV1CronJobListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchBatchV1JobListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchBatchV1JobListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchBatchV1JobListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchBatchV1NamespacedCronJobParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the CronJob.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchBatchV1NamespacedCronJobParams(args [2]string, r *http.Request) (params WatchBatchV1NamespacedCronJobParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchBatchV1NamespacedCronJobListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchBatchV1NamespacedCronJobListParams(args [1]string, r *http.Request) (params WatchBatchV1NamespacedCronJobListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchBatchV1NamespacedJobParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Job.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchBatchV1NamespacedJobParams(args [2]string, r *http.Request) (params WatchBatchV1NamespacedJobParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchBatchV1NamespacedJobListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchBatchV1NamespacedJobListParams(args [1]string, r *http.Request) (params WatchBatchV1NamespacedJobListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchBatchV1beta1CronJobListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchBatchV1beta1CronJobListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchBatchV1beta1CronJobListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchBatchV1beta1NamespacedCronJobParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the CronJob.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchBatchV1beta1NamespacedCronJobParams(args [2]string, r *http.Request) (params WatchBatchV1beta1NamespacedCronJobParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchBatchV1beta1NamespacedCronJobListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchBatchV1beta1NamespacedCronJobListParams(args [1]string, r *http.Request) (params WatchBatchV1beta1NamespacedCronJobListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCertificatesV1CertificateSigningRequestParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the CertificateSigningRequest.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCertificatesV1CertificateSigningRequestParams(args [1]string, r *http.Request) (params WatchCertificatesV1CertificateSigningRequestParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCertificatesV1CertificateSigningRequestListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCertificatesV1CertificateSigningRequestListParams(args [0]string, r *http.Request) (params WatchCertificatesV1CertificateSigningRequestListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoordinationV1LeaseListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoordinationV1LeaseListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchCoordinationV1LeaseListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoordinationV1NamespacedLeaseParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Lease.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoordinationV1NamespacedLeaseParams(args [2]string, r *http.Request) (params WatchCoordinationV1NamespacedLeaseParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoordinationV1NamespacedLeaseListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoordinationV1NamespacedLeaseListParams(args [1]string, r *http.Request) (params WatchCoordinationV1NamespacedLeaseListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1ConfigMapListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1ConfigMapListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchCoreV1ConfigMapListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1EndpointsListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1EndpointsListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchCoreV1EndpointsListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1EventListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1EventListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchCoreV1EventListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1LimitRangeListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1LimitRangeListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchCoreV1LimitRangeListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespaceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Namespace.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespaceParams(args [1]string, r *http.Request) (params WatchCoreV1NamespaceParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespaceListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespaceListParams(args [0]string, r *http.Request) (params WatchCoreV1NamespaceListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedConfigMapParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ConfigMap.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedConfigMapParams(args [2]string, r *http.Request) (params WatchCoreV1NamespacedConfigMapParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedConfigMapListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedConfigMapListParams(args [1]string, r *http.Request) (params WatchCoreV1NamespacedConfigMapListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedEndpointsParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Endpoints.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedEndpointsParams(args [2]string, r *http.Request) (params WatchCoreV1NamespacedEndpointsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedEndpointsListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedEndpointsListParams(args [1]string, r *http.Request) (params WatchCoreV1NamespacedEndpointsListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedEventParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Event.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedEventParams(args [2]string, r *http.Request) (params WatchCoreV1NamespacedEventParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedEventListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedEventListParams(args [1]string, r *http.Request) (params WatchCoreV1NamespacedEventListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedLimitRangeParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the LimitRange.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedLimitRangeParams(args [2]string, r *http.Request) (params WatchCoreV1NamespacedLimitRangeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedLimitRangeListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedLimitRangeListParams(args [1]string, r *http.Request) (params WatchCoreV1NamespacedLimitRangeListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedPersistentVolumeClaimParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PersistentVolumeClaim.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedPersistentVolumeClaimParams(args [2]string, r *http.Request) (params WatchCoreV1NamespacedPersistentVolumeClaimParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedPersistentVolumeClaimListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedPersistentVolumeClaimListParams(args [1]string, r *http.Request) (params WatchCoreV1NamespacedPersistentVolumeClaimListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedPodParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Pod.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedPodParams(args [2]string, r *http.Request) (params WatchCoreV1NamespacedPodParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedPodListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedPodListParams(args [1]string, r *http.Request) (params WatchCoreV1NamespacedPodListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedPodTemplateParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PodTemplate.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedPodTemplateParams(args [2]string, r *http.Request) (params WatchCoreV1NamespacedPodTemplateParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedPodTemplateListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedPodTemplateListParams(args [1]string, r *http.Request) (params WatchCoreV1NamespacedPodTemplateListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedReplicationControllerParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ReplicationController.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedReplicationControllerParams(args [2]string, r *http.Request) (params WatchCoreV1NamespacedReplicationControllerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedReplicationControllerListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedReplicationControllerListParams(args [1]string, r *http.Request) (params WatchCoreV1NamespacedReplicationControllerListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedResourceQuotaParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ResourceQuota.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedResourceQuotaParams(args [2]string, r *http.Request) (params WatchCoreV1NamespacedResourceQuotaParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedResourceQuotaListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedResourceQuotaListParams(args [1]string, r *http.Request) (params WatchCoreV1NamespacedResourceQuotaListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedSecretParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Secret.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedSecretParams(args [2]string, r *http.Request) (params WatchCoreV1NamespacedSecretParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedSecretListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedSecretListParams(args [1]string, r *http.Request) (params WatchCoreV1NamespacedSecretListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedServiceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Service.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedServiceParams(args [2]string, r *http.Request) (params WatchCoreV1NamespacedServiceParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedServiceAccountParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ServiceAccount.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedServiceAccountParams(args [2]string, r *http.Request) (params WatchCoreV1NamespacedServiceAccountParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedServiceAccountListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedServiceAccountListParams(args [1]string, r *http.Request) (params WatchCoreV1NamespacedServiceAccountListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NamespacedServiceListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NamespacedServiceListParams(args [1]string, r *http.Request) (params WatchCoreV1NamespacedServiceListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NodeParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Node.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NodeParams(args [1]string, r *http.Request) (params WatchCoreV1NodeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1NodeListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1NodeListParams(args [0]string, r *http.Request) (params WatchCoreV1NodeListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1PersistentVolumeParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PersistentVolume.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1PersistentVolumeParams(args [1]string, r *http.Request) (params WatchCoreV1PersistentVolumeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1PersistentVolumeClaimListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1PersistentVolumeClaimListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchCoreV1PersistentVolumeClaimListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1PersistentVolumeListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1PersistentVolumeListParams(args [0]string, r *http.Request) (params WatchCoreV1PersistentVolumeListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1PodListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1PodListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchCoreV1PodListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1PodTemplateListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1PodTemplateListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchCoreV1PodTemplateListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1ReplicationControllerListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1ReplicationControllerListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchCoreV1ReplicationControllerListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1ResourceQuotaListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1ResourceQuotaListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchCoreV1ResourceQuotaListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1SecretListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1SecretListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchCoreV1SecretListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1ServiceAccountListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1ServiceAccountListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchCoreV1ServiceAccountListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchCoreV1ServiceListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchCoreV1ServiceListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchCoreV1ServiceListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchDiscoveryV1EndpointSliceListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchDiscoveryV1EndpointSliceListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchDiscoveryV1EndpointSliceListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchDiscoveryV1NamespacedEndpointSliceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the EndpointSlice.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchDiscoveryV1NamespacedEndpointSliceParams(args [2]string, r *http.Request) (params WatchDiscoveryV1NamespacedEndpointSliceParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchDiscoveryV1NamespacedEndpointSliceListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchDiscoveryV1NamespacedEndpointSliceListParams(args [1]string, r *http.Request) (params WatchDiscoveryV1NamespacedEndpointSliceListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchDiscoveryV1beta1EndpointSliceListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchDiscoveryV1beta1NamespacedEndpointSliceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the EndpointSlice.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchDiscoveryV1beta1NamespacedEndpointSliceParams(args [2]string, r *http.Request) (params WatchDiscoveryV1beta1NamespacedEndpointSliceParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchDiscoveryV1beta1NamespacedEndpointSliceListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchDiscoveryV1beta1NamespacedEndpointSliceListParams(args [1]string, r *http.Request) (params WatchDiscoveryV1beta1NamespacedEndpointSliceListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchEventsV1EventListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchEventsV1EventListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchEventsV1EventListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchEventsV1NamespacedEventParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Event.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchEventsV1NamespacedEventParams(args [2]string, r *http.Request) (params WatchEventsV1NamespacedEventParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchEventsV1NamespacedEventListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchEventsV1NamespacedEventListParams(args [1]string, r *http.Request) (params WatchEventsV1NamespacedEventListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchEventsV1beta1EventListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchEventsV1beta1EventListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchEventsV1beta1EventListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchEventsV1beta1NamespacedEventParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Event.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchEventsV1beta1NamespacedEventParams(args [2]string, r *http.Request) (params WatchEventsV1beta1NamespacedEventParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchEventsV1beta1NamespacedEventListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchEventsV1beta1NamespacedEventListParams(args [1]string, r *http.Request) (params WatchEventsV1beta1NamespacedEventListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchFlowcontrolApiserverV1beta1FlowSchemaParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the FlowSchema.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchFlowcontrolApiserverV1beta1FlowSchemaParams(args [1]string, r *http.Request) (params WatchFlowcontrolApiserverV1beta1FlowSchemaParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchFlowcontrolApiserverV1beta1FlowSchemaListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchFlowcontrolApiserverV1beta1FlowSchemaListParams(args [0]string, r *http.Request) (params WatchFlowcontrolApiserverV1beta1FlowSchemaListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PriorityLevelConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams(args [1]string, r *http.Request) (params WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListParams(args [0]string, r *http.Request) (params WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchFlowcontrolApiserverV1beta2FlowSchemaParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the FlowSchema.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchFlowcontrolApiserverV1beta2FlowSchemaParams(args [1]string, r *http.Request) (params WatchFlowcontrolApiserverV1beta2FlowSchemaParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchFlowcontrolApiserverV1beta2FlowSchemaListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchFlowcontrolApiserverV1beta2FlowSchemaListParams(args [0]string, r *http.Request) (params WatchFlowcontrolApiserverV1beta2FlowSchemaListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PriorityLevelConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams(args [1]string, r *http.Request) (params WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListParams(args [0]string, r *http.Request) (params WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchInternalApiserverV1alpha1StorageVersionParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the StorageVersion.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchInternalApiserverV1alpha1StorageVersionParams(args [1]string, r *http.Request) (params WatchInternalApiserverV1alpha1StorageVersionParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchInternalApiserverV1alpha1StorageVersionListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchInternalApiserverV1alpha1StorageVersionListParams(args [0]string, r *http.Request) (params WatchInternalApiserverV1alpha1StorageVersionListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchNetworkingV1IngressClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the IngressClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchNetworkingV1IngressClassParams(args [1]string, r *http.Request) (params WatchNetworkingV1IngressClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchNetworkingV1IngressClassListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchNetworkingV1IngressClassListParams(args [0]string, r *http.Request) (params WatchNetworkingV1IngressClassListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchNetworkingV1IngressListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchNetworkingV1IngressListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchNetworkingV1IngressListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchNetworkingV1NamespacedIngressParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Ingress.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchNetworkingV1NamespacedIngressParams(args [2]string, r *http.Request) (params WatchNetworkingV1NamespacedIngressParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchNetworkingV1NamespacedIngressListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchNetworkingV1NamespacedIngressListParams(args [1]string, r *http.Request) (params WatchNetworkingV1NamespacedIngressListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchNetworkingV1NamespacedNetworkPolicyParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the NetworkPolicy.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchNetworkingV1NamespacedNetworkPolicyParams(args [2]string, r *http.Request) (params WatchNetworkingV1NamespacedNetworkPolicyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchNetworkingV1NamespacedNetworkPolicyListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchNetworkingV1NamespacedNetworkPolicyListParams(args [1]string, r *http.Request) (params WatchNetworkingV1NamespacedNetworkPolicyListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchNetworkingV1NetworkPolicyListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchNetworkingV1NetworkPolicyListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchNetworkingV1NetworkPolicyListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchNodeV1RuntimeClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the RuntimeClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchNodeV1RuntimeClassParams(args [1]string, r *http.Request) (params WatchNodeV1RuntimeClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchNodeV1RuntimeClassListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchNodeV1RuntimeClassListParams(args [0]string, r *http.Request) (params WatchNodeV1RuntimeClassListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchNodeV1alpha1RuntimeClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the RuntimeClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchNodeV1alpha1RuntimeClassParams(args [1]string, r *http.Request) (params WatchNodeV1alpha1RuntimeClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchNodeV1alpha1RuntimeClassListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchNodeV1alpha1RuntimeClassListParams(args [0]string, r *http.Request) (params WatchNodeV1alpha1RuntimeClassListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchNodeV1beta1RuntimeClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the RuntimeClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchNodeV1beta1RuntimeClassParams(args [1]string, r *http.Request) (params WatchNodeV1beta1RuntimeClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchNodeV1beta1RuntimeClassListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchNodeV1beta1RuntimeClassListParams(args [0]string, r *http.Request) (params WatchNodeV1beta1RuntimeClassListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchPolicyV1NamespacedPodDisruptionBudgetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PodDisruptionBudget.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchPolicyV1NamespacedPodDisruptionBudgetParams(args [2]string, r *http.Request) (params WatchPolicyV1NamespacedPodDisruptionBudgetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchPolicyV1NamespacedPodDisruptionBudgetListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchPolicyV1NamespacedPodDisruptionBudgetListParams(args [1]string, r *http.Request) (params WatchPolicyV1NamespacedPodDisruptionBudgetListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchPolicyV1PodDisruptionBudgetListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchPolicyV1PodDisruptionBudgetListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchPolicyV1PodDisruptionBudgetListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchPolicyV1beta1NamespacedPodDisruptionBudgetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PodDisruptionBudget.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchPolicyV1beta1NamespacedPodDisruptionBudgetParams(args [2]string, r *http.Request) (params WatchPolicyV1beta1NamespacedPodDisruptionBudgetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchPolicyV1beta1NamespacedPodDisruptionBudgetListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchPolicyV1beta1NamespacedPodDisruptionBudgetListParams(args [1]string, r *http.Request) (params WatchPolicyV1beta1NamespacedPodDisruptionBudgetListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchPolicyV1beta1PodSecurityPolicyParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PodSecurityPolicy.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchPolicyV1beta1PodSecurityPolicyParams(args [1]string, r *http.Request) (params WatchPolicyV1beta1PodSecurityPolicyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchPolicyV1beta1PodSecurityPolicyListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchPolicyV1beta1PodSecurityPolicyListParams(args [0]string, r *http.Request) (params WatchPolicyV1beta1PodSecurityPolicyListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchRbacAuthorizationV1ClusterRoleParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ClusterRole.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchRbacAuthorizationV1ClusterRoleParams(args [1]string, r *http.Request) (params WatchRbacAuthorizationV1ClusterRoleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchRbacAuthorizationV1ClusterRoleBindingParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ClusterRoleBinding.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchRbacAuthorizationV1ClusterRoleBindingParams(args [1]string, r *http.Request) (params WatchRbacAuthorizationV1ClusterRoleBindingParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchRbacAuthorizationV1ClusterRoleBindingListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchRbacAuthorizationV1ClusterRoleBindingListParams(args [0]string, r *http.Request) (params WatchRbacAuthorizationV1ClusterRoleBindingListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchRbacAuthorizationV1ClusterRoleListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchRbacAuthorizationV1ClusterRoleListParams(args [0]string, r *http.Request) (params WatchRbacAuthorizationV1ClusterRoleListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchRbacAuthorizationV1NamespacedRoleParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Role.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchRbacAuthorizationV1NamespacedRoleParams(args [2]string, r *http.Request) (params WatchRbacAuthorizationV1NamespacedRoleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchRbacAuthorizationV1NamespacedRoleBindingParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the RoleBinding.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchRbacAuthorizationV1NamespacedRoleBindingParams(args [2]string, r *http.Request) (params WatchRbacAuthorizationV1NamespacedRoleBindingParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchRbacAuthorizationV1NamespacedRoleBindingListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchRbacAuthorizationV1NamespacedRoleBindingListParams(args [1]string, r *http.Request) (params WatchRbacAuthorizationV1NamespacedRoleBindingListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchRbacAuthorizationV1NamespacedRoleListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchRbacAuthorizationV1NamespacedRoleListParams(args [1]string, r *http.Request) (params WatchRbacAuthorizationV1NamespacedRoleListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchRbacAuthorizationV1RoleBindingListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchRbacAuthorizationV1RoleBindingListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchRbacAuthorizationV1RoleBindingListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchRbacAuthorizationV1RoleListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchRbacAuthorizationV1RoleListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchRbacAuthorizationV1RoleListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchSchedulingV1PriorityClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PriorityClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchSchedulingV1PriorityClassParams(args [1]string, r *http.Request) (params WatchSchedulingV1PriorityClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchSchedulingV1PriorityClassListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchSchedulingV1PriorityClassListParams(args [0]string, r *http.Request) (params WatchSchedulingV1PriorityClassListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchStorageV1CSIDriverParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the CSIDriver.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchStorageV1CSIDriverParams(args [1]string, r *http.Request) (params WatchStorageV1CSIDriverParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchStorageV1CSIDriverListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchStorageV1CSIDriverListParams(args [0]string, r *http.Request) (params WatchStorageV1CSIDriverListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchStorageV1CSINodeParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the CSINode.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchStorageV1CSINodeParams(args [1]string, r *http.Request) (params WatchStorageV1CSINodeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchStorageV1CSINodeListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchStorageV1CSINodeListParams(args [0]string, r *http.Request) (params WatchStorageV1CSINodeListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchStorageV1StorageClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the StorageClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchStorageV1StorageClassParams(args [1]string, r *http.Request) (params WatchStorageV1StorageClassParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchStorageV1StorageClassListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchStorageV1StorageClassListParams(args [0]string, r *http.Request) (params WatchStorageV1StorageClassListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchStorageV1VolumeAttachmentParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the VolumeAttachment.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchStorageV1VolumeAttachmentParams(args [1]string, r *http.Request) (params WatchStorageV1VolumeAttachmentParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchStorageV1VolumeAttachmentListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchStorageV1VolumeAttachmentListParams(args [0]string, r *http.Request) (params WatchStorageV1VolumeAttachmentListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchStorageV1alpha1NamespacedCSIStorageCapacityParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the CSIStorageCapacity.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchStorageV1alpha1NamespacedCSIStorageCapacityParams(args [2]string, r *http.Request) (params WatchStorageV1alpha1NamespacedCSIStorageCapacityParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchStorageV1alpha1NamespacedCSIStorageCapacityListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchStorageV1alpha1NamespacedCSIStorageCapacityListParams(args [1]string, r *http.Request) (params WatchStorageV1alpha1NamespacedCSIStorageCapacityListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchStorageV1beta1CSIStorageCapacityListForAllNamespacesParams(args [0]string, r *http.Request) (params WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchStorageV1beta1NamespacedCSIStorageCapacityParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the CSIStorageCapacity.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchStorageV1beta1NamespacedCSIStorageCapacityParams(args [2]string, r *http.Request) (params WatchStorageV1beta1NamespacedCSIStorageCapacityParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

type WatchStorageV1beta1NamespacedCSIStorageCapacityListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

func decodeWatchStorageV1beta1NamespacedCSIStorageCapacityListParams(args [1]string, r *http.Request) (params WatchStorageV1beta1NamespacedCSIStorageCapacityListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: allowWatchBookmarks.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowWatchBookmarks",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "continue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContinueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fieldSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelSelector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pretty",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrettyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersion",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "resourceVersionMatch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeoutSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "watch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWatchVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}
