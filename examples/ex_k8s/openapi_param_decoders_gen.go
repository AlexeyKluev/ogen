// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/json"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
)

func decodeListCoreV1NamespaceParams(r *http.Request) (ListCoreV1NamespaceParams, error) {
	var params ListCoreV1NamespaceParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateCoreV1NamespaceParams(r *http.Request) (CreateCoreV1NamespaceParams, error) {
	var params CreateCoreV1NamespaceParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeListCoreV1NodeParams(r *http.Request) (ListCoreV1NodeParams, error) {
	var params ListCoreV1NodeParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateCoreV1NodeParams(r *http.Request) (CreateCoreV1NodeParams, error) {
	var params CreateCoreV1NodeParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteCoreV1CollectionNodeParams(r *http.Request) (DeleteCoreV1CollectionNodeParams, error) {
	var params DeleteCoreV1CollectionNodeParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListCoreV1PersistentVolumeParams(r *http.Request) (ListCoreV1PersistentVolumeParams, error) {
	var params ListCoreV1PersistentVolumeParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateCoreV1PersistentVolumeParams(r *http.Request) (CreateCoreV1PersistentVolumeParams, error) {
	var params CreateCoreV1PersistentVolumeParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteCoreV1CollectionPersistentVolumeParams(r *http.Request) (DeleteCoreV1CollectionPersistentVolumeParams, error) {
	var params DeleteCoreV1CollectionPersistentVolumeParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListAdmissionregistrationV1MutatingWebhookConfigurationParams(r *http.Request) (ListAdmissionregistrationV1MutatingWebhookConfigurationParams, error) {
	var params ListAdmissionregistrationV1MutatingWebhookConfigurationParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateAdmissionregistrationV1MutatingWebhookConfigurationParams(r *http.Request) (CreateAdmissionregistrationV1MutatingWebhookConfigurationParams, error) {
	var params CreateAdmissionregistrationV1MutatingWebhookConfigurationParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationParams(r *http.Request) (DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationParams, error) {
	var params DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListAdmissionregistrationV1ValidatingWebhookConfigurationParams(r *http.Request) (ListAdmissionregistrationV1ValidatingWebhookConfigurationParams, error) {
	var params ListAdmissionregistrationV1ValidatingWebhookConfigurationParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateAdmissionregistrationV1ValidatingWebhookConfigurationParams(r *http.Request) (CreateAdmissionregistrationV1ValidatingWebhookConfigurationParams, error) {
	var params CreateAdmissionregistrationV1ValidatingWebhookConfigurationParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationParams(r *http.Request) (DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationParams, error) {
	var params DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListApiextensionsV1CustomResourceDefinitionParams(r *http.Request) (ListApiextensionsV1CustomResourceDefinitionParams, error) {
	var params ListApiextensionsV1CustomResourceDefinitionParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateApiextensionsV1CustomResourceDefinitionParams(r *http.Request) (CreateApiextensionsV1CustomResourceDefinitionParams, error) {
	var params CreateApiextensionsV1CustomResourceDefinitionParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteApiextensionsV1CollectionCustomResourceDefinitionParams(r *http.Request) (DeleteApiextensionsV1CollectionCustomResourceDefinitionParams, error) {
	var params DeleteApiextensionsV1CollectionCustomResourceDefinitionParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListApiregistrationV1APIServiceParams(r *http.Request) (ListApiregistrationV1APIServiceParams, error) {
	var params ListApiregistrationV1APIServiceParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateApiregistrationV1APIServiceParams(r *http.Request) (CreateApiregistrationV1APIServiceParams, error) {
	var params CreateApiregistrationV1APIServiceParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteApiregistrationV1CollectionAPIServiceParams(r *http.Request) (DeleteApiregistrationV1CollectionAPIServiceParams, error) {
	var params DeleteApiregistrationV1CollectionAPIServiceParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListCertificatesV1CertificateSigningRequestParams(r *http.Request) (ListCertificatesV1CertificateSigningRequestParams, error) {
	var params ListCertificatesV1CertificateSigningRequestParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateCertificatesV1CertificateSigningRequestParams(r *http.Request) (CreateCertificatesV1CertificateSigningRequestParams, error) {
	var params CreateCertificatesV1CertificateSigningRequestParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteCertificatesV1CollectionCertificateSigningRequestParams(r *http.Request) (DeleteCertificatesV1CollectionCertificateSigningRequestParams, error) {
	var params DeleteCertificatesV1CollectionCertificateSigningRequestParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListFlowcontrolApiserverV1beta1FlowSchemaParams(r *http.Request) (ListFlowcontrolApiserverV1beta1FlowSchemaParams, error) {
	var params ListFlowcontrolApiserverV1beta1FlowSchemaParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateFlowcontrolApiserverV1beta1FlowSchemaParams(r *http.Request) (CreateFlowcontrolApiserverV1beta1FlowSchemaParams, error) {
	var params CreateFlowcontrolApiserverV1beta1FlowSchemaParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaParams(r *http.Request) (DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaParams, error) {
	var params DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams(r *http.Request) (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams, error) {
	var params ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams(r *http.Request) (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams, error) {
	var params CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationParams(r *http.Request) (DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationParams, error) {
	var params DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListFlowcontrolApiserverV1beta2FlowSchemaParams(r *http.Request) (ListFlowcontrolApiserverV1beta2FlowSchemaParams, error) {
	var params ListFlowcontrolApiserverV1beta2FlowSchemaParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateFlowcontrolApiserverV1beta2FlowSchemaParams(r *http.Request) (CreateFlowcontrolApiserverV1beta2FlowSchemaParams, error) {
	var params CreateFlowcontrolApiserverV1beta2FlowSchemaParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaParams(r *http.Request) (DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaParams, error) {
	var params DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams(r *http.Request) (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams, error) {
	var params ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams(r *http.Request) (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams, error) {
	var params CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationParams(r *http.Request) (DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationParams, error) {
	var params DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListInternalApiserverV1alpha1StorageVersionParams(r *http.Request) (ListInternalApiserverV1alpha1StorageVersionParams, error) {
	var params ListInternalApiserverV1alpha1StorageVersionParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateInternalApiserverV1alpha1StorageVersionParams(r *http.Request) (CreateInternalApiserverV1alpha1StorageVersionParams, error) {
	var params CreateInternalApiserverV1alpha1StorageVersionParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteInternalApiserverV1alpha1CollectionStorageVersionParams(r *http.Request) (DeleteInternalApiserverV1alpha1CollectionStorageVersionParams, error) {
	var params DeleteInternalApiserverV1alpha1CollectionStorageVersionParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListNetworkingV1IngressClassParams(r *http.Request) (ListNetworkingV1IngressClassParams, error) {
	var params ListNetworkingV1IngressClassParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateNetworkingV1IngressClassParams(r *http.Request) (CreateNetworkingV1IngressClassParams, error) {
	var params CreateNetworkingV1IngressClassParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteNetworkingV1CollectionIngressClassParams(r *http.Request) (DeleteNetworkingV1CollectionIngressClassParams, error) {
	var params DeleteNetworkingV1CollectionIngressClassParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListNodeV1RuntimeClassParams(r *http.Request) (ListNodeV1RuntimeClassParams, error) {
	var params ListNodeV1RuntimeClassParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateNodeV1RuntimeClassParams(r *http.Request) (CreateNodeV1RuntimeClassParams, error) {
	var params CreateNodeV1RuntimeClassParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteNodeV1CollectionRuntimeClassParams(r *http.Request) (DeleteNodeV1CollectionRuntimeClassParams, error) {
	var params DeleteNodeV1CollectionRuntimeClassParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListNodeV1alpha1RuntimeClassParams(r *http.Request) (ListNodeV1alpha1RuntimeClassParams, error) {
	var params ListNodeV1alpha1RuntimeClassParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateNodeV1alpha1RuntimeClassParams(r *http.Request) (CreateNodeV1alpha1RuntimeClassParams, error) {
	var params CreateNodeV1alpha1RuntimeClassParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteNodeV1alpha1CollectionRuntimeClassParams(r *http.Request) (DeleteNodeV1alpha1CollectionRuntimeClassParams, error) {
	var params DeleteNodeV1alpha1CollectionRuntimeClassParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListNodeV1beta1RuntimeClassParams(r *http.Request) (ListNodeV1beta1RuntimeClassParams, error) {
	var params ListNodeV1beta1RuntimeClassParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateNodeV1beta1RuntimeClassParams(r *http.Request) (CreateNodeV1beta1RuntimeClassParams, error) {
	var params CreateNodeV1beta1RuntimeClassParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteNodeV1beta1CollectionRuntimeClassParams(r *http.Request) (DeleteNodeV1beta1CollectionRuntimeClassParams, error) {
	var params DeleteNodeV1beta1CollectionRuntimeClassParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListPolicyV1beta1PodSecurityPolicyParams(r *http.Request) (ListPolicyV1beta1PodSecurityPolicyParams, error) {
	var params ListPolicyV1beta1PodSecurityPolicyParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreatePolicyV1beta1PodSecurityPolicyParams(r *http.Request) (CreatePolicyV1beta1PodSecurityPolicyParams, error) {
	var params CreatePolicyV1beta1PodSecurityPolicyParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeletePolicyV1beta1CollectionPodSecurityPolicyParams(r *http.Request) (DeletePolicyV1beta1CollectionPodSecurityPolicyParams, error) {
	var params DeletePolicyV1beta1CollectionPodSecurityPolicyParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListRbacAuthorizationV1ClusterRoleBindingParams(r *http.Request) (ListRbacAuthorizationV1ClusterRoleBindingParams, error) {
	var params ListRbacAuthorizationV1ClusterRoleBindingParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateRbacAuthorizationV1ClusterRoleBindingParams(r *http.Request) (CreateRbacAuthorizationV1ClusterRoleBindingParams, error) {
	var params CreateRbacAuthorizationV1ClusterRoleBindingParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteRbacAuthorizationV1CollectionClusterRoleBindingParams(r *http.Request) (DeleteRbacAuthorizationV1CollectionClusterRoleBindingParams, error) {
	var params DeleteRbacAuthorizationV1CollectionClusterRoleBindingParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListRbacAuthorizationV1ClusterRoleParams(r *http.Request) (ListRbacAuthorizationV1ClusterRoleParams, error) {
	var params ListRbacAuthorizationV1ClusterRoleParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateRbacAuthorizationV1ClusterRoleParams(r *http.Request) (CreateRbacAuthorizationV1ClusterRoleParams, error) {
	var params CreateRbacAuthorizationV1ClusterRoleParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteRbacAuthorizationV1CollectionClusterRoleParams(r *http.Request) (DeleteRbacAuthorizationV1CollectionClusterRoleParams, error) {
	var params DeleteRbacAuthorizationV1CollectionClusterRoleParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListSchedulingV1PriorityClassParams(r *http.Request) (ListSchedulingV1PriorityClassParams, error) {
	var params ListSchedulingV1PriorityClassParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateSchedulingV1PriorityClassParams(r *http.Request) (CreateSchedulingV1PriorityClassParams, error) {
	var params CreateSchedulingV1PriorityClassParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteSchedulingV1CollectionPriorityClassParams(r *http.Request) (DeleteSchedulingV1CollectionPriorityClassParams, error) {
	var params DeleteSchedulingV1CollectionPriorityClassParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListStorageV1CSIDriverParams(r *http.Request) (ListStorageV1CSIDriverParams, error) {
	var params ListStorageV1CSIDriverParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateStorageV1CSIDriverParams(r *http.Request) (CreateStorageV1CSIDriverParams, error) {
	var params CreateStorageV1CSIDriverParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteStorageV1CollectionCSIDriverParams(r *http.Request) (DeleteStorageV1CollectionCSIDriverParams, error) {
	var params DeleteStorageV1CollectionCSIDriverParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListStorageV1CSINodeParams(r *http.Request) (ListStorageV1CSINodeParams, error) {
	var params ListStorageV1CSINodeParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateStorageV1CSINodeParams(r *http.Request) (CreateStorageV1CSINodeParams, error) {
	var params CreateStorageV1CSINodeParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteStorageV1CollectionCSINodeParams(r *http.Request) (DeleteStorageV1CollectionCSINodeParams, error) {
	var params DeleteStorageV1CollectionCSINodeParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListStorageV1StorageClassParams(r *http.Request) (ListStorageV1StorageClassParams, error) {
	var params ListStorageV1StorageClassParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateStorageV1StorageClassParams(r *http.Request) (CreateStorageV1StorageClassParams, error) {
	var params CreateStorageV1StorageClassParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteStorageV1CollectionStorageClassParams(r *http.Request) (DeleteStorageV1CollectionStorageClassParams, error) {
	var params DeleteStorageV1CollectionStorageClassParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}

func decodeListStorageV1VolumeAttachmentParams(r *http.Request) (ListStorageV1VolumeAttachmentParams, error) {
	var params ListStorageV1VolumeAttachmentParams
	{
		param := r.URL.Query().Get("allowWatchBookmarks")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'allowWatchBookmarks': %w", err)
			}

			params.AllowWatchBookmarks = v
		}
	}
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("watch")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'watch': %w", err)
			}

			params.Watch = v
		}
	}

	return params, nil
}

func decodeCreateStorageV1VolumeAttachmentParams(r *http.Request) (CreateStorageV1VolumeAttachmentParams, error) {
	var params CreateStorageV1VolumeAttachmentParams
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldManager")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldManager': %w", err)
			}

			params.FieldManager = v
		}
	}

	return params, nil
}

func decodeDeleteStorageV1CollectionVolumeAttachmentParams(r *http.Request) (DeleteStorageV1CollectionVolumeAttachmentParams, error) {
	var params DeleteStorageV1CollectionVolumeAttachmentParams
	{
		param := r.URL.Query().Get("continue")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'continue': %w", err)
			}

			params.Continue = v
		}
	}
	{
		param := r.URL.Query().Get("dryRun")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'dryRun': %w", err)
			}

			params.DryRun = v
		}
	}
	{
		param := r.URL.Query().Get("fieldSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'fieldSelector': %w", err)
			}

			params.FieldSelector = v
		}
	}
	{
		param := r.URL.Query().Get("gracePeriodSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'gracePeriodSeconds': %w", err)
			}

			params.GracePeriodSeconds = v
		}
	}
	{
		param := r.URL.Query().Get("labelSelector")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'labelSelector': %w", err)
			}

			params.LabelSelector = v
		}
	}
	{
		param := r.URL.Query().Get("limit")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'limit': %w", err)
			}

			params.Limit = v
		}
	}
	{
		param := r.URL.Query().Get("orphanDependents")
		if len(param) > 0 {
			v, err := conv.ToBool(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'orphanDependents': %w", err)
			}

			params.OrphanDependents = v
		}
	}
	{
		param := r.URL.Query().Get("propagationPolicy")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'propagationPolicy': %w", err)
			}

			params.PropagationPolicy = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersion")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersion': %w", err)
			}

			params.ResourceVersion = v
		}
	}
	{
		param := r.URL.Query().Get("resourceVersionMatch")
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'resourceVersionMatch': %w", err)
			}

			params.ResourceVersionMatch = v
		}
	}
	{
		param := r.URL.Query().Get("timeoutSeconds")
		if len(param) > 0 {
			v, err := conv.ToInt(param)
			if err != nil {
				return params, fmt.Errorf("parse query param 'timeoutSeconds': %w", err)
			}

			params.TimeoutSeconds = v
		}
	}

	return params, nil
}
