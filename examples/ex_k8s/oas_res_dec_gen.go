// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
)

func decodeCreateAdmissionregistrationV1MutatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res CreateAdmissionregistrationV1MutatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAdmissionregistrationV1ValidatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res CreateAdmissionregistrationV1ValidatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateApiextensionsV1CustomResourceDefinitionResponse(resp *http.Response, span trace.Span) (res CreateApiextensionsV1CustomResourceDefinitionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateApiextensionsV1CustomResourceDefinitionApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateApiextensionsV1CustomResourceDefinitionApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateApiextensionsV1CustomResourceDefinitionApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateApiextensionsV1CustomResourceDefinitionApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateApiextensionsV1CustomResourceDefinitionApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateApiextensionsV1CustomResourceDefinitionApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateApiextensionsV1CustomResourceDefinitionUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateApiregistrationV1APIServiceResponse(resp *http.Response, span trace.Span) (res CreateApiregistrationV1APIServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateApiregistrationV1APIServiceApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateApiregistrationV1APIServiceApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateApiregistrationV1APIServiceApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateApiregistrationV1APIServiceApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateApiregistrationV1APIServiceApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateApiregistrationV1APIServiceApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateApiregistrationV1APIServiceUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAuthenticationV1TokenReviewResponse(resp *http.Response, span trace.Span) (res CreateAuthenticationV1TokenReviewRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAuthenticationV1TokenReviewApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAuthenticationV1TokenReviewApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAuthenticationV1TokenReviewApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAuthenticationV1TokenReviewApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAuthenticationV1TokenReviewApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAuthenticationV1TokenReviewApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAuthenticationV1TokenReviewUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAuthorizationV1SelfSubjectAccessReviewResponse(resp *http.Response, span trace.Span) (res CreateAuthorizationV1SelfSubjectAccessReviewRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAuthorizationV1SelfSubjectAccessReviewUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAuthorizationV1SelfSubjectRulesReviewResponse(resp *http.Response, span trace.Span) (res CreateAuthorizationV1SelfSubjectRulesReviewRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAuthorizationV1SelfSubjectRulesReviewUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAuthorizationV1SubjectAccessReviewResponse(resp *http.Response, span trace.Span) (res CreateAuthorizationV1SubjectAccessReviewRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SubjectAccessReviewApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAuthorizationV1SubjectAccessReviewApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SubjectAccessReviewApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAuthorizationV1SubjectAccessReviewApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SubjectAccessReviewApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateAuthorizationV1SubjectAccessReviewApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAuthorizationV1SubjectAccessReviewUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCertificatesV1CertificateSigningRequestResponse(resp *http.Response, span trace.Span) (res CreateCertificatesV1CertificateSigningRequestRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateCertificatesV1CertificateSigningRequestApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateCertificatesV1CertificateSigningRequestApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateCertificatesV1CertificateSigningRequestApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateCertificatesV1CertificateSigningRequestApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateCertificatesV1CertificateSigningRequestApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateCertificatesV1CertificateSigningRequestApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCertificatesV1CertificateSigningRequestUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespaceResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespaceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespaceApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateCoreV1NamespaceApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespaceApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateCoreV1NamespaceApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespaceApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateCoreV1NamespaceApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespaceUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NodeResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateCoreV1NodeApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateCoreV1NodeApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateCoreV1NodeApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateCoreV1NodeApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateCoreV1NodeApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateCoreV1NodeApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NodeUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1PersistentVolumeResponse(resp *http.Response, span trace.Span) (res CreateCoreV1PersistentVolumeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateCoreV1PersistentVolumeApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateCoreV1PersistentVolumeApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateCoreV1PersistentVolumeApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateCoreV1PersistentVolumeApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateCoreV1PersistentVolumeApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateCoreV1PersistentVolumeApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1PersistentVolumeUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateFlowcontrolApiserverV1beta1FlowSchemaResponse(resp *http.Response, span trace.Span) (res CreateFlowcontrolApiserverV1beta1FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateFlowcontrolApiserverV1beta1FlowSchemaUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateFlowcontrolApiserverV1beta2FlowSchemaResponse(resp *http.Response, span trace.Span) (res CreateFlowcontrolApiserverV1beta2FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateFlowcontrolApiserverV1beta2FlowSchemaUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateInternalApiserverV1alpha1StorageVersionResponse(resp *http.Response, span trace.Span) (res CreateInternalApiserverV1alpha1StorageVersionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateInternalApiserverV1alpha1StorageVersionApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateInternalApiserverV1alpha1StorageVersionApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateInternalApiserverV1alpha1StorageVersionApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateInternalApiserverV1alpha1StorageVersionApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateInternalApiserverV1alpha1StorageVersionApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateInternalApiserverV1alpha1StorageVersionApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateInternalApiserverV1alpha1StorageVersionUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateNetworkingV1IngressClassResponse(resp *http.Response, span trace.Span) (res CreateNetworkingV1IngressClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateNetworkingV1IngressClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateNetworkingV1IngressClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateNetworkingV1IngressClassApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateNetworkingV1IngressClassApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateNetworkingV1IngressClassApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateNetworkingV1IngressClassApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateNetworkingV1IngressClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateNodeV1RuntimeClassResponse(resp *http.Response, span trace.Span) (res CreateNodeV1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateNodeV1RuntimeClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateNodeV1RuntimeClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateNodeV1RuntimeClassApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateNodeV1RuntimeClassApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateNodeV1RuntimeClassApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateNodeV1RuntimeClassApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateNodeV1RuntimeClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateNodeV1alpha1RuntimeClassResponse(resp *http.Response, span trace.Span) (res CreateNodeV1alpha1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateNodeV1alpha1RuntimeClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateNodeV1alpha1RuntimeClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateNodeV1alpha1RuntimeClassApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateNodeV1alpha1RuntimeClassApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateNodeV1alpha1RuntimeClassApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateNodeV1alpha1RuntimeClassApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateNodeV1alpha1RuntimeClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateNodeV1beta1RuntimeClassResponse(resp *http.Response, span trace.Span) (res CreateNodeV1beta1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateNodeV1beta1RuntimeClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateNodeV1beta1RuntimeClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateNodeV1beta1RuntimeClassApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateNodeV1beta1RuntimeClassApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateNodeV1beta1RuntimeClassApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateNodeV1beta1RuntimeClassApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateNodeV1beta1RuntimeClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreatePolicyV1beta1PodSecurityPolicyResponse(resp *http.Response, span trace.Span) (res CreatePolicyV1beta1PodSecurityPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreatePolicyV1beta1PodSecurityPolicyApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreatePolicyV1beta1PodSecurityPolicyApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreatePolicyV1beta1PodSecurityPolicyApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreatePolicyV1beta1PodSecurityPolicyApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreatePolicyV1beta1PodSecurityPolicyApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreatePolicyV1beta1PodSecurityPolicyApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreatePolicyV1beta1PodSecurityPolicyUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateRbacAuthorizationV1ClusterRoleResponse(resp *http.Response, span trace.Span) (res CreateRbacAuthorizationV1ClusterRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1ClusterRoleApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateRbacAuthorizationV1ClusterRoleApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1ClusterRoleApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateRbacAuthorizationV1ClusterRoleApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1ClusterRoleApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateRbacAuthorizationV1ClusterRoleApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateRbacAuthorizationV1ClusterRoleUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateRbacAuthorizationV1ClusterRoleBindingResponse(resp *http.Response, span trace.Span) (res CreateRbacAuthorizationV1ClusterRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateRbacAuthorizationV1ClusterRoleBindingUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateSchedulingV1PriorityClassResponse(resp *http.Response, span trace.Span) (res CreateSchedulingV1PriorityClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateSchedulingV1PriorityClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateSchedulingV1PriorityClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateSchedulingV1PriorityClassApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateSchedulingV1PriorityClassApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateSchedulingV1PriorityClassApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateSchedulingV1PriorityClassApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateSchedulingV1PriorityClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateStorageV1CSIDriverResponse(resp *http.Response, span trace.Span) (res CreateStorageV1CSIDriverRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateStorageV1CSIDriverApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateStorageV1CSIDriverApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateStorageV1CSIDriverApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateStorageV1CSIDriverApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateStorageV1CSIDriverApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateStorageV1CSIDriverApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateStorageV1CSIDriverUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateStorageV1CSINodeResponse(resp *http.Response, span trace.Span) (res CreateStorageV1CSINodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateStorageV1CSINodeApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateStorageV1CSINodeApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateStorageV1CSINodeApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateStorageV1CSINodeApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateStorageV1CSINodeApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateStorageV1CSINodeApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateStorageV1CSINodeUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateStorageV1StorageClassResponse(resp *http.Response, span trace.Span) (res CreateStorageV1StorageClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateStorageV1StorageClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateStorageV1StorageClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateStorageV1StorageClassApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateStorageV1StorageClassApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateStorageV1StorageClassApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateStorageV1StorageClassApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateStorageV1StorageClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateStorageV1VolumeAttachmentResponse(resp *http.Response, span trace.Span) (res CreateStorageV1VolumeAttachmentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateStorageV1VolumeAttachmentApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateStorageV1VolumeAttachmentApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateStorageV1VolumeAttachmentApplicationJSONCreated
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateStorageV1VolumeAttachmentApplicationJSONCreated" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response CreateStorageV1VolumeAttachmentApplicationJSONAccepted
			if err := func() error {
				if err := fmt.Errorf(`decoding of "CreateStorageV1VolumeAttachmentApplicationJSONAccepted" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateStorageV1VolumeAttachmentUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteApiextensionsV1CollectionCustomResourceDefinitionResponse(resp *http.Response, span trace.Span) (res DeleteApiextensionsV1CollectionCustomResourceDefinitionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteApiextensionsV1CollectionCustomResourceDefinitionUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteApiregistrationV1CollectionAPIServiceResponse(resp *http.Response, span trace.Span) (res DeleteApiregistrationV1CollectionAPIServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteApiregistrationV1CollectionAPIServiceApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteApiregistrationV1CollectionAPIServiceApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteApiregistrationV1CollectionAPIServiceUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCertificatesV1CollectionCertificateSigningRequestResponse(resp *http.Response, span trace.Span) (res DeleteCertificatesV1CollectionCertificateSigningRequestRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteCertificatesV1CollectionCertificateSigningRequestApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteCertificatesV1CollectionCertificateSigningRequestApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCertificatesV1CollectionCertificateSigningRequestUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1CollectionNodeResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1CollectionNodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteCoreV1CollectionNodeApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteCoreV1CollectionNodeApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1CollectionNodeUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1CollectionPersistentVolumeResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1CollectionPersistentVolumeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteCoreV1CollectionPersistentVolumeApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteCoreV1CollectionPersistentVolumeApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1CollectionPersistentVolumeUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaResponse(resp *http.Response, span trace.Span) (res DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaResponse(resp *http.Response, span trace.Span) (res DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteInternalApiserverV1alpha1CollectionStorageVersionResponse(resp *http.Response, span trace.Span) (res DeleteInternalApiserverV1alpha1CollectionStorageVersionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteInternalApiserverV1alpha1CollectionStorageVersionUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteNetworkingV1CollectionIngressClassResponse(resp *http.Response, span trace.Span) (res DeleteNetworkingV1CollectionIngressClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteNetworkingV1CollectionIngressClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteNetworkingV1CollectionIngressClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteNetworkingV1CollectionIngressClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteNodeV1CollectionRuntimeClassResponse(resp *http.Response, span trace.Span) (res DeleteNodeV1CollectionRuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteNodeV1CollectionRuntimeClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteNodeV1CollectionRuntimeClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteNodeV1CollectionRuntimeClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteNodeV1alpha1CollectionRuntimeClassResponse(resp *http.Response, span trace.Span) (res DeleteNodeV1alpha1CollectionRuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteNodeV1alpha1CollectionRuntimeClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteNodeV1alpha1CollectionRuntimeClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteNodeV1alpha1CollectionRuntimeClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteNodeV1beta1CollectionRuntimeClassResponse(resp *http.Response, span trace.Span) (res DeleteNodeV1beta1CollectionRuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteNodeV1beta1CollectionRuntimeClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteNodeV1beta1CollectionRuntimeClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteNodeV1beta1CollectionRuntimeClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeletePolicyV1beta1CollectionPodSecurityPolicyResponse(resp *http.Response, span trace.Span) (res DeletePolicyV1beta1CollectionPodSecurityPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeletePolicyV1beta1CollectionPodSecurityPolicyUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteRbacAuthorizationV1CollectionClusterRoleResponse(resp *http.Response, span trace.Span) (res DeleteRbacAuthorizationV1CollectionClusterRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteRbacAuthorizationV1CollectionClusterRoleApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteRbacAuthorizationV1CollectionClusterRoleApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteRbacAuthorizationV1CollectionClusterRoleUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteRbacAuthorizationV1CollectionClusterRoleBindingResponse(resp *http.Response, span trace.Span) (res DeleteRbacAuthorizationV1CollectionClusterRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteRbacAuthorizationV1CollectionClusterRoleBindingUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteSchedulingV1CollectionPriorityClassResponse(resp *http.Response, span trace.Span) (res DeleteSchedulingV1CollectionPriorityClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteSchedulingV1CollectionPriorityClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteSchedulingV1CollectionPriorityClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteSchedulingV1CollectionPriorityClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteStorageV1CollectionCSIDriverResponse(resp *http.Response, span trace.Span) (res DeleteStorageV1CollectionCSIDriverRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteStorageV1CollectionCSIDriverApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteStorageV1CollectionCSIDriverApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteStorageV1CollectionCSIDriverUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteStorageV1CollectionCSINodeResponse(resp *http.Response, span trace.Span) (res DeleteStorageV1CollectionCSINodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteStorageV1CollectionCSINodeApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteStorageV1CollectionCSINodeApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteStorageV1CollectionCSINodeUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteStorageV1CollectionStorageClassResponse(resp *http.Response, span trace.Span) (res DeleteStorageV1CollectionStorageClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteStorageV1CollectionStorageClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteStorageV1CollectionStorageClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteStorageV1CollectionStorageClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteStorageV1CollectionVolumeAttachmentResponse(resp *http.Response, span trace.Span) (res DeleteStorageV1CollectionVolumeAttachmentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response DeleteStorageV1CollectionVolumeAttachmentApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "DeleteStorageV1CollectionVolumeAttachmentApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteStorageV1CollectionVolumeAttachmentUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAPIVersionsResponse(resp *http.Response, span trace.Span) (res GetAPIVersionsRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetAPIVersionsApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetAPIVersionsApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAPIVersionsUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAdmissionregistrationAPIGroupResponse(resp *http.Response, span trace.Span) (res GetAdmissionregistrationAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetAdmissionregistrationAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetAdmissionregistrationAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAdmissionregistrationAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAdmissionregistrationV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetAdmissionregistrationV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetAdmissionregistrationV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetAdmissionregistrationV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAdmissionregistrationV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetApiextensionsAPIGroupResponse(resp *http.Response, span trace.Span) (res GetApiextensionsAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetApiextensionsAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetApiextensionsAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetApiextensionsAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetApiextensionsV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetApiextensionsV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetApiextensionsV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetApiextensionsV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetApiextensionsV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetApiregistrationAPIGroupResponse(resp *http.Response, span trace.Span) (res GetApiregistrationAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetApiregistrationAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetApiregistrationAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetApiregistrationAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetApiregistrationV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetApiregistrationV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetApiregistrationV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetApiregistrationV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetApiregistrationV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAppsAPIGroupResponse(resp *http.Response, span trace.Span) (res GetAppsAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetAppsAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetAppsAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAppsAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAppsV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetAppsV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetAppsV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetAppsV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAppsV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAuthenticationAPIGroupResponse(resp *http.Response, span trace.Span) (res GetAuthenticationAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetAuthenticationAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetAuthenticationAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAuthenticationAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAuthenticationV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetAuthenticationV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetAuthenticationV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetAuthenticationV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAuthenticationV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAuthorizationAPIGroupResponse(resp *http.Response, span trace.Span) (res GetAuthorizationAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetAuthorizationAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetAuthorizationAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAuthorizationAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAuthorizationV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetAuthorizationV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetAuthorizationV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetAuthorizationV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAuthorizationV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAutoscalingAPIGroupResponse(resp *http.Response, span trace.Span) (res GetAutoscalingAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetAutoscalingAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetAutoscalingAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAutoscalingAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAutoscalingV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetAutoscalingV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetAutoscalingV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetAutoscalingV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAutoscalingV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAutoscalingV2beta1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetAutoscalingV2beta1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetAutoscalingV2beta1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetAutoscalingV2beta1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAutoscalingV2beta1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAutoscalingV2beta2APIResourcesResponse(resp *http.Response, span trace.Span) (res GetAutoscalingV2beta2APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetAutoscalingV2beta2APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetAutoscalingV2beta2APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAutoscalingV2beta2APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetBatchAPIGroupResponse(resp *http.Response, span trace.Span) (res GetBatchAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetBatchAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetBatchAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetBatchAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetBatchV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetBatchV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetBatchV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetBatchV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetBatchV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetBatchV1beta1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetBatchV1beta1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetBatchV1beta1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetBatchV1beta1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetBatchV1beta1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetCertificatesAPIGroupResponse(resp *http.Response, span trace.Span) (res GetCertificatesAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetCertificatesAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetCertificatesAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetCertificatesAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetCertificatesV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetCertificatesV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetCertificatesV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetCertificatesV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetCertificatesV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetCodeVersionResponse(resp *http.Response, span trace.Span) (res GetCodeVersionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response IoK8sApimachineryPkgVersionInfo
			if err := func() error {
				if err := response.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetCodeVersionUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetCoordinationAPIGroupResponse(resp *http.Response, span trace.Span) (res GetCoordinationAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetCoordinationAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetCoordinationAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetCoordinationAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetCoordinationV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetCoordinationV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetCoordinationV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetCoordinationV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetCoordinationV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetCoreAPIVersionsResponse(resp *http.Response, span trace.Span) (res GetCoreAPIVersionsRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetCoreAPIVersionsApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetCoreAPIVersionsApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetCoreAPIVersionsUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetCoreV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetCoreV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetCoreV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetCoreV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetCoreV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetDiscoveryAPIGroupResponse(resp *http.Response, span trace.Span) (res GetDiscoveryAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetDiscoveryAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetDiscoveryAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetDiscoveryAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetDiscoveryV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetDiscoveryV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetDiscoveryV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetDiscoveryV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetDiscoveryV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetDiscoveryV1beta1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetDiscoveryV1beta1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetDiscoveryV1beta1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetDiscoveryV1beta1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetDiscoveryV1beta1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetEventsAPIGroupResponse(resp *http.Response, span trace.Span) (res GetEventsAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetEventsAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetEventsAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetEventsAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetEventsV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetEventsV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetEventsV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetEventsV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetEventsV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetEventsV1beta1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetEventsV1beta1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetEventsV1beta1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetEventsV1beta1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetEventsV1beta1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetFlowcontrolApiserverAPIGroupResponse(resp *http.Response, span trace.Span) (res GetFlowcontrolApiserverAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetFlowcontrolApiserverAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetFlowcontrolApiserverAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetFlowcontrolApiserverAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetFlowcontrolApiserverV1beta1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetFlowcontrolApiserverV1beta1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetFlowcontrolApiserverV1beta1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetFlowcontrolApiserverV1beta1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetFlowcontrolApiserverV1beta1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetFlowcontrolApiserverV1beta2APIResourcesResponse(resp *http.Response, span trace.Span) (res GetFlowcontrolApiserverV1beta2APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetFlowcontrolApiserverV1beta2APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetFlowcontrolApiserverV1beta2APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetFlowcontrolApiserverV1beta2APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetInternalApiserverAPIGroupResponse(resp *http.Response, span trace.Span) (res GetInternalApiserverAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetInternalApiserverAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetInternalApiserverAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetInternalApiserverAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetInternalApiserverV1alpha1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetInternalApiserverV1alpha1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetInternalApiserverV1alpha1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetInternalApiserverV1alpha1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetInternalApiserverV1alpha1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetNetworkingAPIGroupResponse(resp *http.Response, span trace.Span) (res GetNetworkingAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetNetworkingAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetNetworkingAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetNetworkingAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetNetworkingV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetNetworkingV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetNetworkingV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetNetworkingV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetNetworkingV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetNodeAPIGroupResponse(resp *http.Response, span trace.Span) (res GetNodeAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetNodeAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetNodeAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetNodeAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetNodeV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetNodeV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetNodeV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetNodeV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetNodeV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetNodeV1alpha1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetNodeV1alpha1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetNodeV1alpha1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetNodeV1alpha1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetNodeV1alpha1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetNodeV1beta1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetNodeV1beta1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetNodeV1beta1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetNodeV1beta1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetNodeV1beta1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetPolicyAPIGroupResponse(resp *http.Response, span trace.Span) (res GetPolicyAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetPolicyAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetPolicyAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetPolicyAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetPolicyV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetPolicyV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetPolicyV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetPolicyV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetPolicyV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetPolicyV1beta1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetPolicyV1beta1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetPolicyV1beta1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetPolicyV1beta1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetPolicyV1beta1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetRbacAuthorizationAPIGroupResponse(resp *http.Response, span trace.Span) (res GetRbacAuthorizationAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetRbacAuthorizationAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetRbacAuthorizationAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetRbacAuthorizationAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetRbacAuthorizationV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetRbacAuthorizationV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetRbacAuthorizationV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetRbacAuthorizationV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetRbacAuthorizationV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetSchedulingAPIGroupResponse(resp *http.Response, span trace.Span) (res GetSchedulingAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetSchedulingAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetSchedulingAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetSchedulingAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetSchedulingV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetSchedulingV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetSchedulingV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetSchedulingV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetSchedulingV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetServiceAccountIssuerOpenIDConfigurationResponse(resp *http.Response, span trace.Span) (res GetServiceAccountIssuerOpenIDConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetServiceAccountIssuerOpenIDConfigurationOKApplicationJSON
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetServiceAccountIssuerOpenIDConfigurationOKApplicationJSON" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetServiceAccountIssuerOpenIDConfigurationUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetServiceAccountIssuerOpenIDKeysetResponse(resp *http.Response, span trace.Span) (res GetServiceAccountIssuerOpenIDKeysetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/jwk-set+json":
			return res, fmt.Errorf("application/jwk-set+json decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetServiceAccountIssuerOpenIDKeysetUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetStorageAPIGroupResponse(resp *http.Response, span trace.Span) (res GetStorageAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetStorageAPIGroupApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetStorageAPIGroupApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetStorageAPIGroupUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetStorageV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetStorageV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetStorageV1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetStorageV1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetStorageV1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetStorageV1alpha1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetStorageV1alpha1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetStorageV1alpha1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetStorageV1alpha1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetStorageV1alpha1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetStorageV1beta1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetStorageV1beta1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response GetStorageV1beta1APIResourcesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "GetStorageV1beta1APIResourcesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetStorageV1beta1APIResourcesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAdmissionregistrationV1MutatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res ListAdmissionregistrationV1MutatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAdmissionregistrationV1ValidatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res ListAdmissionregistrationV1ValidatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListApiextensionsV1CustomResourceDefinitionResponse(resp *http.Response, span trace.Span) (res ListApiextensionsV1CustomResourceDefinitionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListApiextensionsV1CustomResourceDefinitionApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListApiextensionsV1CustomResourceDefinitionApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListApiextensionsV1CustomResourceDefinitionUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListApiregistrationV1APIServiceResponse(resp *http.Response, span trace.Span) (res ListApiregistrationV1APIServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListApiregistrationV1APIServiceApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListApiregistrationV1APIServiceApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListApiregistrationV1APIServiceUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAppsV1ControllerRevisionForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListAppsV1ControllerRevisionForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListAppsV1ControllerRevisionForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListAppsV1ControllerRevisionForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAppsV1ControllerRevisionForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAppsV1DaemonSetForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListAppsV1DaemonSetForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListAppsV1DaemonSetForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListAppsV1DaemonSetForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAppsV1DaemonSetForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAppsV1DeploymentForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListAppsV1DeploymentForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListAppsV1DeploymentForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListAppsV1DeploymentForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAppsV1DeploymentForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAppsV1ReplicaSetForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListAppsV1ReplicaSetForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListAppsV1ReplicaSetForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListAppsV1ReplicaSetForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAppsV1ReplicaSetForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAppsV1StatefulSetForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListAppsV1StatefulSetForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListAppsV1StatefulSetForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListAppsV1StatefulSetForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAppsV1StatefulSetForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListBatchV1CronJobForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListBatchV1CronJobForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListBatchV1CronJobForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListBatchV1CronJobForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListBatchV1CronJobForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListBatchV1JobForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListBatchV1JobForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListBatchV1JobForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListBatchV1JobForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListBatchV1JobForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListBatchV1beta1CronJobForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListBatchV1beta1CronJobForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListBatchV1beta1CronJobForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListBatchV1beta1CronJobForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListBatchV1beta1CronJobForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCertificatesV1CertificateSigningRequestResponse(resp *http.Response, span trace.Span) (res ListCertificatesV1CertificateSigningRequestRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCertificatesV1CertificateSigningRequestApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCertificatesV1CertificateSigningRequestApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCertificatesV1CertificateSigningRequestUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoordinationV1LeaseForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoordinationV1LeaseForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCoordinationV1LeaseForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCoordinationV1LeaseForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoordinationV1LeaseForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1ComponentStatusResponse(resp *http.Response, span trace.Span) (res ListCoreV1ComponentStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCoreV1ComponentStatusApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCoreV1ComponentStatusApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1ComponentStatusUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1ConfigMapForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1ConfigMapForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCoreV1ConfigMapForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCoreV1ConfigMapForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1ConfigMapForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1EndpointsForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1EndpointsForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCoreV1EndpointsForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCoreV1EndpointsForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1EndpointsForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1EventForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1EventForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCoreV1EventForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCoreV1EventForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1EventForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1LimitRangeForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1LimitRangeForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCoreV1LimitRangeForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCoreV1LimitRangeForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1LimitRangeForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1NamespaceResponse(resp *http.Response, span trace.Span) (res ListCoreV1NamespaceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCoreV1NamespaceApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCoreV1NamespaceApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1NamespaceUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1NodeResponse(resp *http.Response, span trace.Span) (res ListCoreV1NodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCoreV1NodeApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCoreV1NodeApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1NodeUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1PersistentVolumeResponse(resp *http.Response, span trace.Span) (res ListCoreV1PersistentVolumeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCoreV1PersistentVolumeApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCoreV1PersistentVolumeApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1PersistentVolumeUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1PersistentVolumeClaimForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1PersistentVolumeClaimForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1PersistentVolumeClaimForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1PodForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1PodForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCoreV1PodForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCoreV1PodForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1PodForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1PodTemplateForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1PodTemplateForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCoreV1PodTemplateForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCoreV1PodTemplateForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1PodTemplateForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1ReplicationControllerForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1ReplicationControllerForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCoreV1ReplicationControllerForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCoreV1ReplicationControllerForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1ReplicationControllerForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1ResourceQuotaForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1ResourceQuotaForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCoreV1ResourceQuotaForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCoreV1ResourceQuotaForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1ResourceQuotaForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1SecretForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1SecretForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCoreV1SecretForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCoreV1SecretForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1SecretForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1ServiceAccountForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1ServiceAccountForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCoreV1ServiceAccountForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCoreV1ServiceAccountForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1ServiceAccountForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1ServiceForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1ServiceForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListCoreV1ServiceForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListCoreV1ServiceForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1ServiceForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListDiscoveryV1EndpointSliceForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListDiscoveryV1EndpointSliceForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListDiscoveryV1EndpointSliceForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListDiscoveryV1EndpointSliceForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListDiscoveryV1EndpointSliceForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListDiscoveryV1beta1EndpointSliceForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListDiscoveryV1beta1EndpointSliceForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListDiscoveryV1beta1EndpointSliceForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListEventsV1EventForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListEventsV1EventForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListEventsV1EventForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListEventsV1EventForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListEventsV1EventForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListEventsV1beta1EventForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListEventsV1beta1EventForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListEventsV1beta1EventForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListEventsV1beta1EventForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListEventsV1beta1EventForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListFlowcontrolApiserverV1beta1FlowSchemaResponse(resp *http.Response, span trace.Span) (res ListFlowcontrolApiserverV1beta1FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListFlowcontrolApiserverV1beta1FlowSchemaUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListFlowcontrolApiserverV1beta2FlowSchemaResponse(resp *http.Response, span trace.Span) (res ListFlowcontrolApiserverV1beta2FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListFlowcontrolApiserverV1beta2FlowSchemaUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListInternalApiserverV1alpha1StorageVersionResponse(resp *http.Response, span trace.Span) (res ListInternalApiserverV1alpha1StorageVersionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListInternalApiserverV1alpha1StorageVersionApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListInternalApiserverV1alpha1StorageVersionApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListInternalApiserverV1alpha1StorageVersionUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListNetworkingV1IngressClassResponse(resp *http.Response, span trace.Span) (res ListNetworkingV1IngressClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListNetworkingV1IngressClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListNetworkingV1IngressClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListNetworkingV1IngressClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListNetworkingV1IngressForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListNetworkingV1IngressForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListNetworkingV1IngressForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListNetworkingV1IngressForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListNetworkingV1IngressForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListNetworkingV1NetworkPolicyForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListNetworkingV1NetworkPolicyForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListNetworkingV1NetworkPolicyForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListNetworkingV1NetworkPolicyForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListNetworkingV1NetworkPolicyForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListNodeV1RuntimeClassResponse(resp *http.Response, span trace.Span) (res ListNodeV1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListNodeV1RuntimeClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListNodeV1RuntimeClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListNodeV1RuntimeClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListNodeV1alpha1RuntimeClassResponse(resp *http.Response, span trace.Span) (res ListNodeV1alpha1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListNodeV1alpha1RuntimeClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListNodeV1alpha1RuntimeClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListNodeV1alpha1RuntimeClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListNodeV1beta1RuntimeClassResponse(resp *http.Response, span trace.Span) (res ListNodeV1beta1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListNodeV1beta1RuntimeClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListNodeV1beta1RuntimeClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListNodeV1beta1RuntimeClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListPolicyV1PodDisruptionBudgetForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListPolicyV1PodDisruptionBudgetForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListPolicyV1PodDisruptionBudgetForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListPolicyV1beta1PodDisruptionBudgetForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListPolicyV1beta1PodSecurityPolicyResponse(resp *http.Response, span trace.Span) (res ListPolicyV1beta1PodSecurityPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListPolicyV1beta1PodSecurityPolicyApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListPolicyV1beta1PodSecurityPolicyApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListPolicyV1beta1PodSecurityPolicyUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListRbacAuthorizationV1ClusterRoleResponse(resp *http.Response, span trace.Span) (res ListRbacAuthorizationV1ClusterRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListRbacAuthorizationV1ClusterRoleApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListRbacAuthorizationV1ClusterRoleApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListRbacAuthorizationV1ClusterRoleUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListRbacAuthorizationV1ClusterRoleBindingResponse(resp *http.Response, span trace.Span) (res ListRbacAuthorizationV1ClusterRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListRbacAuthorizationV1ClusterRoleBindingUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListRbacAuthorizationV1RoleBindingForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListRbacAuthorizationV1RoleBindingForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListRbacAuthorizationV1RoleBindingForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListRbacAuthorizationV1RoleForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListRbacAuthorizationV1RoleForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListRbacAuthorizationV1RoleForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListRbacAuthorizationV1RoleForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListRbacAuthorizationV1RoleForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListSchedulingV1PriorityClassResponse(resp *http.Response, span trace.Span) (res ListSchedulingV1PriorityClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListSchedulingV1PriorityClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListSchedulingV1PriorityClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListSchedulingV1PriorityClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListStorageV1CSIDriverResponse(resp *http.Response, span trace.Span) (res ListStorageV1CSIDriverRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListStorageV1CSIDriverApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListStorageV1CSIDriverApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListStorageV1CSIDriverUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListStorageV1CSINodeResponse(resp *http.Response, span trace.Span) (res ListStorageV1CSINodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListStorageV1CSINodeApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListStorageV1CSINodeApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListStorageV1CSINodeUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListStorageV1StorageClassResponse(resp *http.Response, span trace.Span) (res ListStorageV1StorageClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListStorageV1StorageClassApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListStorageV1StorageClassApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListStorageV1StorageClassUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListStorageV1VolumeAttachmentResponse(resp *http.Response, span trace.Span) (res ListStorageV1VolumeAttachmentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListStorageV1VolumeAttachmentApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListStorageV1VolumeAttachmentApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListStorageV1VolumeAttachmentUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListStorageV1alpha1CSIStorageCapacityForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListStorageV1alpha1CSIStorageCapacityForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListStorageV1alpha1CSIStorageCapacityForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListStorageV1beta1CSIStorageCapacityForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListStorageV1beta1CSIStorageCapacityForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListStorageV1beta1CSIStorageCapacityForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeLogFileListHandlerResponse(resp *http.Response, span trace.Span) (res LogFileListHandlerUnauthorized, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 401:
		return LogFileListHandlerUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAdmissionregistrationV1MutatingWebhookConfigurationListResponse(resp *http.Response, span trace.Span) (res WatchAdmissionregistrationV1MutatingWebhookConfigurationListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAdmissionregistrationV1MutatingWebhookConfigurationListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAdmissionregistrationV1ValidatingWebhookConfigurationListResponse(resp *http.Response, span trace.Span) (res WatchAdmissionregistrationV1ValidatingWebhookConfigurationListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAdmissionregistrationV1ValidatingWebhookConfigurationListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchApiextensionsV1CustomResourceDefinitionListResponse(resp *http.Response, span trace.Span) (res WatchApiextensionsV1CustomResourceDefinitionListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchApiextensionsV1CustomResourceDefinitionListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchApiextensionsV1CustomResourceDefinitionListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchApiextensionsV1CustomResourceDefinitionListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchApiregistrationV1APIServiceListResponse(resp *http.Response, span trace.Span) (res WatchApiregistrationV1APIServiceListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchApiregistrationV1APIServiceListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchApiregistrationV1APIServiceListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchApiregistrationV1APIServiceListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1ControllerRevisionListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchAppsV1ControllerRevisionListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchAppsV1ControllerRevisionListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchAppsV1ControllerRevisionListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1ControllerRevisionListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1DaemonSetListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchAppsV1DaemonSetListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchAppsV1DaemonSetListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchAppsV1DaemonSetListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1DaemonSetListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1DeploymentListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchAppsV1DeploymentListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchAppsV1DeploymentListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchAppsV1DeploymentListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1DeploymentListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1ReplicaSetListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchAppsV1ReplicaSetListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchAppsV1ReplicaSetListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchAppsV1ReplicaSetListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1ReplicaSetListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1StatefulSetListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchAppsV1StatefulSetListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchAppsV1StatefulSetListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchAppsV1StatefulSetListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1StatefulSetListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchBatchV1CronJobListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchBatchV1CronJobListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchBatchV1CronJobListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchBatchV1CronJobListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchBatchV1CronJobListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchBatchV1JobListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchBatchV1JobListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchBatchV1JobListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchBatchV1JobListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchBatchV1JobListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchBatchV1beta1CronJobListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchBatchV1beta1CronJobListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchBatchV1beta1CronJobListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchBatchV1beta1CronJobListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchBatchV1beta1CronJobListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCertificatesV1CertificateSigningRequestListResponse(resp *http.Response, span trace.Span) (res WatchCertificatesV1CertificateSigningRequestListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchCertificatesV1CertificateSigningRequestListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchCertificatesV1CertificateSigningRequestListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCertificatesV1CertificateSigningRequestListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoordinationV1LeaseListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoordinationV1LeaseListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchCoordinationV1LeaseListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchCoordinationV1LeaseListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoordinationV1LeaseListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1ConfigMapListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1ConfigMapListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchCoreV1ConfigMapListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchCoreV1ConfigMapListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1ConfigMapListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1EndpointsListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1EndpointsListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchCoreV1EndpointsListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchCoreV1EndpointsListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1EndpointsListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1EventListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1EventListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchCoreV1EventListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchCoreV1EventListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1EventListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1LimitRangeListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1LimitRangeListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchCoreV1LimitRangeListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchCoreV1LimitRangeListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1LimitRangeListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespaceListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespaceListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespaceListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchCoreV1NamespaceListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespaceListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NodeListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NodeListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchCoreV1NodeListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchCoreV1NodeListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NodeListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1PersistentVolumeClaimListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1PersistentVolumeClaimListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1PersistentVolumeClaimListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1PersistentVolumeListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1PersistentVolumeListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchCoreV1PersistentVolumeListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchCoreV1PersistentVolumeListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1PersistentVolumeListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1PodListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1PodListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchCoreV1PodListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchCoreV1PodListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1PodListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1PodTemplateListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1PodTemplateListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchCoreV1PodTemplateListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchCoreV1PodTemplateListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1PodTemplateListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1ReplicationControllerListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1ReplicationControllerListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchCoreV1ReplicationControllerListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchCoreV1ReplicationControllerListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1ReplicationControllerListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1ResourceQuotaListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1ResourceQuotaListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchCoreV1ResourceQuotaListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchCoreV1ResourceQuotaListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1ResourceQuotaListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1SecretListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1SecretListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchCoreV1SecretListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchCoreV1SecretListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1SecretListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1ServiceAccountListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1ServiceAccountListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchCoreV1ServiceAccountListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchCoreV1ServiceAccountListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1ServiceAccountListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1ServiceListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1ServiceListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchCoreV1ServiceListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchCoreV1ServiceListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1ServiceListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchDiscoveryV1EndpointSliceListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchDiscoveryV1EndpointSliceListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchDiscoveryV1EndpointSliceListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchDiscoveryV1beta1EndpointSliceListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchEventsV1EventListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchEventsV1EventListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchEventsV1EventListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchEventsV1EventListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchEventsV1EventListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchEventsV1beta1EventListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchEventsV1beta1EventListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchEventsV1beta1EventListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchEventsV1beta1EventListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchEventsV1beta1EventListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchFlowcontrolApiserverV1beta1FlowSchemaListResponse(resp *http.Response, span trace.Span) (res WatchFlowcontrolApiserverV1beta1FlowSchemaListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchFlowcontrolApiserverV1beta1FlowSchemaListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListResponse(resp *http.Response, span trace.Span) (res WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchFlowcontrolApiserverV1beta2FlowSchemaListResponse(resp *http.Response, span trace.Span) (res WatchFlowcontrolApiserverV1beta2FlowSchemaListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchFlowcontrolApiserverV1beta2FlowSchemaListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListResponse(resp *http.Response, span trace.Span) (res WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchInternalApiserverV1alpha1StorageVersionListResponse(resp *http.Response, span trace.Span) (res WatchInternalApiserverV1alpha1StorageVersionListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchInternalApiserverV1alpha1StorageVersionListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchInternalApiserverV1alpha1StorageVersionListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchInternalApiserverV1alpha1StorageVersionListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNetworkingV1IngressClassListResponse(resp *http.Response, span trace.Span) (res WatchNetworkingV1IngressClassListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchNetworkingV1IngressClassListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchNetworkingV1IngressClassListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNetworkingV1IngressClassListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNetworkingV1IngressListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchNetworkingV1IngressListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchNetworkingV1IngressListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchNetworkingV1IngressListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNetworkingV1IngressListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNetworkingV1NetworkPolicyListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchNetworkingV1NetworkPolicyListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNetworkingV1NetworkPolicyListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNodeV1RuntimeClassListResponse(resp *http.Response, span trace.Span) (res WatchNodeV1RuntimeClassListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchNodeV1RuntimeClassListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchNodeV1RuntimeClassListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNodeV1RuntimeClassListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNodeV1alpha1RuntimeClassListResponse(resp *http.Response, span trace.Span) (res WatchNodeV1alpha1RuntimeClassListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchNodeV1alpha1RuntimeClassListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchNodeV1alpha1RuntimeClassListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNodeV1alpha1RuntimeClassListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNodeV1beta1RuntimeClassListResponse(resp *http.Response, span trace.Span) (res WatchNodeV1beta1RuntimeClassListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchNodeV1beta1RuntimeClassListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchNodeV1beta1RuntimeClassListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNodeV1beta1RuntimeClassListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchPolicyV1PodDisruptionBudgetListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchPolicyV1PodDisruptionBudgetListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchPolicyV1PodDisruptionBudgetListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchPolicyV1beta1PodSecurityPolicyListResponse(resp *http.Response, span trace.Span) (res WatchPolicyV1beta1PodSecurityPolicyListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchPolicyV1beta1PodSecurityPolicyListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchPolicyV1beta1PodSecurityPolicyListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchPolicyV1beta1PodSecurityPolicyListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchRbacAuthorizationV1ClusterRoleBindingListResponse(resp *http.Response, span trace.Span) (res WatchRbacAuthorizationV1ClusterRoleBindingListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchRbacAuthorizationV1ClusterRoleBindingListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchRbacAuthorizationV1ClusterRoleBindingListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchRbacAuthorizationV1ClusterRoleBindingListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchRbacAuthorizationV1ClusterRoleListResponse(resp *http.Response, span trace.Span) (res WatchRbacAuthorizationV1ClusterRoleListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchRbacAuthorizationV1ClusterRoleListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchRbacAuthorizationV1ClusterRoleListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchRbacAuthorizationV1ClusterRoleListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchRbacAuthorizationV1RoleBindingListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchRbacAuthorizationV1RoleBindingListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchRbacAuthorizationV1RoleBindingListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchRbacAuthorizationV1RoleListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchRbacAuthorizationV1RoleListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchRbacAuthorizationV1RoleListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchSchedulingV1PriorityClassListResponse(resp *http.Response, span trace.Span) (res WatchSchedulingV1PriorityClassListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchSchedulingV1PriorityClassListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchSchedulingV1PriorityClassListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchSchedulingV1PriorityClassListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1CSIDriverListResponse(resp *http.Response, span trace.Span) (res WatchStorageV1CSIDriverListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchStorageV1CSIDriverListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchStorageV1CSIDriverListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1CSIDriverListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1CSINodeListResponse(resp *http.Response, span trace.Span) (res WatchStorageV1CSINodeListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchStorageV1CSINodeListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchStorageV1CSINodeListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1CSINodeListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1StorageClassListResponse(resp *http.Response, span trace.Span) (res WatchStorageV1StorageClassListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchStorageV1StorageClassListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchStorageV1StorageClassListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1StorageClassListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1VolumeAttachmentListResponse(resp *http.Response, span trace.Span) (res WatchStorageV1VolumeAttachmentListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchStorageV1VolumeAttachmentListApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchStorageV1VolumeAttachmentListApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1VolumeAttachmentListUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1beta1CSIStorageCapacityListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			i := json.GetIter()
			defer json.PutIter(i)
			i.ResetBytes(buf.Bytes())

			var response WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationJSONOK
			if err := func() error {
				if err := fmt.Errorf(`decoding of "WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationJSONOK" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, fmt.Errorf("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, fmt.Errorf("application/yaml decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesUnauthorized{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}
