// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/errors"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
)

func decodeConnectCoreV1DeleteNamespacedPodProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1DeleteNamespacedPodProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1DeleteNamespacedPodProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1DeleteNamespacedPodProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1DeleteNamespacedPodProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1DeleteNamespacedPodProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1DeleteNamespacedServiceProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1DeleteNamespacedServiceProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1DeleteNamespacedServiceProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1DeleteNamespacedServiceProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1DeleteNamespacedServiceProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1DeleteNamespacedServiceProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1DeleteNodeProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1DeleteNodeProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1DeleteNodeProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1DeleteNodeProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1DeleteNodeProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1DeleteNodeProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1GetNamespacedPodAttachResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1GetNamespacedPodAttachRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1GetNamespacedPodAttachUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1GetNamespacedPodExecResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1GetNamespacedPodExecRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1GetNamespacedPodExecUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1GetNamespacedPodPortforwardResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1GetNamespacedPodPortforwardRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1GetNamespacedPodPortforwardUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1GetNamespacedPodProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1GetNamespacedPodProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1GetNamespacedPodProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1GetNamespacedPodProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1GetNamespacedPodProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1GetNamespacedPodProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1GetNamespacedServiceProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1GetNamespacedServiceProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1GetNamespacedServiceProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1GetNamespacedServiceProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1GetNamespacedServiceProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1GetNamespacedServiceProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1GetNodeProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1GetNodeProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1GetNodeProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1GetNodeProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1GetNodeProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1GetNodeProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1HeadNamespacedPodProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1HeadNamespacedPodProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1HeadNamespacedPodProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1HeadNamespacedPodProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1HeadNamespacedPodProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1HeadNamespacedPodProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1HeadNamespacedServiceProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1HeadNamespacedServiceProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1HeadNamespacedServiceProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1HeadNamespacedServiceProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1HeadNamespacedServiceProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1HeadNamespacedServiceProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1HeadNodeProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1HeadNodeProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1HeadNodeProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1HeadNodeProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1HeadNodeProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1HeadNodeProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1OptionsNamespacedPodProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1OptionsNamespacedPodProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1OptionsNamespacedPodProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1OptionsNamespacedPodProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1OptionsNamespacedPodProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1OptionsNamespacedPodProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1OptionsNamespacedServiceProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1OptionsNamespacedServiceProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1OptionsNamespacedServiceProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1OptionsNamespacedServiceProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1OptionsNamespacedServiceProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1OptionsNamespacedServiceProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1OptionsNodeProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1OptionsNodeProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1OptionsNodeProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1OptionsNodeProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1OptionsNodeProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1OptionsNodeProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PatchNamespacedPodProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PatchNamespacedPodProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PatchNamespacedPodProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PatchNamespacedPodProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PatchNamespacedPodProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PatchNamespacedPodProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PatchNamespacedServiceProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PatchNamespacedServiceProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PatchNamespacedServiceProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PatchNamespacedServiceProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PatchNamespacedServiceProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PatchNamespacedServiceProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PatchNodeProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PatchNodeProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PatchNodeProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PatchNodeProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PatchNodeProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PatchNodeProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PostNamespacedPodAttachResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PostNamespacedPodAttachRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PostNamespacedPodAttachUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PostNamespacedPodExecResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PostNamespacedPodExecRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PostNamespacedPodExecUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PostNamespacedPodPortforwardResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PostNamespacedPodPortforwardRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PostNamespacedPodPortforwardUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PostNamespacedPodProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PostNamespacedPodProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PostNamespacedPodProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PostNamespacedPodProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PostNamespacedPodProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PostNamespacedPodProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PostNamespacedServiceProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PostNamespacedServiceProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PostNamespacedServiceProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PostNamespacedServiceProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PostNamespacedServiceProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PostNamespacedServiceProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PostNodeProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PostNodeProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PostNodeProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PostNodeProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PostNodeProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PostNodeProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PutNamespacedPodProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PutNamespacedPodProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PutNamespacedPodProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PutNamespacedPodProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PutNamespacedPodProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PutNamespacedPodProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PutNamespacedServiceProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PutNamespacedServiceProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PutNamespacedServiceProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PutNamespacedServiceProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PutNamespacedServiceProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PutNamespacedServiceProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PutNodeProxyResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PutNodeProxyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PutNodeProxyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeConnectCoreV1PutNodeProxyWithPathResponse(resp *http.Response, span trace.Span) (res ConnectCoreV1PutNodeProxyWithPathRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "*/*":
			return res, errors.New("*/* decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ConnectCoreV1PutNodeProxyWithPathUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAdmissionregistrationV1MutatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res CreateAdmissionregistrationV1MutatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAdmissionregistrationV1ValidatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res CreateAdmissionregistrationV1ValidatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateApiextensionsV1CustomResourceDefinitionResponse(resp *http.Response, span trace.Span) (res CreateApiextensionsV1CustomResourceDefinitionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateApiextensionsV1CustomResourceDefinitionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateApiextensionsV1CustomResourceDefinitionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateApiextensionsV1CustomResourceDefinitionApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateApiextensionsV1CustomResourceDefinitionApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateApiextensionsV1CustomResourceDefinitionApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateApiextensionsV1CustomResourceDefinitionApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateApiextensionsV1CustomResourceDefinitionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateApiregistrationV1APIServiceResponse(resp *http.Response, span trace.Span) (res CreateApiregistrationV1APIServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateApiregistrationV1APIServiceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateApiregistrationV1APIServiceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateApiregistrationV1APIServiceApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateApiregistrationV1APIServiceApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateApiregistrationV1APIServiceApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateApiregistrationV1APIServiceApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateApiregistrationV1APIServiceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAppsV1NamespacedControllerRevisionResponse(resp *http.Response, span trace.Span) (res CreateAppsV1NamespacedControllerRevisionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAppsV1NamespacedControllerRevisionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateAppsV1NamespacedControllerRevisionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAppsV1NamespacedControllerRevisionApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateAppsV1NamespacedControllerRevisionApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAppsV1NamespacedControllerRevisionApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateAppsV1NamespacedControllerRevisionApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAppsV1NamespacedControllerRevisionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAppsV1NamespacedDaemonSetResponse(resp *http.Response, span trace.Span) (res CreateAppsV1NamespacedDaemonSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAppsV1NamespacedDaemonSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateAppsV1NamespacedDaemonSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAppsV1NamespacedDaemonSetApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateAppsV1NamespacedDaemonSetApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAppsV1NamespacedDaemonSetApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateAppsV1NamespacedDaemonSetApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAppsV1NamespacedDaemonSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAppsV1NamespacedDeploymentResponse(resp *http.Response, span trace.Span) (res CreateAppsV1NamespacedDeploymentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAppsV1NamespacedDeploymentApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateAppsV1NamespacedDeploymentApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAppsV1NamespacedDeploymentApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateAppsV1NamespacedDeploymentApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAppsV1NamespacedDeploymentApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateAppsV1NamespacedDeploymentApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAppsV1NamespacedDeploymentUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAppsV1NamespacedReplicaSetResponse(resp *http.Response, span trace.Span) (res CreateAppsV1NamespacedReplicaSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAppsV1NamespacedReplicaSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateAppsV1NamespacedReplicaSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAppsV1NamespacedReplicaSetApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateAppsV1NamespacedReplicaSetApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAppsV1NamespacedReplicaSetApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateAppsV1NamespacedReplicaSetApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAppsV1NamespacedReplicaSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAppsV1NamespacedStatefulSetResponse(resp *http.Response, span trace.Span) (res CreateAppsV1NamespacedStatefulSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAppsV1NamespacedStatefulSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateAppsV1NamespacedStatefulSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAppsV1NamespacedStatefulSetApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateAppsV1NamespacedStatefulSetApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAppsV1NamespacedStatefulSetApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateAppsV1NamespacedStatefulSetApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAppsV1NamespacedStatefulSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAuthenticationV1TokenReviewResponse(resp *http.Response, span trace.Span) (res CreateAuthenticationV1TokenReviewRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAuthenticationV1TokenReviewApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateAuthenticationV1TokenReviewApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAuthenticationV1TokenReviewApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateAuthenticationV1TokenReviewApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAuthenticationV1TokenReviewApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateAuthenticationV1TokenReviewApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAuthenticationV1TokenReviewUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAuthorizationV1NamespacedLocalSubjectAccessReviewResponse(resp *http.Response, span trace.Span) (res CreateAuthorizationV1NamespacedLocalSubjectAccessReviewRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1NamespacedLocalSubjectAccessReviewApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateAuthorizationV1NamespacedLocalSubjectAccessReviewApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1NamespacedLocalSubjectAccessReviewApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateAuthorizationV1NamespacedLocalSubjectAccessReviewApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1NamespacedLocalSubjectAccessReviewApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateAuthorizationV1NamespacedLocalSubjectAccessReviewApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAuthorizationV1NamespacedLocalSubjectAccessReviewUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAuthorizationV1SelfSubjectAccessReviewResponse(resp *http.Response, span trace.Span) (res CreateAuthorizationV1SelfSubjectAccessReviewRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAuthorizationV1SelfSubjectAccessReviewUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAuthorizationV1SelfSubjectRulesReviewResponse(resp *http.Response, span trace.Span) (res CreateAuthorizationV1SelfSubjectRulesReviewRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAuthorizationV1SelfSubjectRulesReviewUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAuthorizationV1SubjectAccessReviewResponse(resp *http.Response, span trace.Span) (res CreateAuthorizationV1SubjectAccessReviewRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SubjectAccessReviewApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateAuthorizationV1SubjectAccessReviewApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SubjectAccessReviewApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateAuthorizationV1SubjectAccessReviewApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAuthorizationV1SubjectAccessReviewApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateAuthorizationV1SubjectAccessReviewApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAuthorizationV1SubjectAccessReviewUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAutoscalingV1NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res CreateAutoscalingV1NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateBatchV1NamespacedCronJobResponse(resp *http.Response, span trace.Span) (res CreateBatchV1NamespacedCronJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateBatchV1NamespacedCronJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateBatchV1NamespacedCronJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateBatchV1NamespacedCronJobApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateBatchV1NamespacedCronJobApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateBatchV1NamespacedCronJobApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateBatchV1NamespacedCronJobApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateBatchV1NamespacedCronJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateBatchV1NamespacedJobResponse(resp *http.Response, span trace.Span) (res CreateBatchV1NamespacedJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateBatchV1NamespacedJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateBatchV1NamespacedJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateBatchV1NamespacedJobApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateBatchV1NamespacedJobApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateBatchV1NamespacedJobApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateBatchV1NamespacedJobApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateBatchV1NamespacedJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateBatchV1beta1NamespacedCronJobResponse(resp *http.Response, span trace.Span) (res CreateBatchV1beta1NamespacedCronJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateBatchV1beta1NamespacedCronJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateBatchV1beta1NamespacedCronJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateBatchV1beta1NamespacedCronJobApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateBatchV1beta1NamespacedCronJobApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateBatchV1beta1NamespacedCronJobApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateBatchV1beta1NamespacedCronJobApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateBatchV1beta1NamespacedCronJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCertificatesV1CertificateSigningRequestResponse(resp *http.Response, span trace.Span) (res CreateCertificatesV1CertificateSigningRequestRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCertificatesV1CertificateSigningRequestApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCertificatesV1CertificateSigningRequestApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCertificatesV1CertificateSigningRequestApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCertificatesV1CertificateSigningRequestApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCertificatesV1CertificateSigningRequestApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCertificatesV1CertificateSigningRequestApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCertificatesV1CertificateSigningRequestUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoordinationV1NamespacedLeaseResponse(resp *http.Response, span trace.Span) (res CreateCoordinationV1NamespacedLeaseRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoordinationV1NamespacedLeaseApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoordinationV1NamespacedLeaseApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoordinationV1NamespacedLeaseApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoordinationV1NamespacedLeaseApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoordinationV1NamespacedLeaseApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoordinationV1NamespacedLeaseApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoordinationV1NamespacedLeaseUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespaceResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespaceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespaceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespaceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespaceApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespaceApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespaceApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespaceApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespaceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespacedBindingResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespacedBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedBindingApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedBindingApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedBindingApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedBindingApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespacedBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespacedConfigMapResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespacedConfigMapRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedConfigMapApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedConfigMapApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedConfigMapApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedConfigMapApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedConfigMapApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedConfigMapApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespacedConfigMapUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespacedEndpointsResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespacedEndpointsRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedEndpointsApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedEndpointsApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedEndpointsApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedEndpointsApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedEndpointsApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedEndpointsApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespacedEndpointsUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespacedEventResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedEventApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedEventApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedEventApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedEventApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespacedLimitRangeResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespacedLimitRangeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedLimitRangeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedLimitRangeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedLimitRangeApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedLimitRangeApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedLimitRangeApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedLimitRangeApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespacedLimitRangeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespacedPersistentVolumeClaimResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespacedPersistentVolumeClaimRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedPersistentVolumeClaimApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedPersistentVolumeClaimApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedPersistentVolumeClaimApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedPersistentVolumeClaimApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespacedPersistentVolumeClaimUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespacedPodResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespacedPodRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedPodApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedPodApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedPodApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedPodApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedPodApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedPodApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespacedPodUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespacedPodBindingResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespacedPodBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedPodBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedPodBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedPodBindingApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedPodBindingApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedPodBindingApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedPodBindingApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespacedPodBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespacedPodEvictionResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespacedPodEvictionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedPodEvictionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedPodEvictionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedPodEvictionApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedPodEvictionApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedPodEvictionApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedPodEvictionApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespacedPodEvictionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespacedPodTemplateResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespacedPodTemplateRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedPodTemplateApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedPodTemplateApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedPodTemplateApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedPodTemplateApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedPodTemplateApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedPodTemplateApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespacedPodTemplateUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespacedReplicationControllerResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespacedReplicationControllerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedReplicationControllerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedReplicationControllerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedReplicationControllerApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedReplicationControllerApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedReplicationControllerApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedReplicationControllerApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespacedReplicationControllerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespacedResourceQuotaResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespacedResourceQuotaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedResourceQuotaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedResourceQuotaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedResourceQuotaApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedResourceQuotaApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedResourceQuotaApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedResourceQuotaApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespacedResourceQuotaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespacedSecretResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespacedSecretRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedSecretApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedSecretApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedSecretApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedSecretApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedSecretApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedSecretApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespacedSecretUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespacedServiceResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespacedServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedServiceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedServiceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedServiceApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedServiceApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedServiceApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedServiceApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespacedServiceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespacedServiceAccountResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespacedServiceAccountRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedServiceAccountApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedServiceAccountApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedServiceAccountApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedServiceAccountApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedServiceAccountApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedServiceAccountApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespacedServiceAccountUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NamespacedServiceAccountTokenResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NamespacedServiceAccountTokenRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedServiceAccountTokenApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedServiceAccountTokenApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedServiceAccountTokenApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedServiceAccountTokenApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NamespacedServiceAccountTokenApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NamespacedServiceAccountTokenApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NamespacedServiceAccountTokenUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1NodeResponse(resp *http.Response, span trace.Span) (res CreateCoreV1NodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NodeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NodeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NodeApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NodeApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1NodeApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1NodeApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1NodeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateCoreV1PersistentVolumeResponse(resp *http.Response, span trace.Span) (res CreateCoreV1PersistentVolumeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1PersistentVolumeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1PersistentVolumeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1PersistentVolumeApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1PersistentVolumeApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateCoreV1PersistentVolumeApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateCoreV1PersistentVolumeApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateCoreV1PersistentVolumeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateDiscoveryV1NamespacedEndpointSliceResponse(resp *http.Response, span trace.Span) (res CreateDiscoveryV1NamespacedEndpointSliceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateDiscoveryV1NamespacedEndpointSliceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateDiscoveryV1NamespacedEndpointSliceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateDiscoveryV1NamespacedEndpointSliceApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateDiscoveryV1NamespacedEndpointSliceApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateDiscoveryV1NamespacedEndpointSliceApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateDiscoveryV1NamespacedEndpointSliceApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateDiscoveryV1NamespacedEndpointSliceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateDiscoveryV1beta1NamespacedEndpointSliceResponse(resp *http.Response, span trace.Span) (res CreateDiscoveryV1beta1NamespacedEndpointSliceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateDiscoveryV1beta1NamespacedEndpointSliceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateEventsV1NamespacedEventResponse(resp *http.Response, span trace.Span) (res CreateEventsV1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateEventsV1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateEventsV1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateEventsV1NamespacedEventApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateEventsV1NamespacedEventApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateEventsV1NamespacedEventApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateEventsV1NamespacedEventApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateEventsV1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateEventsV1beta1NamespacedEventResponse(resp *http.Response, span trace.Span) (res CreateEventsV1beta1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateEventsV1beta1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateEventsV1beta1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateEventsV1beta1NamespacedEventApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateEventsV1beta1NamespacedEventApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateEventsV1beta1NamespacedEventApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateEventsV1beta1NamespacedEventApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateEventsV1beta1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateFlowcontrolApiserverV1beta1FlowSchemaResponse(resp *http.Response, span trace.Span) (res CreateFlowcontrolApiserverV1beta1FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateFlowcontrolApiserverV1beta1FlowSchemaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateFlowcontrolApiserverV1beta2FlowSchemaResponse(resp *http.Response, span trace.Span) (res CreateFlowcontrolApiserverV1beta2FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateFlowcontrolApiserverV1beta2FlowSchemaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateInternalApiserverV1alpha1StorageVersionResponse(resp *http.Response, span trace.Span) (res CreateInternalApiserverV1alpha1StorageVersionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateInternalApiserverV1alpha1StorageVersionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateInternalApiserverV1alpha1StorageVersionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateInternalApiserverV1alpha1StorageVersionApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateInternalApiserverV1alpha1StorageVersionApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateInternalApiserverV1alpha1StorageVersionApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateInternalApiserverV1alpha1StorageVersionApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateInternalApiserverV1alpha1StorageVersionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateNetworkingV1IngressClassResponse(resp *http.Response, span trace.Span) (res CreateNetworkingV1IngressClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNetworkingV1IngressClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateNetworkingV1IngressClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNetworkingV1IngressClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateNetworkingV1IngressClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNetworkingV1IngressClassApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateNetworkingV1IngressClassApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateNetworkingV1IngressClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateNetworkingV1NamespacedIngressResponse(resp *http.Response, span trace.Span) (res CreateNetworkingV1NamespacedIngressRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNetworkingV1NamespacedIngressApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateNetworkingV1NamespacedIngressApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNetworkingV1NamespacedIngressApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateNetworkingV1NamespacedIngressApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNetworkingV1NamespacedIngressApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateNetworkingV1NamespacedIngressApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateNetworkingV1NamespacedIngressUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateNetworkingV1NamespacedNetworkPolicyResponse(resp *http.Response, span trace.Span) (res CreateNetworkingV1NamespacedNetworkPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNetworkingV1NamespacedNetworkPolicyApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateNetworkingV1NamespacedNetworkPolicyApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNetworkingV1NamespacedNetworkPolicyApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateNetworkingV1NamespacedNetworkPolicyApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNetworkingV1NamespacedNetworkPolicyApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateNetworkingV1NamespacedNetworkPolicyApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateNetworkingV1NamespacedNetworkPolicyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateNodeV1RuntimeClassResponse(resp *http.Response, span trace.Span) (res CreateNodeV1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNodeV1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateNodeV1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNodeV1RuntimeClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateNodeV1RuntimeClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNodeV1RuntimeClassApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateNodeV1RuntimeClassApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateNodeV1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateNodeV1alpha1RuntimeClassResponse(resp *http.Response, span trace.Span) (res CreateNodeV1alpha1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNodeV1alpha1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateNodeV1alpha1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNodeV1alpha1RuntimeClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateNodeV1alpha1RuntimeClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNodeV1alpha1RuntimeClassApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateNodeV1alpha1RuntimeClassApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateNodeV1alpha1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateNodeV1beta1RuntimeClassResponse(resp *http.Response, span trace.Span) (res CreateNodeV1beta1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNodeV1beta1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateNodeV1beta1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNodeV1beta1RuntimeClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateNodeV1beta1RuntimeClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateNodeV1beta1RuntimeClassApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateNodeV1beta1RuntimeClassApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateNodeV1beta1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreatePolicyV1NamespacedPodDisruptionBudgetResponse(resp *http.Response, span trace.Span) (res CreatePolicyV1NamespacedPodDisruptionBudgetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreatePolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreatePolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreatePolicyV1NamespacedPodDisruptionBudgetApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreatePolicyV1NamespacedPodDisruptionBudgetApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreatePolicyV1NamespacedPodDisruptionBudgetApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreatePolicyV1NamespacedPodDisruptionBudgetApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreatePolicyV1NamespacedPodDisruptionBudgetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreatePolicyV1beta1NamespacedPodDisruptionBudgetResponse(resp *http.Response, span trace.Span) (res CreatePolicyV1beta1NamespacedPodDisruptionBudgetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreatePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreatePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreatePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreatePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreatePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreatePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreatePolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreatePolicyV1beta1PodSecurityPolicyResponse(resp *http.Response, span trace.Span) (res CreatePolicyV1beta1PodSecurityPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreatePolicyV1beta1PodSecurityPolicyApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreatePolicyV1beta1PodSecurityPolicyApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreatePolicyV1beta1PodSecurityPolicyApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreatePolicyV1beta1PodSecurityPolicyApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreatePolicyV1beta1PodSecurityPolicyApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreatePolicyV1beta1PodSecurityPolicyApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreatePolicyV1beta1PodSecurityPolicyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateRbacAuthorizationV1ClusterRoleResponse(resp *http.Response, span trace.Span) (res CreateRbacAuthorizationV1ClusterRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1ClusterRoleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateRbacAuthorizationV1ClusterRoleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1ClusterRoleApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateRbacAuthorizationV1ClusterRoleApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1ClusterRoleApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateRbacAuthorizationV1ClusterRoleApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateRbacAuthorizationV1ClusterRoleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateRbacAuthorizationV1ClusterRoleBindingResponse(resp *http.Response, span trace.Span) (res CreateRbacAuthorizationV1ClusterRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateRbacAuthorizationV1ClusterRoleBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateRbacAuthorizationV1NamespacedRoleResponse(resp *http.Response, span trace.Span) (res CreateRbacAuthorizationV1NamespacedRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1NamespacedRoleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateRbacAuthorizationV1NamespacedRoleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1NamespacedRoleApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateRbacAuthorizationV1NamespacedRoleApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1NamespacedRoleApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateRbacAuthorizationV1NamespacedRoleApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateRbacAuthorizationV1NamespacedRoleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateRbacAuthorizationV1NamespacedRoleBindingResponse(resp *http.Response, span trace.Span) (res CreateRbacAuthorizationV1NamespacedRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1NamespacedRoleBindingApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateRbacAuthorizationV1NamespacedRoleBindingApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateRbacAuthorizationV1NamespacedRoleBindingApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateRbacAuthorizationV1NamespacedRoleBindingApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateRbacAuthorizationV1NamespacedRoleBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateSchedulingV1PriorityClassResponse(resp *http.Response, span trace.Span) (res CreateSchedulingV1PriorityClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateSchedulingV1PriorityClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateSchedulingV1PriorityClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateSchedulingV1PriorityClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateSchedulingV1PriorityClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateSchedulingV1PriorityClassApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateSchedulingV1PriorityClassApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateSchedulingV1PriorityClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateStorageV1CSIDriverResponse(resp *http.Response, span trace.Span) (res CreateStorageV1CSIDriverRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1CSIDriverApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1CSIDriverApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1CSIDriverApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1CSIDriverApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1CSIDriverApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1CSIDriverApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateStorageV1CSIDriverUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateStorageV1CSINodeResponse(resp *http.Response, span trace.Span) (res CreateStorageV1CSINodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1CSINodeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1CSINodeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1CSINodeApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1CSINodeApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1CSINodeApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1CSINodeApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateStorageV1CSINodeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateStorageV1StorageClassResponse(resp *http.Response, span trace.Span) (res CreateStorageV1StorageClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1StorageClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1StorageClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1StorageClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1StorageClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1StorageClassApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1StorageClassApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateStorageV1StorageClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateStorageV1VolumeAttachmentResponse(resp *http.Response, span trace.Span) (res CreateStorageV1VolumeAttachmentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1VolumeAttachmentApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1VolumeAttachmentApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1VolumeAttachmentApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1VolumeAttachmentApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1VolumeAttachmentApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1VolumeAttachmentApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateStorageV1VolumeAttachmentUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateStorageV1alpha1NamespacedCSIStorageCapacityResponse(resp *http.Response, span trace.Span) (res CreateStorageV1alpha1NamespacedCSIStorageCapacityRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCreateStorageV1beta1NamespacedCSIStorageCapacityResponse(resp *http.Response, span trace.Span) (res CreateStorageV1beta1NamespacedCSIStorageCapacityRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "CreateStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &CreateStorageV1beta1NamespacedCSIStorageCapacityUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAdmissionregistrationV1MutatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res DeleteAdmissionregistrationV1MutatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAdmissionregistrationV1ValidatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res DeleteAdmissionregistrationV1ValidatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteApiextensionsV1CollectionCustomResourceDefinitionResponse(resp *http.Response, span trace.Span) (res DeleteApiextensionsV1CollectionCustomResourceDefinitionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteApiextensionsV1CollectionCustomResourceDefinitionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteApiextensionsV1CustomResourceDefinitionResponse(resp *http.Response, span trace.Span) (res DeleteApiextensionsV1CustomResourceDefinitionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteApiextensionsV1CustomResourceDefinitionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteApiextensionsV1CustomResourceDefinitionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteApiextensionsV1CustomResourceDefinitionApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteApiextensionsV1CustomResourceDefinitionApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteApiextensionsV1CustomResourceDefinitionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteApiregistrationV1APIServiceResponse(resp *http.Response, span trace.Span) (res DeleteApiregistrationV1APIServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteApiregistrationV1APIServiceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteApiregistrationV1APIServiceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteApiregistrationV1APIServiceApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteApiregistrationV1APIServiceApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteApiregistrationV1APIServiceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteApiregistrationV1CollectionAPIServiceResponse(resp *http.Response, span trace.Span) (res DeleteApiregistrationV1CollectionAPIServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteApiregistrationV1CollectionAPIServiceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteApiregistrationV1CollectionAPIServiceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteApiregistrationV1CollectionAPIServiceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAppsV1CollectionNamespacedControllerRevisionResponse(resp *http.Response, span trace.Span) (res DeleteAppsV1CollectionNamespacedControllerRevisionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAppsV1CollectionNamespacedControllerRevisionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAppsV1CollectionNamespacedControllerRevisionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAppsV1CollectionNamespacedControllerRevisionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAppsV1CollectionNamespacedDaemonSetResponse(resp *http.Response, span trace.Span) (res DeleteAppsV1CollectionNamespacedDaemonSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAppsV1CollectionNamespacedDaemonSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAppsV1CollectionNamespacedDaemonSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAppsV1CollectionNamespacedDaemonSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAppsV1CollectionNamespacedDeploymentResponse(resp *http.Response, span trace.Span) (res DeleteAppsV1CollectionNamespacedDeploymentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAppsV1CollectionNamespacedDeploymentApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAppsV1CollectionNamespacedDeploymentApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAppsV1CollectionNamespacedDeploymentUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAppsV1CollectionNamespacedReplicaSetResponse(resp *http.Response, span trace.Span) (res DeleteAppsV1CollectionNamespacedReplicaSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAppsV1CollectionNamespacedReplicaSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAppsV1CollectionNamespacedReplicaSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAppsV1CollectionNamespacedReplicaSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAppsV1CollectionNamespacedStatefulSetResponse(resp *http.Response, span trace.Span) (res DeleteAppsV1CollectionNamespacedStatefulSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAppsV1CollectionNamespacedStatefulSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAppsV1CollectionNamespacedStatefulSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAppsV1CollectionNamespacedStatefulSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAppsV1NamespacedControllerRevisionResponse(resp *http.Response, span trace.Span) (res DeleteAppsV1NamespacedControllerRevisionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAppsV1NamespacedControllerRevisionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAppsV1NamespacedControllerRevisionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAppsV1NamespacedControllerRevisionApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteAppsV1NamespacedControllerRevisionApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAppsV1NamespacedControllerRevisionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAppsV1NamespacedDaemonSetResponse(resp *http.Response, span trace.Span) (res DeleteAppsV1NamespacedDaemonSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAppsV1NamespacedDaemonSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAppsV1NamespacedDaemonSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAppsV1NamespacedDaemonSetApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteAppsV1NamespacedDaemonSetApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAppsV1NamespacedDaemonSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAppsV1NamespacedDeploymentResponse(resp *http.Response, span trace.Span) (res DeleteAppsV1NamespacedDeploymentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAppsV1NamespacedDeploymentApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAppsV1NamespacedDeploymentApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAppsV1NamespacedDeploymentApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteAppsV1NamespacedDeploymentApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAppsV1NamespacedDeploymentUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAppsV1NamespacedReplicaSetResponse(resp *http.Response, span trace.Span) (res DeleteAppsV1NamespacedReplicaSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAppsV1NamespacedReplicaSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAppsV1NamespacedReplicaSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAppsV1NamespacedReplicaSetApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteAppsV1NamespacedReplicaSetApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAppsV1NamespacedReplicaSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAppsV1NamespacedStatefulSetResponse(resp *http.Response, span trace.Span) (res DeleteAppsV1NamespacedStatefulSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAppsV1NamespacedStatefulSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAppsV1NamespacedStatefulSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAppsV1NamespacedStatefulSetApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteAppsV1NamespacedStatefulSetApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAppsV1NamespacedStatefulSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAutoscalingV1NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteBatchV1CollectionNamespacedCronJobResponse(resp *http.Response, span trace.Span) (res DeleteBatchV1CollectionNamespacedCronJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteBatchV1CollectionNamespacedCronJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteBatchV1CollectionNamespacedCronJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteBatchV1CollectionNamespacedCronJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteBatchV1CollectionNamespacedJobResponse(resp *http.Response, span trace.Span) (res DeleteBatchV1CollectionNamespacedJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteBatchV1CollectionNamespacedJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteBatchV1CollectionNamespacedJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteBatchV1CollectionNamespacedJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteBatchV1NamespacedCronJobResponse(resp *http.Response, span trace.Span) (res DeleteBatchV1NamespacedCronJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteBatchV1NamespacedCronJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteBatchV1NamespacedCronJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteBatchV1NamespacedCronJobApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteBatchV1NamespacedCronJobApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteBatchV1NamespacedCronJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteBatchV1NamespacedJobResponse(resp *http.Response, span trace.Span) (res DeleteBatchV1NamespacedJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteBatchV1NamespacedJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteBatchV1NamespacedJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteBatchV1NamespacedJobApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteBatchV1NamespacedJobApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteBatchV1NamespacedJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteBatchV1beta1CollectionNamespacedCronJobResponse(resp *http.Response, span trace.Span) (res DeleteBatchV1beta1CollectionNamespacedCronJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteBatchV1beta1CollectionNamespacedCronJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteBatchV1beta1CollectionNamespacedCronJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteBatchV1beta1CollectionNamespacedCronJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteBatchV1beta1NamespacedCronJobResponse(resp *http.Response, span trace.Span) (res DeleteBatchV1beta1NamespacedCronJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteBatchV1beta1NamespacedCronJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteBatchV1beta1NamespacedCronJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteBatchV1beta1NamespacedCronJobApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteBatchV1beta1NamespacedCronJobApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteBatchV1beta1NamespacedCronJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCertificatesV1CertificateSigningRequestResponse(resp *http.Response, span trace.Span) (res DeleteCertificatesV1CertificateSigningRequestRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCertificatesV1CertificateSigningRequestApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCertificatesV1CertificateSigningRequestApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCertificatesV1CertificateSigningRequestApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteCertificatesV1CertificateSigningRequestApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCertificatesV1CertificateSigningRequestUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCertificatesV1CollectionCertificateSigningRequestResponse(resp *http.Response, span trace.Span) (res DeleteCertificatesV1CollectionCertificateSigningRequestRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCertificatesV1CollectionCertificateSigningRequestApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCertificatesV1CollectionCertificateSigningRequestApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCertificatesV1CollectionCertificateSigningRequestUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoordinationV1CollectionNamespacedLeaseResponse(resp *http.Response, span trace.Span) (res DeleteCoordinationV1CollectionNamespacedLeaseRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoordinationV1CollectionNamespacedLeaseApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoordinationV1CollectionNamespacedLeaseApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoordinationV1CollectionNamespacedLeaseUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoordinationV1NamespacedLeaseResponse(resp *http.Response, span trace.Span) (res DeleteCoordinationV1NamespacedLeaseRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoordinationV1NamespacedLeaseApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoordinationV1NamespacedLeaseApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoordinationV1NamespacedLeaseApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteCoordinationV1NamespacedLeaseApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoordinationV1NamespacedLeaseUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1CollectionNamespacedConfigMapResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1CollectionNamespacedConfigMapRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1CollectionNamespacedConfigMapApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1CollectionNamespacedConfigMapApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1CollectionNamespacedConfigMapUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1CollectionNamespacedEndpointsResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1CollectionNamespacedEndpointsRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1CollectionNamespacedEndpointsApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1CollectionNamespacedEndpointsApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1CollectionNamespacedEndpointsUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1CollectionNamespacedEventResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1CollectionNamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1CollectionNamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1CollectionNamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1CollectionNamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1CollectionNamespacedLimitRangeResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1CollectionNamespacedLimitRangeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1CollectionNamespacedLimitRangeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1CollectionNamespacedLimitRangeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1CollectionNamespacedLimitRangeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1CollectionNamespacedPersistentVolumeClaimResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1CollectionNamespacedPersistentVolumeClaimRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1CollectionNamespacedPersistentVolumeClaimApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1CollectionNamespacedPersistentVolumeClaimApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1CollectionNamespacedPersistentVolumeClaimUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1CollectionNamespacedPodResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1CollectionNamespacedPodRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1CollectionNamespacedPodApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1CollectionNamespacedPodApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1CollectionNamespacedPodUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1CollectionNamespacedPodTemplateResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1CollectionNamespacedPodTemplateRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1CollectionNamespacedPodTemplateApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1CollectionNamespacedPodTemplateApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1CollectionNamespacedPodTemplateUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1CollectionNamespacedReplicationControllerResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1CollectionNamespacedReplicationControllerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1CollectionNamespacedReplicationControllerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1CollectionNamespacedReplicationControllerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1CollectionNamespacedReplicationControllerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1CollectionNamespacedResourceQuotaResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1CollectionNamespacedResourceQuotaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1CollectionNamespacedResourceQuotaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1CollectionNamespacedResourceQuotaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1CollectionNamespacedResourceQuotaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1CollectionNamespacedSecretResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1CollectionNamespacedSecretRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1CollectionNamespacedSecretApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1CollectionNamespacedSecretApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1CollectionNamespacedSecretUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1CollectionNamespacedServiceResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1CollectionNamespacedServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1CollectionNamespacedServiceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1CollectionNamespacedServiceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1CollectionNamespacedServiceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1CollectionNamespacedServiceAccountResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1CollectionNamespacedServiceAccountRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1CollectionNamespacedServiceAccountApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1CollectionNamespacedServiceAccountApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1CollectionNamespacedServiceAccountUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1CollectionNodeResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1CollectionNodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1CollectionNodeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1CollectionNodeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1CollectionNodeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1CollectionPersistentVolumeResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1CollectionPersistentVolumeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1CollectionPersistentVolumeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1CollectionPersistentVolumeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1CollectionPersistentVolumeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1NamespaceResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1NamespaceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespaceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespaceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespaceApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespaceApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1NamespaceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1NamespacedConfigMapResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1NamespacedConfigMapRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedConfigMapApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedConfigMapApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedConfigMapApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedConfigMapApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1NamespacedConfigMapUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1NamespacedEndpointsResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1NamespacedEndpointsRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedEndpointsApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedEndpointsApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedEndpointsApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedEndpointsApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1NamespacedEndpointsUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1NamespacedEventResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedEventApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedEventApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1NamespacedLimitRangeResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1NamespacedLimitRangeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedLimitRangeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedLimitRangeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedLimitRangeApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedLimitRangeApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1NamespacedLimitRangeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1NamespacedPersistentVolumeClaimResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1NamespacedPersistentVolumeClaimRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedPersistentVolumeClaimApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedPersistentVolumeClaimApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1NamespacedPersistentVolumeClaimUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1NamespacedPodResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1NamespacedPodRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedPodApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedPodApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedPodApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedPodApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1NamespacedPodUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1NamespacedPodTemplateResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1NamespacedPodTemplateRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedPodTemplateApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedPodTemplateApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedPodTemplateApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedPodTemplateApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1NamespacedPodTemplateUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1NamespacedReplicationControllerResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1NamespacedReplicationControllerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedReplicationControllerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedReplicationControllerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedReplicationControllerApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedReplicationControllerApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1NamespacedReplicationControllerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1NamespacedResourceQuotaResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1NamespacedResourceQuotaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedResourceQuotaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedResourceQuotaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedResourceQuotaApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedResourceQuotaApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1NamespacedResourceQuotaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1NamespacedSecretResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1NamespacedSecretRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedSecretApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedSecretApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedSecretApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedSecretApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1NamespacedSecretUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1NamespacedServiceResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1NamespacedServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedServiceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedServiceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedServiceApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedServiceApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1NamespacedServiceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1NamespacedServiceAccountResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1NamespacedServiceAccountRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedServiceAccountApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedServiceAccountApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NamespacedServiceAccountApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NamespacedServiceAccountApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1NamespacedServiceAccountUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1NodeResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1NodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NodeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NodeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1NodeApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1NodeApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1NodeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteCoreV1PersistentVolumeResponse(resp *http.Response, span trace.Span) (res DeleteCoreV1PersistentVolumeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1PersistentVolumeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1PersistentVolumeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteCoreV1PersistentVolumeApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteCoreV1PersistentVolumeApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteCoreV1PersistentVolumeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteDiscoveryV1CollectionNamespacedEndpointSliceResponse(resp *http.Response, span trace.Span) (res DeleteDiscoveryV1CollectionNamespacedEndpointSliceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteDiscoveryV1CollectionNamespacedEndpointSliceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteDiscoveryV1CollectionNamespacedEndpointSliceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteDiscoveryV1CollectionNamespacedEndpointSliceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteDiscoveryV1NamespacedEndpointSliceResponse(resp *http.Response, span trace.Span) (res DeleteDiscoveryV1NamespacedEndpointSliceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteDiscoveryV1NamespacedEndpointSliceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteDiscoveryV1NamespacedEndpointSliceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteDiscoveryV1NamespacedEndpointSliceApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteDiscoveryV1NamespacedEndpointSliceApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteDiscoveryV1NamespacedEndpointSliceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceResponse(resp *http.Response, span trace.Span) (res DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteDiscoveryV1beta1NamespacedEndpointSliceResponse(resp *http.Response, span trace.Span) (res DeleteDiscoveryV1beta1NamespacedEndpointSliceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteDiscoveryV1beta1NamespacedEndpointSliceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteEventsV1CollectionNamespacedEventResponse(resp *http.Response, span trace.Span) (res DeleteEventsV1CollectionNamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteEventsV1CollectionNamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteEventsV1CollectionNamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteEventsV1CollectionNamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteEventsV1NamespacedEventResponse(resp *http.Response, span trace.Span) (res DeleteEventsV1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteEventsV1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteEventsV1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteEventsV1NamespacedEventApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteEventsV1NamespacedEventApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteEventsV1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteEventsV1beta1CollectionNamespacedEventResponse(resp *http.Response, span trace.Span) (res DeleteEventsV1beta1CollectionNamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteEventsV1beta1CollectionNamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteEventsV1beta1CollectionNamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteEventsV1beta1CollectionNamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteEventsV1beta1NamespacedEventResponse(resp *http.Response, span trace.Span) (res DeleteEventsV1beta1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteEventsV1beta1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteEventsV1beta1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteEventsV1beta1NamespacedEventApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteEventsV1beta1NamespacedEventApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteEventsV1beta1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaResponse(resp *http.Response, span trace.Span) (res DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteFlowcontrolApiserverV1beta1FlowSchemaResponse(resp *http.Response, span trace.Span) (res DeleteFlowcontrolApiserverV1beta1FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteFlowcontrolApiserverV1beta1FlowSchemaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res DeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaResponse(resp *http.Response, span trace.Span) (res DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteFlowcontrolApiserverV1beta2FlowSchemaResponse(resp *http.Response, span trace.Span) (res DeleteFlowcontrolApiserverV1beta2FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteFlowcontrolApiserverV1beta2FlowSchemaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteInternalApiserverV1alpha1CollectionStorageVersionResponse(resp *http.Response, span trace.Span) (res DeleteInternalApiserverV1alpha1CollectionStorageVersionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteInternalApiserverV1alpha1CollectionStorageVersionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteInternalApiserverV1alpha1StorageVersionResponse(resp *http.Response, span trace.Span) (res DeleteInternalApiserverV1alpha1StorageVersionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteInternalApiserverV1alpha1StorageVersionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteInternalApiserverV1alpha1StorageVersionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteInternalApiserverV1alpha1StorageVersionApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteInternalApiserverV1alpha1StorageVersionApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteInternalApiserverV1alpha1StorageVersionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteNetworkingV1CollectionIngressClassResponse(resp *http.Response, span trace.Span) (res DeleteNetworkingV1CollectionIngressClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNetworkingV1CollectionIngressClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteNetworkingV1CollectionIngressClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteNetworkingV1CollectionIngressClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteNetworkingV1CollectionNamespacedIngressResponse(resp *http.Response, span trace.Span) (res DeleteNetworkingV1CollectionNamespacedIngressRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNetworkingV1CollectionNamespacedIngressApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteNetworkingV1CollectionNamespacedIngressApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteNetworkingV1CollectionNamespacedIngressUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteNetworkingV1CollectionNamespacedNetworkPolicyResponse(resp *http.Response, span trace.Span) (res DeleteNetworkingV1CollectionNamespacedNetworkPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNetworkingV1CollectionNamespacedNetworkPolicyApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteNetworkingV1CollectionNamespacedNetworkPolicyApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteNetworkingV1CollectionNamespacedNetworkPolicyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteNetworkingV1IngressClassResponse(resp *http.Response, span trace.Span) (res DeleteNetworkingV1IngressClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNetworkingV1IngressClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteNetworkingV1IngressClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNetworkingV1IngressClassApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteNetworkingV1IngressClassApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteNetworkingV1IngressClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteNetworkingV1NamespacedIngressResponse(resp *http.Response, span trace.Span) (res DeleteNetworkingV1NamespacedIngressRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNetworkingV1NamespacedIngressApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteNetworkingV1NamespacedIngressApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNetworkingV1NamespacedIngressApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteNetworkingV1NamespacedIngressApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteNetworkingV1NamespacedIngressUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteNetworkingV1NamespacedNetworkPolicyResponse(resp *http.Response, span trace.Span) (res DeleteNetworkingV1NamespacedNetworkPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNetworkingV1NamespacedNetworkPolicyApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteNetworkingV1NamespacedNetworkPolicyApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNetworkingV1NamespacedNetworkPolicyApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteNetworkingV1NamespacedNetworkPolicyApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteNetworkingV1NamespacedNetworkPolicyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteNodeV1CollectionRuntimeClassResponse(resp *http.Response, span trace.Span) (res DeleteNodeV1CollectionRuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNodeV1CollectionRuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteNodeV1CollectionRuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteNodeV1CollectionRuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteNodeV1RuntimeClassResponse(resp *http.Response, span trace.Span) (res DeleteNodeV1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNodeV1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteNodeV1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNodeV1RuntimeClassApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteNodeV1RuntimeClassApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteNodeV1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteNodeV1alpha1CollectionRuntimeClassResponse(resp *http.Response, span trace.Span) (res DeleteNodeV1alpha1CollectionRuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNodeV1alpha1CollectionRuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteNodeV1alpha1CollectionRuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteNodeV1alpha1CollectionRuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteNodeV1alpha1RuntimeClassResponse(resp *http.Response, span trace.Span) (res DeleteNodeV1alpha1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNodeV1alpha1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteNodeV1alpha1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNodeV1alpha1RuntimeClassApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteNodeV1alpha1RuntimeClassApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteNodeV1alpha1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteNodeV1beta1CollectionRuntimeClassResponse(resp *http.Response, span trace.Span) (res DeleteNodeV1beta1CollectionRuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNodeV1beta1CollectionRuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteNodeV1beta1CollectionRuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteNodeV1beta1CollectionRuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteNodeV1beta1RuntimeClassResponse(resp *http.Response, span trace.Span) (res DeleteNodeV1beta1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNodeV1beta1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteNodeV1beta1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteNodeV1beta1RuntimeClassApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteNodeV1beta1RuntimeClassApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteNodeV1beta1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeletePolicyV1CollectionNamespacedPodDisruptionBudgetResponse(resp *http.Response, span trace.Span) (res DeletePolicyV1CollectionNamespacedPodDisruptionBudgetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeletePolicyV1CollectionNamespacedPodDisruptionBudgetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeletePolicyV1CollectionNamespacedPodDisruptionBudgetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeletePolicyV1CollectionNamespacedPodDisruptionBudgetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeletePolicyV1NamespacedPodDisruptionBudgetResponse(resp *http.Response, span trace.Span) (res DeletePolicyV1NamespacedPodDisruptionBudgetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeletePolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeletePolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeletePolicyV1NamespacedPodDisruptionBudgetApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeletePolicyV1NamespacedPodDisruptionBudgetApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeletePolicyV1NamespacedPodDisruptionBudgetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetResponse(resp *http.Response, span trace.Span) (res DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeletePolicyV1beta1CollectionPodSecurityPolicyResponse(resp *http.Response, span trace.Span) (res DeletePolicyV1beta1CollectionPodSecurityPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeletePolicyV1beta1CollectionPodSecurityPolicyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeletePolicyV1beta1NamespacedPodDisruptionBudgetResponse(resp *http.Response, span trace.Span) (res DeletePolicyV1beta1NamespacedPodDisruptionBudgetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeletePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeletePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeletePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeletePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeletePolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeletePolicyV1beta1PodSecurityPolicyResponse(resp *http.Response, span trace.Span) (res DeletePolicyV1beta1PodSecurityPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeletePolicyV1beta1PodSecurityPolicyApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeletePolicyV1beta1PodSecurityPolicyApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeletePolicyV1beta1PodSecurityPolicyApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeletePolicyV1beta1PodSecurityPolicyApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeletePolicyV1beta1PodSecurityPolicyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteRbacAuthorizationV1ClusterRoleResponse(resp *http.Response, span trace.Span) (res DeleteRbacAuthorizationV1ClusterRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteRbacAuthorizationV1ClusterRoleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteRbacAuthorizationV1ClusterRoleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteRbacAuthorizationV1ClusterRoleApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteRbacAuthorizationV1ClusterRoleApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteRbacAuthorizationV1ClusterRoleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteRbacAuthorizationV1ClusterRoleBindingResponse(resp *http.Response, span trace.Span) (res DeleteRbacAuthorizationV1ClusterRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteRbacAuthorizationV1ClusterRoleBindingApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteRbacAuthorizationV1ClusterRoleBindingApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteRbacAuthorizationV1ClusterRoleBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteRbacAuthorizationV1CollectionClusterRoleResponse(resp *http.Response, span trace.Span) (res DeleteRbacAuthorizationV1CollectionClusterRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteRbacAuthorizationV1CollectionClusterRoleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteRbacAuthorizationV1CollectionClusterRoleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteRbacAuthorizationV1CollectionClusterRoleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteRbacAuthorizationV1CollectionClusterRoleBindingResponse(resp *http.Response, span trace.Span) (res DeleteRbacAuthorizationV1CollectionClusterRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteRbacAuthorizationV1CollectionClusterRoleBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteRbacAuthorizationV1CollectionNamespacedRoleResponse(resp *http.Response, span trace.Span) (res DeleteRbacAuthorizationV1CollectionNamespacedRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteRbacAuthorizationV1CollectionNamespacedRoleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteRbacAuthorizationV1CollectionNamespacedRoleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteRbacAuthorizationV1CollectionNamespacedRoleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingResponse(resp *http.Response, span trace.Span) (res DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteRbacAuthorizationV1NamespacedRoleResponse(resp *http.Response, span trace.Span) (res DeleteRbacAuthorizationV1NamespacedRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteRbacAuthorizationV1NamespacedRoleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteRbacAuthorizationV1NamespacedRoleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteRbacAuthorizationV1NamespacedRoleApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteRbacAuthorizationV1NamespacedRoleApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteRbacAuthorizationV1NamespacedRoleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteRbacAuthorizationV1NamespacedRoleBindingResponse(resp *http.Response, span trace.Span) (res DeleteRbacAuthorizationV1NamespacedRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteRbacAuthorizationV1NamespacedRoleBindingApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteRbacAuthorizationV1NamespacedRoleBindingApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteRbacAuthorizationV1NamespacedRoleBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteSchedulingV1CollectionPriorityClassResponse(resp *http.Response, span trace.Span) (res DeleteSchedulingV1CollectionPriorityClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteSchedulingV1CollectionPriorityClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteSchedulingV1CollectionPriorityClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteSchedulingV1CollectionPriorityClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteSchedulingV1PriorityClassResponse(resp *http.Response, span trace.Span) (res DeleteSchedulingV1PriorityClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteSchedulingV1PriorityClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteSchedulingV1PriorityClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteSchedulingV1PriorityClassApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteSchedulingV1PriorityClassApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteSchedulingV1PriorityClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteStorageV1CSIDriverResponse(resp *http.Response, span trace.Span) (res DeleteStorageV1CSIDriverRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1CSIDriverApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1CSIDriverApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1CSIDriverApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1CSIDriverApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteStorageV1CSIDriverUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteStorageV1CSINodeResponse(resp *http.Response, span trace.Span) (res DeleteStorageV1CSINodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1CSINodeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1CSINodeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1CSINodeApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1CSINodeApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteStorageV1CSINodeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteStorageV1CollectionCSIDriverResponse(resp *http.Response, span trace.Span) (res DeleteStorageV1CollectionCSIDriverRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1CollectionCSIDriverApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1CollectionCSIDriverApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteStorageV1CollectionCSIDriverUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteStorageV1CollectionCSINodeResponse(resp *http.Response, span trace.Span) (res DeleteStorageV1CollectionCSINodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1CollectionCSINodeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1CollectionCSINodeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteStorageV1CollectionCSINodeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteStorageV1CollectionStorageClassResponse(resp *http.Response, span trace.Span) (res DeleteStorageV1CollectionStorageClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1CollectionStorageClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1CollectionStorageClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteStorageV1CollectionStorageClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteStorageV1CollectionVolumeAttachmentResponse(resp *http.Response, span trace.Span) (res DeleteStorageV1CollectionVolumeAttachmentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1CollectionVolumeAttachmentApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1CollectionVolumeAttachmentApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteStorageV1CollectionVolumeAttachmentUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteStorageV1StorageClassResponse(resp *http.Response, span trace.Span) (res DeleteStorageV1StorageClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1StorageClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1StorageClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1StorageClassApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1StorageClassApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteStorageV1StorageClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteStorageV1VolumeAttachmentResponse(resp *http.Response, span trace.Span) (res DeleteStorageV1VolumeAttachmentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1VolumeAttachmentApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1VolumeAttachmentApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1VolumeAttachmentApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1VolumeAttachmentApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteStorageV1VolumeAttachmentUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteStorageV1alpha1CollectionNamespacedCSIStorageCapacityResponse(resp *http.Response, span trace.Span) (res DeleteStorageV1alpha1CollectionNamespacedCSIStorageCapacityRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1alpha1CollectionNamespacedCSIStorageCapacityApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1alpha1CollectionNamespacedCSIStorageCapacityApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteStorageV1alpha1CollectionNamespacedCSIStorageCapacityUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteStorageV1alpha1NamespacedCSIStorageCapacityResponse(resp *http.Response, span trace.Span) (res DeleteStorageV1alpha1NamespacedCSIStorageCapacityRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteStorageV1beta1CollectionNamespacedCSIStorageCapacityResponse(resp *http.Response, span trace.Span) (res DeleteStorageV1beta1CollectionNamespacedCSIStorageCapacityRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1beta1CollectionNamespacedCSIStorageCapacityApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1beta1CollectionNamespacedCSIStorageCapacityApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteStorageV1beta1CollectionNamespacedCSIStorageCapacityUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeDeleteStorageV1beta1NamespacedCSIStorageCapacityResponse(resp *http.Response, span trace.Span) (res DeleteStorageV1beta1NamespacedCSIStorageCapacityRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response DeleteStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONAccepted
			if err := func() error {
				return errors.New(`decoding of "DeleteStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONAccepted" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &DeleteStorageV1beta1NamespacedCSIStorageCapacityUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAPIVersionsResponse(resp *http.Response, span trace.Span) (res GetAPIVersionsRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetAPIVersionsApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetAPIVersionsApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAPIVersionsUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAdmissionregistrationAPIGroupResponse(resp *http.Response, span trace.Span) (res GetAdmissionregistrationAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetAdmissionregistrationAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetAdmissionregistrationAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAdmissionregistrationAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAdmissionregistrationV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetAdmissionregistrationV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetAdmissionregistrationV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetAdmissionregistrationV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAdmissionregistrationV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetApiextensionsAPIGroupResponse(resp *http.Response, span trace.Span) (res GetApiextensionsAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetApiextensionsAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetApiextensionsAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetApiextensionsAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetApiextensionsV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetApiextensionsV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetApiextensionsV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetApiextensionsV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetApiextensionsV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetApiregistrationAPIGroupResponse(resp *http.Response, span trace.Span) (res GetApiregistrationAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetApiregistrationAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetApiregistrationAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetApiregistrationAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetApiregistrationV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetApiregistrationV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetApiregistrationV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetApiregistrationV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetApiregistrationV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAppsAPIGroupResponse(resp *http.Response, span trace.Span) (res GetAppsAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetAppsAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetAppsAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAppsAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAppsV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetAppsV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetAppsV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetAppsV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAppsV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAuthenticationAPIGroupResponse(resp *http.Response, span trace.Span) (res GetAuthenticationAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetAuthenticationAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetAuthenticationAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAuthenticationAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAuthenticationV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetAuthenticationV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetAuthenticationV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetAuthenticationV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAuthenticationV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAuthorizationAPIGroupResponse(resp *http.Response, span trace.Span) (res GetAuthorizationAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetAuthorizationAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetAuthorizationAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAuthorizationAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAuthorizationV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetAuthorizationV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetAuthorizationV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetAuthorizationV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAuthorizationV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAutoscalingAPIGroupResponse(resp *http.Response, span trace.Span) (res GetAutoscalingAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetAutoscalingAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetAutoscalingAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAutoscalingAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAutoscalingV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetAutoscalingV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetAutoscalingV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetAutoscalingV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAutoscalingV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAutoscalingV2beta1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetAutoscalingV2beta1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetAutoscalingV2beta1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetAutoscalingV2beta1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAutoscalingV2beta1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetAutoscalingV2beta2APIResourcesResponse(resp *http.Response, span trace.Span) (res GetAutoscalingV2beta2APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetAutoscalingV2beta2APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetAutoscalingV2beta2APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetAutoscalingV2beta2APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetBatchAPIGroupResponse(resp *http.Response, span trace.Span) (res GetBatchAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetBatchAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetBatchAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetBatchAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetBatchV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetBatchV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetBatchV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetBatchV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetBatchV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetBatchV1beta1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetBatchV1beta1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetBatchV1beta1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetBatchV1beta1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetBatchV1beta1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetCertificatesAPIGroupResponse(resp *http.Response, span trace.Span) (res GetCertificatesAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetCertificatesAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetCertificatesAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetCertificatesAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetCertificatesV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetCertificatesV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetCertificatesV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetCertificatesV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetCertificatesV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetCodeVersionResponse(resp *http.Response, span trace.Span) (res GetCodeVersionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response IoK8sApimachineryPkgVersionInfo
			if err := func() error {
				if err := response.ReadJSON(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetCodeVersionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetCoordinationAPIGroupResponse(resp *http.Response, span trace.Span) (res GetCoordinationAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetCoordinationAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetCoordinationAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetCoordinationAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetCoordinationV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetCoordinationV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetCoordinationV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetCoordinationV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetCoordinationV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetCoreAPIVersionsResponse(resp *http.Response, span trace.Span) (res GetCoreAPIVersionsRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetCoreAPIVersionsApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetCoreAPIVersionsApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetCoreAPIVersionsUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetCoreV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetCoreV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetCoreV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetCoreV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetCoreV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetDiscoveryAPIGroupResponse(resp *http.Response, span trace.Span) (res GetDiscoveryAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetDiscoveryAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetDiscoveryAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetDiscoveryAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetDiscoveryV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetDiscoveryV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetDiscoveryV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetDiscoveryV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetDiscoveryV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetDiscoveryV1beta1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetDiscoveryV1beta1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetDiscoveryV1beta1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetDiscoveryV1beta1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetDiscoveryV1beta1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetEventsAPIGroupResponse(resp *http.Response, span trace.Span) (res GetEventsAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetEventsAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetEventsAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetEventsAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetEventsV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetEventsV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetEventsV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetEventsV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetEventsV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetEventsV1beta1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetEventsV1beta1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetEventsV1beta1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetEventsV1beta1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetEventsV1beta1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetFlowcontrolApiserverAPIGroupResponse(resp *http.Response, span trace.Span) (res GetFlowcontrolApiserverAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetFlowcontrolApiserverAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetFlowcontrolApiserverAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetFlowcontrolApiserverAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetFlowcontrolApiserverV1beta1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetFlowcontrolApiserverV1beta1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetFlowcontrolApiserverV1beta1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetFlowcontrolApiserverV1beta1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetFlowcontrolApiserverV1beta1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetFlowcontrolApiserverV1beta2APIResourcesResponse(resp *http.Response, span trace.Span) (res GetFlowcontrolApiserverV1beta2APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetFlowcontrolApiserverV1beta2APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetFlowcontrolApiserverV1beta2APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetFlowcontrolApiserverV1beta2APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetInternalApiserverAPIGroupResponse(resp *http.Response, span trace.Span) (res GetInternalApiserverAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetInternalApiserverAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetInternalApiserverAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetInternalApiserverAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetInternalApiserverV1alpha1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetInternalApiserverV1alpha1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetInternalApiserverV1alpha1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetInternalApiserverV1alpha1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetInternalApiserverV1alpha1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetNetworkingAPIGroupResponse(resp *http.Response, span trace.Span) (res GetNetworkingAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetNetworkingAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetNetworkingAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetNetworkingAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetNetworkingV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetNetworkingV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetNetworkingV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetNetworkingV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetNetworkingV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetNodeAPIGroupResponse(resp *http.Response, span trace.Span) (res GetNodeAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetNodeAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetNodeAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetNodeAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetNodeV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetNodeV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetNodeV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetNodeV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetNodeV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetNodeV1alpha1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetNodeV1alpha1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetNodeV1alpha1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetNodeV1alpha1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetNodeV1alpha1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetNodeV1beta1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetNodeV1beta1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetNodeV1beta1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetNodeV1beta1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetNodeV1beta1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetPolicyAPIGroupResponse(resp *http.Response, span trace.Span) (res GetPolicyAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetPolicyAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetPolicyAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetPolicyAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetPolicyV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetPolicyV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetPolicyV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetPolicyV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetPolicyV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetPolicyV1beta1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetPolicyV1beta1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetPolicyV1beta1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetPolicyV1beta1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetPolicyV1beta1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetRbacAuthorizationAPIGroupResponse(resp *http.Response, span trace.Span) (res GetRbacAuthorizationAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetRbacAuthorizationAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetRbacAuthorizationAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetRbacAuthorizationAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetRbacAuthorizationV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetRbacAuthorizationV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetRbacAuthorizationV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetRbacAuthorizationV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetRbacAuthorizationV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetSchedulingAPIGroupResponse(resp *http.Response, span trace.Span) (res GetSchedulingAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetSchedulingAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetSchedulingAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetSchedulingAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetSchedulingV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetSchedulingV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetSchedulingV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetSchedulingV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetSchedulingV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetServiceAccountIssuerOpenIDConfigurationResponse(resp *http.Response, span trace.Span) (res GetServiceAccountIssuerOpenIDConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetServiceAccountIssuerOpenIDConfigurationOKApplicationJSON
			if err := func() error {
				return errors.New(`decoding of "GetServiceAccountIssuerOpenIDConfigurationOKApplicationJSON" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetServiceAccountIssuerOpenIDConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetServiceAccountIssuerOpenIDKeysetResponse(resp *http.Response, span trace.Span) (res GetServiceAccountIssuerOpenIDKeysetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/jwk-set+json":
			return res, errors.New("application/jwk-set+json decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetServiceAccountIssuerOpenIDKeysetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetStorageAPIGroupResponse(resp *http.Response, span trace.Span) (res GetStorageAPIGroupRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetStorageAPIGroupApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetStorageAPIGroupApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetStorageAPIGroupUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetStorageV1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetStorageV1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetStorageV1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetStorageV1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetStorageV1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetStorageV1alpha1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetStorageV1alpha1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetStorageV1alpha1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetStorageV1alpha1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetStorageV1alpha1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGetStorageV1beta1APIResourcesResponse(resp *http.Response, span trace.Span) (res GetStorageV1beta1APIResourcesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response GetStorageV1beta1APIResourcesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "GetStorageV1beta1APIResourcesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &GetStorageV1beta1APIResourcesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAdmissionregistrationV1MutatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res ListAdmissionregistrationV1MutatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAdmissionregistrationV1ValidatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res ListAdmissionregistrationV1ValidatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListApiextensionsV1CustomResourceDefinitionResponse(resp *http.Response, span trace.Span) (res ListApiextensionsV1CustomResourceDefinitionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListApiextensionsV1CustomResourceDefinitionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListApiextensionsV1CustomResourceDefinitionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListApiextensionsV1CustomResourceDefinitionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListApiregistrationV1APIServiceResponse(resp *http.Response, span trace.Span) (res ListApiregistrationV1APIServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListApiregistrationV1APIServiceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListApiregistrationV1APIServiceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListApiregistrationV1APIServiceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAppsV1ControllerRevisionForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListAppsV1ControllerRevisionForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAppsV1ControllerRevisionForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAppsV1ControllerRevisionForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAppsV1ControllerRevisionForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAppsV1DaemonSetForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListAppsV1DaemonSetForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAppsV1DaemonSetForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAppsV1DaemonSetForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAppsV1DaemonSetForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAppsV1DeploymentForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListAppsV1DeploymentForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAppsV1DeploymentForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAppsV1DeploymentForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAppsV1DeploymentForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAppsV1NamespacedControllerRevisionResponse(resp *http.Response, span trace.Span) (res ListAppsV1NamespacedControllerRevisionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAppsV1NamespacedControllerRevisionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAppsV1NamespacedControllerRevisionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAppsV1NamespacedControllerRevisionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAppsV1NamespacedDaemonSetResponse(resp *http.Response, span trace.Span) (res ListAppsV1NamespacedDaemonSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAppsV1NamespacedDaemonSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAppsV1NamespacedDaemonSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAppsV1NamespacedDaemonSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAppsV1NamespacedDeploymentResponse(resp *http.Response, span trace.Span) (res ListAppsV1NamespacedDeploymentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAppsV1NamespacedDeploymentApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAppsV1NamespacedDeploymentApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAppsV1NamespacedDeploymentUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAppsV1NamespacedReplicaSetResponse(resp *http.Response, span trace.Span) (res ListAppsV1NamespacedReplicaSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAppsV1NamespacedReplicaSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAppsV1NamespacedReplicaSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAppsV1NamespacedReplicaSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAppsV1NamespacedStatefulSetResponse(resp *http.Response, span trace.Span) (res ListAppsV1NamespacedStatefulSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAppsV1NamespacedStatefulSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAppsV1NamespacedStatefulSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAppsV1NamespacedStatefulSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAppsV1ReplicaSetForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListAppsV1ReplicaSetForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAppsV1ReplicaSetForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAppsV1ReplicaSetForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAppsV1ReplicaSetForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAppsV1StatefulSetForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListAppsV1StatefulSetForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAppsV1StatefulSetForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAppsV1StatefulSetForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAppsV1StatefulSetForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAutoscalingV1NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res ListAutoscalingV1NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListBatchV1CronJobForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListBatchV1CronJobForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListBatchV1CronJobForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListBatchV1CronJobForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListBatchV1CronJobForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListBatchV1JobForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListBatchV1JobForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListBatchV1JobForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListBatchV1JobForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListBatchV1JobForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListBatchV1NamespacedCronJobResponse(resp *http.Response, span trace.Span) (res ListBatchV1NamespacedCronJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListBatchV1NamespacedCronJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListBatchV1NamespacedCronJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListBatchV1NamespacedCronJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListBatchV1NamespacedJobResponse(resp *http.Response, span trace.Span) (res ListBatchV1NamespacedJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListBatchV1NamespacedJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListBatchV1NamespacedJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListBatchV1NamespacedJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListBatchV1beta1CronJobForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListBatchV1beta1CronJobForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListBatchV1beta1CronJobForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListBatchV1beta1CronJobForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListBatchV1beta1CronJobForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListBatchV1beta1NamespacedCronJobResponse(resp *http.Response, span trace.Span) (res ListBatchV1beta1NamespacedCronJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListBatchV1beta1NamespacedCronJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListBatchV1beta1NamespacedCronJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListBatchV1beta1NamespacedCronJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCertificatesV1CertificateSigningRequestResponse(resp *http.Response, span trace.Span) (res ListCertificatesV1CertificateSigningRequestRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCertificatesV1CertificateSigningRequestApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCertificatesV1CertificateSigningRequestApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCertificatesV1CertificateSigningRequestUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoordinationV1LeaseForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoordinationV1LeaseForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoordinationV1LeaseForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoordinationV1LeaseForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoordinationV1LeaseForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoordinationV1NamespacedLeaseResponse(resp *http.Response, span trace.Span) (res ListCoordinationV1NamespacedLeaseRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoordinationV1NamespacedLeaseApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoordinationV1NamespacedLeaseApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoordinationV1NamespacedLeaseUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1ComponentStatusResponse(resp *http.Response, span trace.Span) (res ListCoreV1ComponentStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1ComponentStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1ComponentStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1ComponentStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1ConfigMapForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1ConfigMapForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1ConfigMapForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1ConfigMapForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1ConfigMapForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1EndpointsForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1EndpointsForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1EndpointsForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1EndpointsForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1EndpointsForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1EventForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1EventForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1EventForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1EventForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1EventForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1LimitRangeForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1LimitRangeForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1LimitRangeForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1LimitRangeForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1LimitRangeForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1NamespaceResponse(resp *http.Response, span trace.Span) (res ListCoreV1NamespaceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1NamespaceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1NamespaceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1NamespaceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1NamespacedConfigMapResponse(resp *http.Response, span trace.Span) (res ListCoreV1NamespacedConfigMapRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1NamespacedConfigMapApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1NamespacedConfigMapApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1NamespacedConfigMapUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1NamespacedEndpointsResponse(resp *http.Response, span trace.Span) (res ListCoreV1NamespacedEndpointsRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1NamespacedEndpointsApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1NamespacedEndpointsApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1NamespacedEndpointsUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1NamespacedEventResponse(resp *http.Response, span trace.Span) (res ListCoreV1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1NamespacedLimitRangeResponse(resp *http.Response, span trace.Span) (res ListCoreV1NamespacedLimitRangeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1NamespacedLimitRangeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1NamespacedLimitRangeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1NamespacedLimitRangeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1NamespacedPersistentVolumeClaimResponse(resp *http.Response, span trace.Span) (res ListCoreV1NamespacedPersistentVolumeClaimRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1NamespacedPersistentVolumeClaimUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1NamespacedPodResponse(resp *http.Response, span trace.Span) (res ListCoreV1NamespacedPodRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1NamespacedPodApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1NamespacedPodApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1NamespacedPodUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1NamespacedPodTemplateResponse(resp *http.Response, span trace.Span) (res ListCoreV1NamespacedPodTemplateRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1NamespacedPodTemplateApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1NamespacedPodTemplateApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1NamespacedPodTemplateUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1NamespacedReplicationControllerResponse(resp *http.Response, span trace.Span) (res ListCoreV1NamespacedReplicationControllerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1NamespacedReplicationControllerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1NamespacedReplicationControllerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1NamespacedReplicationControllerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1NamespacedResourceQuotaResponse(resp *http.Response, span trace.Span) (res ListCoreV1NamespacedResourceQuotaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1NamespacedResourceQuotaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1NamespacedResourceQuotaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1NamespacedResourceQuotaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1NamespacedSecretResponse(resp *http.Response, span trace.Span) (res ListCoreV1NamespacedSecretRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1NamespacedSecretApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1NamespacedSecretApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1NamespacedSecretUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1NamespacedServiceResponse(resp *http.Response, span trace.Span) (res ListCoreV1NamespacedServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1NamespacedServiceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1NamespacedServiceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1NamespacedServiceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1NamespacedServiceAccountResponse(resp *http.Response, span trace.Span) (res ListCoreV1NamespacedServiceAccountRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1NamespacedServiceAccountApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1NamespacedServiceAccountApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1NamespacedServiceAccountUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1NodeResponse(resp *http.Response, span trace.Span) (res ListCoreV1NodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1NodeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1NodeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1NodeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1PersistentVolumeResponse(resp *http.Response, span trace.Span) (res ListCoreV1PersistentVolumeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1PersistentVolumeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1PersistentVolumeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1PersistentVolumeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1PersistentVolumeClaimForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1PersistentVolumeClaimForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1PersistentVolumeClaimForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1PodForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1PodForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1PodForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1PodForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1PodForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1PodTemplateForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1PodTemplateForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1PodTemplateForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1PodTemplateForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1PodTemplateForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1ReplicationControllerForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1ReplicationControllerForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1ReplicationControllerForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1ReplicationControllerForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1ReplicationControllerForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1ResourceQuotaForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1ResourceQuotaForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1ResourceQuotaForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1ResourceQuotaForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1ResourceQuotaForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1SecretForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1SecretForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1SecretForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1SecretForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1SecretForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1ServiceAccountForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1ServiceAccountForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1ServiceAccountForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1ServiceAccountForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1ServiceAccountForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListCoreV1ServiceForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListCoreV1ServiceForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListCoreV1ServiceForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListCoreV1ServiceForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListCoreV1ServiceForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListDiscoveryV1EndpointSliceForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListDiscoveryV1EndpointSliceForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListDiscoveryV1EndpointSliceForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListDiscoveryV1EndpointSliceForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListDiscoveryV1EndpointSliceForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListDiscoveryV1NamespacedEndpointSliceResponse(resp *http.Response, span trace.Span) (res ListDiscoveryV1NamespacedEndpointSliceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListDiscoveryV1NamespacedEndpointSliceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListDiscoveryV1NamespacedEndpointSliceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListDiscoveryV1NamespacedEndpointSliceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListDiscoveryV1beta1EndpointSliceForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListDiscoveryV1beta1EndpointSliceForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListDiscoveryV1beta1EndpointSliceForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListDiscoveryV1beta1NamespacedEndpointSliceResponse(resp *http.Response, span trace.Span) (res ListDiscoveryV1beta1NamespacedEndpointSliceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListDiscoveryV1beta1NamespacedEndpointSliceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListEventsV1EventForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListEventsV1EventForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListEventsV1EventForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListEventsV1EventForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListEventsV1EventForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListEventsV1NamespacedEventResponse(resp *http.Response, span trace.Span) (res ListEventsV1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListEventsV1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListEventsV1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListEventsV1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListEventsV1beta1EventForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListEventsV1beta1EventForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListEventsV1beta1EventForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListEventsV1beta1EventForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListEventsV1beta1EventForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListEventsV1beta1NamespacedEventResponse(resp *http.Response, span trace.Span) (res ListEventsV1beta1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListEventsV1beta1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListEventsV1beta1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListEventsV1beta1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListFlowcontrolApiserverV1beta1FlowSchemaResponse(resp *http.Response, span trace.Span) (res ListFlowcontrolApiserverV1beta1FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListFlowcontrolApiserverV1beta1FlowSchemaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListFlowcontrolApiserverV1beta2FlowSchemaResponse(resp *http.Response, span trace.Span) (res ListFlowcontrolApiserverV1beta2FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListFlowcontrolApiserverV1beta2FlowSchemaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListInternalApiserverV1alpha1StorageVersionResponse(resp *http.Response, span trace.Span) (res ListInternalApiserverV1alpha1StorageVersionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListInternalApiserverV1alpha1StorageVersionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListInternalApiserverV1alpha1StorageVersionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListInternalApiserverV1alpha1StorageVersionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListNetworkingV1IngressClassResponse(resp *http.Response, span trace.Span) (res ListNetworkingV1IngressClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListNetworkingV1IngressClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListNetworkingV1IngressClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListNetworkingV1IngressClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListNetworkingV1IngressForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListNetworkingV1IngressForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListNetworkingV1IngressForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListNetworkingV1IngressForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListNetworkingV1IngressForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListNetworkingV1NamespacedIngressResponse(resp *http.Response, span trace.Span) (res ListNetworkingV1NamespacedIngressRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListNetworkingV1NamespacedIngressApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListNetworkingV1NamespacedIngressApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListNetworkingV1NamespacedIngressUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListNetworkingV1NamespacedNetworkPolicyResponse(resp *http.Response, span trace.Span) (res ListNetworkingV1NamespacedNetworkPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListNetworkingV1NamespacedNetworkPolicyApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListNetworkingV1NamespacedNetworkPolicyApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListNetworkingV1NamespacedNetworkPolicyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListNetworkingV1NetworkPolicyForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListNetworkingV1NetworkPolicyForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListNetworkingV1NetworkPolicyForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListNetworkingV1NetworkPolicyForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListNetworkingV1NetworkPolicyForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListNodeV1RuntimeClassResponse(resp *http.Response, span trace.Span) (res ListNodeV1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListNodeV1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListNodeV1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListNodeV1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListNodeV1alpha1RuntimeClassResponse(resp *http.Response, span trace.Span) (res ListNodeV1alpha1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListNodeV1alpha1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListNodeV1alpha1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListNodeV1alpha1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListNodeV1beta1RuntimeClassResponse(resp *http.Response, span trace.Span) (res ListNodeV1beta1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListNodeV1beta1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListNodeV1beta1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListNodeV1beta1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListPolicyV1NamespacedPodDisruptionBudgetResponse(resp *http.Response, span trace.Span) (res ListPolicyV1NamespacedPodDisruptionBudgetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListPolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListPolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListPolicyV1NamespacedPodDisruptionBudgetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListPolicyV1PodDisruptionBudgetForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListPolicyV1PodDisruptionBudgetForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListPolicyV1PodDisruptionBudgetForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListPolicyV1beta1NamespacedPodDisruptionBudgetResponse(resp *http.Response, span trace.Span) (res ListPolicyV1beta1NamespacedPodDisruptionBudgetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListPolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListPolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListPolicyV1beta1PodDisruptionBudgetForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListPolicyV1beta1PodSecurityPolicyResponse(resp *http.Response, span trace.Span) (res ListPolicyV1beta1PodSecurityPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListPolicyV1beta1PodSecurityPolicyApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListPolicyV1beta1PodSecurityPolicyApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListPolicyV1beta1PodSecurityPolicyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListRbacAuthorizationV1ClusterRoleResponse(resp *http.Response, span trace.Span) (res ListRbacAuthorizationV1ClusterRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListRbacAuthorizationV1ClusterRoleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListRbacAuthorizationV1ClusterRoleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListRbacAuthorizationV1ClusterRoleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListRbacAuthorizationV1ClusterRoleBindingResponse(resp *http.Response, span trace.Span) (res ListRbacAuthorizationV1ClusterRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListRbacAuthorizationV1ClusterRoleBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListRbacAuthorizationV1NamespacedRoleResponse(resp *http.Response, span trace.Span) (res ListRbacAuthorizationV1NamespacedRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListRbacAuthorizationV1NamespacedRoleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListRbacAuthorizationV1NamespacedRoleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListRbacAuthorizationV1NamespacedRoleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListRbacAuthorizationV1NamespacedRoleBindingResponse(resp *http.Response, span trace.Span) (res ListRbacAuthorizationV1NamespacedRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListRbacAuthorizationV1NamespacedRoleBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListRbacAuthorizationV1RoleBindingForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListRbacAuthorizationV1RoleBindingForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListRbacAuthorizationV1RoleBindingForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListRbacAuthorizationV1RoleForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListRbacAuthorizationV1RoleForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListRbacAuthorizationV1RoleForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListRbacAuthorizationV1RoleForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListRbacAuthorizationV1RoleForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListSchedulingV1PriorityClassResponse(resp *http.Response, span trace.Span) (res ListSchedulingV1PriorityClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListSchedulingV1PriorityClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListSchedulingV1PriorityClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListSchedulingV1PriorityClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListStorageV1CSIDriverResponse(resp *http.Response, span trace.Span) (res ListStorageV1CSIDriverRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListStorageV1CSIDriverApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListStorageV1CSIDriverApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListStorageV1CSIDriverUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListStorageV1CSINodeResponse(resp *http.Response, span trace.Span) (res ListStorageV1CSINodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListStorageV1CSINodeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListStorageV1CSINodeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListStorageV1CSINodeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListStorageV1StorageClassResponse(resp *http.Response, span trace.Span) (res ListStorageV1StorageClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListStorageV1StorageClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListStorageV1StorageClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListStorageV1StorageClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListStorageV1VolumeAttachmentResponse(resp *http.Response, span trace.Span) (res ListStorageV1VolumeAttachmentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListStorageV1VolumeAttachmentApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListStorageV1VolumeAttachmentApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListStorageV1VolumeAttachmentUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListStorageV1alpha1CSIStorageCapacityForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListStorageV1alpha1CSIStorageCapacityForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListStorageV1alpha1CSIStorageCapacityForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListStorageV1alpha1NamespacedCSIStorageCapacityResponse(resp *http.Response, span trace.Span) (res ListStorageV1alpha1NamespacedCSIStorageCapacityRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListStorageV1beta1CSIStorageCapacityForAllNamespacesResponse(resp *http.Response, span trace.Span) (res ListStorageV1beta1CSIStorageCapacityForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListStorageV1beta1CSIStorageCapacityForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeListStorageV1beta1NamespacedCSIStorageCapacityResponse(resp *http.Response, span trace.Span) (res ListStorageV1beta1NamespacedCSIStorageCapacityRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ListStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ListStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ListStorageV1beta1NamespacedCSIStorageCapacityUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeLogFileHandlerResponse(resp *http.Response, span trace.Span) (res LogFileHandlerUnauthorized, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 401:
		return LogFileHandlerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeLogFileListHandlerResponse(resp *http.Response, span trace.Span) (res LogFileListHandlerUnauthorized, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 401:
		return LogFileListHandlerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAdmissionregistrationV1MutatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res PatchAdmissionregistrationV1MutatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAdmissionregistrationV1ValidatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res PatchAdmissionregistrationV1ValidatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchApiextensionsV1CustomResourceDefinitionResponse(resp *http.Response, span trace.Span) (res PatchApiextensionsV1CustomResourceDefinitionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchApiextensionsV1CustomResourceDefinitionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchApiextensionsV1CustomResourceDefinitionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchApiextensionsV1CustomResourceDefinitionApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchApiextensionsV1CustomResourceDefinitionApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchApiextensionsV1CustomResourceDefinitionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchApiextensionsV1CustomResourceDefinitionStatusResponse(resp *http.Response, span trace.Span) (res PatchApiextensionsV1CustomResourceDefinitionStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchApiextensionsV1CustomResourceDefinitionStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchApiextensionsV1CustomResourceDefinitionStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchApiextensionsV1CustomResourceDefinitionStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchApiextensionsV1CustomResourceDefinitionStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchApiextensionsV1CustomResourceDefinitionStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchApiregistrationV1APIServiceResponse(resp *http.Response, span trace.Span) (res PatchApiregistrationV1APIServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchApiregistrationV1APIServiceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchApiregistrationV1APIServiceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchApiregistrationV1APIServiceApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchApiregistrationV1APIServiceApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchApiregistrationV1APIServiceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchApiregistrationV1APIServiceStatusResponse(resp *http.Response, span trace.Span) (res PatchApiregistrationV1APIServiceStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchApiregistrationV1APIServiceStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchApiregistrationV1APIServiceStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchApiregistrationV1APIServiceStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchApiregistrationV1APIServiceStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchApiregistrationV1APIServiceStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAppsV1NamespacedControllerRevisionResponse(resp *http.Response, span trace.Span) (res PatchAppsV1NamespacedControllerRevisionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedControllerRevisionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedControllerRevisionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedControllerRevisionApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedControllerRevisionApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAppsV1NamespacedControllerRevisionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAppsV1NamespacedDaemonSetResponse(resp *http.Response, span trace.Span) (res PatchAppsV1NamespacedDaemonSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedDaemonSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedDaemonSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedDaemonSetApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedDaemonSetApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAppsV1NamespacedDaemonSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAppsV1NamespacedDaemonSetStatusResponse(resp *http.Response, span trace.Span) (res PatchAppsV1NamespacedDaemonSetStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedDaemonSetStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedDaemonSetStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedDaemonSetStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedDaemonSetStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAppsV1NamespacedDaemonSetStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAppsV1NamespacedDeploymentResponse(resp *http.Response, span trace.Span) (res PatchAppsV1NamespacedDeploymentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedDeploymentApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedDeploymentApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedDeploymentApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedDeploymentApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAppsV1NamespacedDeploymentUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAppsV1NamespacedDeploymentScaleResponse(resp *http.Response, span trace.Span) (res PatchAppsV1NamespacedDeploymentScaleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedDeploymentScaleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedDeploymentScaleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedDeploymentScaleApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedDeploymentScaleApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAppsV1NamespacedDeploymentScaleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAppsV1NamespacedDeploymentStatusResponse(resp *http.Response, span trace.Span) (res PatchAppsV1NamespacedDeploymentStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedDeploymentStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedDeploymentStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedDeploymentStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedDeploymentStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAppsV1NamespacedDeploymentStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAppsV1NamespacedReplicaSetResponse(resp *http.Response, span trace.Span) (res PatchAppsV1NamespacedReplicaSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedReplicaSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedReplicaSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedReplicaSetApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedReplicaSetApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAppsV1NamespacedReplicaSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAppsV1NamespacedReplicaSetScaleResponse(resp *http.Response, span trace.Span) (res PatchAppsV1NamespacedReplicaSetScaleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedReplicaSetScaleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedReplicaSetScaleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedReplicaSetScaleApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedReplicaSetScaleApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAppsV1NamespacedReplicaSetScaleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAppsV1NamespacedReplicaSetStatusResponse(resp *http.Response, span trace.Span) (res PatchAppsV1NamespacedReplicaSetStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedReplicaSetStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedReplicaSetStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedReplicaSetStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedReplicaSetStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAppsV1NamespacedReplicaSetStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAppsV1NamespacedStatefulSetResponse(resp *http.Response, span trace.Span) (res PatchAppsV1NamespacedStatefulSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedStatefulSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedStatefulSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedStatefulSetApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedStatefulSetApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAppsV1NamespacedStatefulSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAppsV1NamespacedStatefulSetScaleResponse(resp *http.Response, span trace.Span) (res PatchAppsV1NamespacedStatefulSetScaleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedStatefulSetScaleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedStatefulSetScaleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedStatefulSetScaleApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedStatefulSetScaleApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAppsV1NamespacedStatefulSetScaleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAppsV1NamespacedStatefulSetStatusResponse(resp *http.Response, span trace.Span) (res PatchAppsV1NamespacedStatefulSetStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedStatefulSetStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedStatefulSetStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAppsV1NamespacedStatefulSetStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAppsV1NamespacedStatefulSetStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAppsV1NamespacedStatefulSetStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAutoscalingV1NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res PatchAutoscalingV1NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse(resp *http.Response, span trace.Span) (res PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse(resp *http.Response, span trace.Span) (res PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusResponse(resp *http.Response, span trace.Span) (res PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchBatchV1NamespacedCronJobResponse(resp *http.Response, span trace.Span) (res PatchBatchV1NamespacedCronJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchBatchV1NamespacedCronJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchBatchV1NamespacedCronJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchBatchV1NamespacedCronJobApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchBatchV1NamespacedCronJobApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchBatchV1NamespacedCronJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchBatchV1NamespacedCronJobStatusResponse(resp *http.Response, span trace.Span) (res PatchBatchV1NamespacedCronJobStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchBatchV1NamespacedCronJobStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchBatchV1NamespacedCronJobStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchBatchV1NamespacedCronJobStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchBatchV1NamespacedCronJobStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchBatchV1NamespacedCronJobStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchBatchV1NamespacedJobResponse(resp *http.Response, span trace.Span) (res PatchBatchV1NamespacedJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchBatchV1NamespacedJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchBatchV1NamespacedJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchBatchV1NamespacedJobApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchBatchV1NamespacedJobApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchBatchV1NamespacedJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchBatchV1NamespacedJobStatusResponse(resp *http.Response, span trace.Span) (res PatchBatchV1NamespacedJobStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchBatchV1NamespacedJobStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchBatchV1NamespacedJobStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchBatchV1NamespacedJobStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchBatchV1NamespacedJobStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchBatchV1NamespacedJobStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchBatchV1beta1NamespacedCronJobResponse(resp *http.Response, span trace.Span) (res PatchBatchV1beta1NamespacedCronJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchBatchV1beta1NamespacedCronJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchBatchV1beta1NamespacedCronJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchBatchV1beta1NamespacedCronJobApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchBatchV1beta1NamespacedCronJobApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchBatchV1beta1NamespacedCronJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchBatchV1beta1NamespacedCronJobStatusResponse(resp *http.Response, span trace.Span) (res PatchBatchV1beta1NamespacedCronJobStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchBatchV1beta1NamespacedCronJobStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchBatchV1beta1NamespacedCronJobStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchBatchV1beta1NamespacedCronJobStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchBatchV1beta1NamespacedCronJobStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchBatchV1beta1NamespacedCronJobStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCertificatesV1CertificateSigningRequestResponse(resp *http.Response, span trace.Span) (res PatchCertificatesV1CertificateSigningRequestRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCertificatesV1CertificateSigningRequestApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCertificatesV1CertificateSigningRequestApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCertificatesV1CertificateSigningRequestApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCertificatesV1CertificateSigningRequestApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCertificatesV1CertificateSigningRequestUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCertificatesV1CertificateSigningRequestApprovalResponse(resp *http.Response, span trace.Span) (res PatchCertificatesV1CertificateSigningRequestApprovalRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCertificatesV1CertificateSigningRequestApprovalApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCertificatesV1CertificateSigningRequestApprovalApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCertificatesV1CertificateSigningRequestApprovalApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCertificatesV1CertificateSigningRequestApprovalApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCertificatesV1CertificateSigningRequestApprovalUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCertificatesV1CertificateSigningRequestStatusResponse(resp *http.Response, span trace.Span) (res PatchCertificatesV1CertificateSigningRequestStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCertificatesV1CertificateSigningRequestStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCertificatesV1CertificateSigningRequestStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCertificatesV1CertificateSigningRequestStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCertificatesV1CertificateSigningRequestStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCertificatesV1CertificateSigningRequestStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoordinationV1NamespacedLeaseResponse(resp *http.Response, span trace.Span) (res PatchCoordinationV1NamespacedLeaseRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoordinationV1NamespacedLeaseApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoordinationV1NamespacedLeaseApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoordinationV1NamespacedLeaseApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoordinationV1NamespacedLeaseApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoordinationV1NamespacedLeaseUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespaceResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespaceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespaceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespaceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespaceApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespaceApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespaceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespaceStatusResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespaceStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespaceStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespaceStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespaceStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespaceStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespaceStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedConfigMapResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedConfigMapRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedConfigMapApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedConfigMapApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedConfigMapApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedConfigMapApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedConfigMapUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedEndpointsResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedEndpointsRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedEndpointsApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedEndpointsApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedEndpointsApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedEndpointsApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedEndpointsUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedEventResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedEventApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedEventApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedLimitRangeResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedLimitRangeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedLimitRangeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedLimitRangeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedLimitRangeApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedLimitRangeApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedLimitRangeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedPersistentVolumeClaimResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedPersistentVolumeClaimRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedPersistentVolumeClaimApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedPersistentVolumeClaimApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedPersistentVolumeClaimUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedPersistentVolumeClaimStatusResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedPersistentVolumeClaimStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedPersistentVolumeClaimStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedPersistentVolumeClaimStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedPersistentVolumeClaimStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedPersistentVolumeClaimStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedPersistentVolumeClaimStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedPodResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedPodRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedPodApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedPodApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedPodApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedPodApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedPodUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedPodEphemeralcontainersResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedPodEphemeralcontainersRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedPodEphemeralcontainersApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedPodEphemeralcontainersApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedPodEphemeralcontainersApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedPodEphemeralcontainersApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedPodEphemeralcontainersUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedPodStatusResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedPodStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedPodStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedPodStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedPodStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedPodStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedPodStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedPodTemplateResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedPodTemplateRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedPodTemplateApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedPodTemplateApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedPodTemplateApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedPodTemplateApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedPodTemplateUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedReplicationControllerResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedReplicationControllerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedReplicationControllerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedReplicationControllerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedReplicationControllerApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedReplicationControllerApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedReplicationControllerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedReplicationControllerScaleResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedReplicationControllerScaleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedReplicationControllerScaleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedReplicationControllerScaleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedReplicationControllerScaleApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedReplicationControllerScaleApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedReplicationControllerScaleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedReplicationControllerStatusResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedReplicationControllerStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedReplicationControllerStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedReplicationControllerStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedReplicationControllerStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedReplicationControllerStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedReplicationControllerStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedResourceQuotaResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedResourceQuotaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedResourceQuotaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedResourceQuotaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedResourceQuotaApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedResourceQuotaApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedResourceQuotaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedResourceQuotaStatusResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedResourceQuotaStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedResourceQuotaStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedResourceQuotaStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedResourceQuotaStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedResourceQuotaStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedResourceQuotaStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedSecretResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedSecretRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedSecretApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedSecretApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedSecretApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedSecretApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedSecretUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedServiceResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedServiceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedServiceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedServiceApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedServiceApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedServiceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedServiceAccountResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedServiceAccountRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedServiceAccountApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedServiceAccountApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedServiceAccountApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedServiceAccountApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedServiceAccountUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NamespacedServiceStatusResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NamespacedServiceStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedServiceStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedServiceStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NamespacedServiceStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NamespacedServiceStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NamespacedServiceStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NodeResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NodeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NodeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NodeApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NodeApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NodeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1NodeStatusResponse(resp *http.Response, span trace.Span) (res PatchCoreV1NodeStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NodeStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NodeStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1NodeStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1NodeStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1NodeStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1PersistentVolumeResponse(resp *http.Response, span trace.Span) (res PatchCoreV1PersistentVolumeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1PersistentVolumeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1PersistentVolumeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1PersistentVolumeApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1PersistentVolumeApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1PersistentVolumeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchCoreV1PersistentVolumeStatusResponse(resp *http.Response, span trace.Span) (res PatchCoreV1PersistentVolumeStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1PersistentVolumeStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1PersistentVolumeStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchCoreV1PersistentVolumeStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchCoreV1PersistentVolumeStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchCoreV1PersistentVolumeStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchDiscoveryV1NamespacedEndpointSliceResponse(resp *http.Response, span trace.Span) (res PatchDiscoveryV1NamespacedEndpointSliceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchDiscoveryV1NamespacedEndpointSliceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchDiscoveryV1NamespacedEndpointSliceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchDiscoveryV1NamespacedEndpointSliceApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchDiscoveryV1NamespacedEndpointSliceApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchDiscoveryV1NamespacedEndpointSliceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchDiscoveryV1beta1NamespacedEndpointSliceResponse(resp *http.Response, span trace.Span) (res PatchDiscoveryV1beta1NamespacedEndpointSliceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchDiscoveryV1beta1NamespacedEndpointSliceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchEventsV1NamespacedEventResponse(resp *http.Response, span trace.Span) (res PatchEventsV1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchEventsV1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchEventsV1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchEventsV1NamespacedEventApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchEventsV1NamespacedEventApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchEventsV1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchEventsV1beta1NamespacedEventResponse(resp *http.Response, span trace.Span) (res PatchEventsV1beta1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchEventsV1beta1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchEventsV1beta1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchEventsV1beta1NamespacedEventApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchEventsV1beta1NamespacedEventApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchEventsV1beta1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchFlowcontrolApiserverV1beta1FlowSchemaResponse(resp *http.Response, span trace.Span) (res PatchFlowcontrolApiserverV1beta1FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchFlowcontrolApiserverV1beta1FlowSchemaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchFlowcontrolApiserverV1beta1FlowSchemaStatusResponse(resp *http.Response, span trace.Span) (res PatchFlowcontrolApiserverV1beta1FlowSchemaStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchFlowcontrolApiserverV1beta1FlowSchemaStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusResponse(resp *http.Response, span trace.Span) (res PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchFlowcontrolApiserverV1beta2FlowSchemaResponse(resp *http.Response, span trace.Span) (res PatchFlowcontrolApiserverV1beta2FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchFlowcontrolApiserverV1beta2FlowSchemaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchFlowcontrolApiserverV1beta2FlowSchemaStatusResponse(resp *http.Response, span trace.Span) (res PatchFlowcontrolApiserverV1beta2FlowSchemaStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchFlowcontrolApiserverV1beta2FlowSchemaStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusResponse(resp *http.Response, span trace.Span) (res PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchInternalApiserverV1alpha1StorageVersionResponse(resp *http.Response, span trace.Span) (res PatchInternalApiserverV1alpha1StorageVersionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchInternalApiserverV1alpha1StorageVersionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchInternalApiserverV1alpha1StorageVersionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchInternalApiserverV1alpha1StorageVersionApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchInternalApiserverV1alpha1StorageVersionApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchInternalApiserverV1alpha1StorageVersionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchInternalApiserverV1alpha1StorageVersionStatusResponse(resp *http.Response, span trace.Span) (res PatchInternalApiserverV1alpha1StorageVersionStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchInternalApiserverV1alpha1StorageVersionStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchInternalApiserverV1alpha1StorageVersionStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchInternalApiserverV1alpha1StorageVersionStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchInternalApiserverV1alpha1StorageVersionStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchInternalApiserverV1alpha1StorageVersionStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchNetworkingV1IngressClassResponse(resp *http.Response, span trace.Span) (res PatchNetworkingV1IngressClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchNetworkingV1IngressClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchNetworkingV1IngressClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchNetworkingV1IngressClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchNetworkingV1IngressClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchNetworkingV1IngressClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchNetworkingV1NamespacedIngressResponse(resp *http.Response, span trace.Span) (res PatchNetworkingV1NamespacedIngressRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchNetworkingV1NamespacedIngressApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchNetworkingV1NamespacedIngressApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchNetworkingV1NamespacedIngressApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchNetworkingV1NamespacedIngressApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchNetworkingV1NamespacedIngressUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchNetworkingV1NamespacedIngressStatusResponse(resp *http.Response, span trace.Span) (res PatchNetworkingV1NamespacedIngressStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchNetworkingV1NamespacedIngressStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchNetworkingV1NamespacedIngressStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchNetworkingV1NamespacedIngressStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchNetworkingV1NamespacedIngressStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchNetworkingV1NamespacedIngressStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchNetworkingV1NamespacedNetworkPolicyResponse(resp *http.Response, span trace.Span) (res PatchNetworkingV1NamespacedNetworkPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchNetworkingV1NamespacedNetworkPolicyApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchNetworkingV1NamespacedNetworkPolicyApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchNetworkingV1NamespacedNetworkPolicyApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchNetworkingV1NamespacedNetworkPolicyApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchNetworkingV1NamespacedNetworkPolicyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchNodeV1RuntimeClassResponse(resp *http.Response, span trace.Span) (res PatchNodeV1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchNodeV1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchNodeV1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchNodeV1RuntimeClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchNodeV1RuntimeClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchNodeV1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchNodeV1alpha1RuntimeClassResponse(resp *http.Response, span trace.Span) (res PatchNodeV1alpha1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchNodeV1alpha1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchNodeV1alpha1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchNodeV1alpha1RuntimeClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchNodeV1alpha1RuntimeClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchNodeV1alpha1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchNodeV1beta1RuntimeClassResponse(resp *http.Response, span trace.Span) (res PatchNodeV1beta1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchNodeV1beta1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchNodeV1beta1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchNodeV1beta1RuntimeClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchNodeV1beta1RuntimeClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchNodeV1beta1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchPolicyV1NamespacedPodDisruptionBudgetResponse(resp *http.Response, span trace.Span) (res PatchPolicyV1NamespacedPodDisruptionBudgetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchPolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchPolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchPolicyV1NamespacedPodDisruptionBudgetApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchPolicyV1NamespacedPodDisruptionBudgetApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchPolicyV1NamespacedPodDisruptionBudgetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchPolicyV1NamespacedPodDisruptionBudgetStatusResponse(resp *http.Response, span trace.Span) (res PatchPolicyV1NamespacedPodDisruptionBudgetStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchPolicyV1NamespacedPodDisruptionBudgetStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchPolicyV1NamespacedPodDisruptionBudgetStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchPolicyV1NamespacedPodDisruptionBudgetStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchPolicyV1NamespacedPodDisruptionBudgetStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchPolicyV1NamespacedPodDisruptionBudgetStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchPolicyV1beta1NamespacedPodDisruptionBudgetResponse(resp *http.Response, span trace.Span) (res PatchPolicyV1beta1NamespacedPodDisruptionBudgetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchPolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchPolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchPolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchPolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse(resp *http.Response, span trace.Span) (res PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchPolicyV1beta1PodSecurityPolicyResponse(resp *http.Response, span trace.Span) (res PatchPolicyV1beta1PodSecurityPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchPolicyV1beta1PodSecurityPolicyApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchPolicyV1beta1PodSecurityPolicyApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchPolicyV1beta1PodSecurityPolicyApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchPolicyV1beta1PodSecurityPolicyApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchPolicyV1beta1PodSecurityPolicyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchRbacAuthorizationV1ClusterRoleResponse(resp *http.Response, span trace.Span) (res PatchRbacAuthorizationV1ClusterRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchRbacAuthorizationV1ClusterRoleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchRbacAuthorizationV1ClusterRoleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchRbacAuthorizationV1ClusterRoleApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchRbacAuthorizationV1ClusterRoleApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchRbacAuthorizationV1ClusterRoleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchRbacAuthorizationV1ClusterRoleBindingResponse(resp *http.Response, span trace.Span) (res PatchRbacAuthorizationV1ClusterRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchRbacAuthorizationV1ClusterRoleBindingApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchRbacAuthorizationV1ClusterRoleBindingApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchRbacAuthorizationV1ClusterRoleBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchRbacAuthorizationV1NamespacedRoleResponse(resp *http.Response, span trace.Span) (res PatchRbacAuthorizationV1NamespacedRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchRbacAuthorizationV1NamespacedRoleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchRbacAuthorizationV1NamespacedRoleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchRbacAuthorizationV1NamespacedRoleApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchRbacAuthorizationV1NamespacedRoleApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchRbacAuthorizationV1NamespacedRoleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchRbacAuthorizationV1NamespacedRoleBindingResponse(resp *http.Response, span trace.Span) (res PatchRbacAuthorizationV1NamespacedRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchRbacAuthorizationV1NamespacedRoleBindingApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchRbacAuthorizationV1NamespacedRoleBindingApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchRbacAuthorizationV1NamespacedRoleBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchSchedulingV1PriorityClassResponse(resp *http.Response, span trace.Span) (res PatchSchedulingV1PriorityClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchSchedulingV1PriorityClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchSchedulingV1PriorityClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchSchedulingV1PriorityClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchSchedulingV1PriorityClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchSchedulingV1PriorityClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchStorageV1CSIDriverResponse(resp *http.Response, span trace.Span) (res PatchStorageV1CSIDriverRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchStorageV1CSIDriverApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchStorageV1CSIDriverApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchStorageV1CSIDriverApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchStorageV1CSIDriverApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchStorageV1CSIDriverUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchStorageV1CSINodeResponse(resp *http.Response, span trace.Span) (res PatchStorageV1CSINodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchStorageV1CSINodeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchStorageV1CSINodeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchStorageV1CSINodeApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchStorageV1CSINodeApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchStorageV1CSINodeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchStorageV1StorageClassResponse(resp *http.Response, span trace.Span) (res PatchStorageV1StorageClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchStorageV1StorageClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchStorageV1StorageClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchStorageV1StorageClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchStorageV1StorageClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchStorageV1StorageClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchStorageV1VolumeAttachmentResponse(resp *http.Response, span trace.Span) (res PatchStorageV1VolumeAttachmentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchStorageV1VolumeAttachmentApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchStorageV1VolumeAttachmentApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchStorageV1VolumeAttachmentApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchStorageV1VolumeAttachmentApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchStorageV1VolumeAttachmentUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchStorageV1VolumeAttachmentStatusResponse(resp *http.Response, span trace.Span) (res PatchStorageV1VolumeAttachmentStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchStorageV1VolumeAttachmentStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchStorageV1VolumeAttachmentStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchStorageV1VolumeAttachmentStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchStorageV1VolumeAttachmentStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchStorageV1VolumeAttachmentStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchStorageV1alpha1NamespacedCSIStorageCapacityResponse(resp *http.Response, span trace.Span) (res PatchStorageV1alpha1NamespacedCSIStorageCapacityRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePatchStorageV1beta1NamespacedCSIStorageCapacityResponse(resp *http.Response, span trace.Span) (res PatchStorageV1beta1NamespacedCSIStorageCapacityRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "PatchStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response PatchStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "PatchStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &PatchStorageV1beta1NamespacedCSIStorageCapacityUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAdmissionregistrationV1MutatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res ReadAdmissionregistrationV1MutatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAdmissionregistrationV1ValidatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res ReadAdmissionregistrationV1ValidatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadApiextensionsV1CustomResourceDefinitionResponse(resp *http.Response, span trace.Span) (res ReadApiextensionsV1CustomResourceDefinitionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadApiextensionsV1CustomResourceDefinitionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadApiextensionsV1CustomResourceDefinitionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadApiextensionsV1CustomResourceDefinitionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadApiextensionsV1CustomResourceDefinitionStatusResponse(resp *http.Response, span trace.Span) (res ReadApiextensionsV1CustomResourceDefinitionStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadApiextensionsV1CustomResourceDefinitionStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadApiextensionsV1CustomResourceDefinitionStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadApiextensionsV1CustomResourceDefinitionStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadApiregistrationV1APIServiceResponse(resp *http.Response, span trace.Span) (res ReadApiregistrationV1APIServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadApiregistrationV1APIServiceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadApiregistrationV1APIServiceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadApiregistrationV1APIServiceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadApiregistrationV1APIServiceStatusResponse(resp *http.Response, span trace.Span) (res ReadApiregistrationV1APIServiceStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadApiregistrationV1APIServiceStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadApiregistrationV1APIServiceStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadApiregistrationV1APIServiceStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAppsV1NamespacedControllerRevisionResponse(resp *http.Response, span trace.Span) (res ReadAppsV1NamespacedControllerRevisionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAppsV1NamespacedControllerRevisionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAppsV1NamespacedControllerRevisionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAppsV1NamespacedControllerRevisionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAppsV1NamespacedDaemonSetResponse(resp *http.Response, span trace.Span) (res ReadAppsV1NamespacedDaemonSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAppsV1NamespacedDaemonSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAppsV1NamespacedDaemonSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAppsV1NamespacedDaemonSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAppsV1NamespacedDaemonSetStatusResponse(resp *http.Response, span trace.Span) (res ReadAppsV1NamespacedDaemonSetStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAppsV1NamespacedDaemonSetStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAppsV1NamespacedDaemonSetStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAppsV1NamespacedDaemonSetStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAppsV1NamespacedDeploymentResponse(resp *http.Response, span trace.Span) (res ReadAppsV1NamespacedDeploymentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAppsV1NamespacedDeploymentApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAppsV1NamespacedDeploymentApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAppsV1NamespacedDeploymentUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAppsV1NamespacedDeploymentScaleResponse(resp *http.Response, span trace.Span) (res ReadAppsV1NamespacedDeploymentScaleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAppsV1NamespacedDeploymentScaleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAppsV1NamespacedDeploymentScaleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAppsV1NamespacedDeploymentScaleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAppsV1NamespacedDeploymentStatusResponse(resp *http.Response, span trace.Span) (res ReadAppsV1NamespacedDeploymentStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAppsV1NamespacedDeploymentStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAppsV1NamespacedDeploymentStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAppsV1NamespacedDeploymentStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAppsV1NamespacedReplicaSetResponse(resp *http.Response, span trace.Span) (res ReadAppsV1NamespacedReplicaSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAppsV1NamespacedReplicaSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAppsV1NamespacedReplicaSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAppsV1NamespacedReplicaSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAppsV1NamespacedReplicaSetScaleResponse(resp *http.Response, span trace.Span) (res ReadAppsV1NamespacedReplicaSetScaleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAppsV1NamespacedReplicaSetScaleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAppsV1NamespacedReplicaSetScaleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAppsV1NamespacedReplicaSetScaleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAppsV1NamespacedReplicaSetStatusResponse(resp *http.Response, span trace.Span) (res ReadAppsV1NamespacedReplicaSetStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAppsV1NamespacedReplicaSetStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAppsV1NamespacedReplicaSetStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAppsV1NamespacedReplicaSetStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAppsV1NamespacedStatefulSetResponse(resp *http.Response, span trace.Span) (res ReadAppsV1NamespacedStatefulSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAppsV1NamespacedStatefulSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAppsV1NamespacedStatefulSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAppsV1NamespacedStatefulSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAppsV1NamespacedStatefulSetScaleResponse(resp *http.Response, span trace.Span) (res ReadAppsV1NamespacedStatefulSetScaleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAppsV1NamespacedStatefulSetScaleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAppsV1NamespacedStatefulSetScaleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAppsV1NamespacedStatefulSetScaleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAppsV1NamespacedStatefulSetStatusResponse(resp *http.Response, span trace.Span) (res ReadAppsV1NamespacedStatefulSetStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAppsV1NamespacedStatefulSetStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAppsV1NamespacedStatefulSetStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAppsV1NamespacedStatefulSetStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAutoscalingV1NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res ReadAutoscalingV1NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse(resp *http.Response, span trace.Span) (res ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse(resp *http.Response, span trace.Span) (res ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusResponse(resp *http.Response, span trace.Span) (res ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadBatchV1NamespacedCronJobResponse(resp *http.Response, span trace.Span) (res ReadBatchV1NamespacedCronJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadBatchV1NamespacedCronJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadBatchV1NamespacedCronJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadBatchV1NamespacedCronJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadBatchV1NamespacedCronJobStatusResponse(resp *http.Response, span trace.Span) (res ReadBatchV1NamespacedCronJobStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadBatchV1NamespacedCronJobStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadBatchV1NamespacedCronJobStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadBatchV1NamespacedCronJobStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadBatchV1NamespacedJobResponse(resp *http.Response, span trace.Span) (res ReadBatchV1NamespacedJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadBatchV1NamespacedJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadBatchV1NamespacedJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadBatchV1NamespacedJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadBatchV1NamespacedJobStatusResponse(resp *http.Response, span trace.Span) (res ReadBatchV1NamespacedJobStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadBatchV1NamespacedJobStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadBatchV1NamespacedJobStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadBatchV1NamespacedJobStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadBatchV1beta1NamespacedCronJobResponse(resp *http.Response, span trace.Span) (res ReadBatchV1beta1NamespacedCronJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadBatchV1beta1NamespacedCronJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadBatchV1beta1NamespacedCronJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadBatchV1beta1NamespacedCronJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadBatchV1beta1NamespacedCronJobStatusResponse(resp *http.Response, span trace.Span) (res ReadBatchV1beta1NamespacedCronJobStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadBatchV1beta1NamespacedCronJobStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadBatchV1beta1NamespacedCronJobStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadBatchV1beta1NamespacedCronJobStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCertificatesV1CertificateSigningRequestResponse(resp *http.Response, span trace.Span) (res ReadCertificatesV1CertificateSigningRequestRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCertificatesV1CertificateSigningRequestApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCertificatesV1CertificateSigningRequestApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCertificatesV1CertificateSigningRequestUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCertificatesV1CertificateSigningRequestApprovalResponse(resp *http.Response, span trace.Span) (res ReadCertificatesV1CertificateSigningRequestApprovalRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCertificatesV1CertificateSigningRequestApprovalApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCertificatesV1CertificateSigningRequestApprovalApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCertificatesV1CertificateSigningRequestApprovalUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCertificatesV1CertificateSigningRequestStatusResponse(resp *http.Response, span trace.Span) (res ReadCertificatesV1CertificateSigningRequestStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCertificatesV1CertificateSigningRequestStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCertificatesV1CertificateSigningRequestStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCertificatesV1CertificateSigningRequestStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoordinationV1NamespacedLeaseResponse(resp *http.Response, span trace.Span) (res ReadCoordinationV1NamespacedLeaseRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoordinationV1NamespacedLeaseApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoordinationV1NamespacedLeaseApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoordinationV1NamespacedLeaseUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1ComponentStatusResponse(resp *http.Response, span trace.Span) (res ReadCoreV1ComponentStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1ComponentStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1ComponentStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1ComponentStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespaceResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespaceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespaceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespaceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespaceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespaceStatusResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespaceStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespaceStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespaceStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespaceStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedConfigMapResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedConfigMapRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedConfigMapApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedConfigMapApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedConfigMapUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedEndpointsResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedEndpointsRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedEndpointsApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedEndpointsApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedEndpointsUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedEventResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedLimitRangeResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedLimitRangeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedLimitRangeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedLimitRangeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedLimitRangeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedPersistentVolumeClaimResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedPersistentVolumeClaimRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedPersistentVolumeClaimUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedPersistentVolumeClaimStatusResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedPersistentVolumeClaimStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedPersistentVolumeClaimStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedPersistentVolumeClaimStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedPersistentVolumeClaimStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedPodResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedPodRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedPodApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedPodApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedPodUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedPodEphemeralcontainersResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedPodEphemeralcontainersRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedPodEphemeralcontainersApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedPodEphemeralcontainersApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedPodEphemeralcontainersUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedPodLogResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedPodLogRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedPodLogOKApplicationJSON
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedPodLogOKApplicationJSON" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		case "text/plain":
			return res, errors.New("text/plain decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedPodLogUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedPodStatusResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedPodStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedPodStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedPodStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedPodStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedPodTemplateResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedPodTemplateRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedPodTemplateApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedPodTemplateApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedPodTemplateUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedReplicationControllerResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedReplicationControllerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedReplicationControllerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedReplicationControllerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedReplicationControllerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedReplicationControllerScaleResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedReplicationControllerScaleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedReplicationControllerScaleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedReplicationControllerScaleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedReplicationControllerScaleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedReplicationControllerStatusResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedReplicationControllerStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedReplicationControllerStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedReplicationControllerStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedReplicationControllerStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedResourceQuotaResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedResourceQuotaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedResourceQuotaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedResourceQuotaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedResourceQuotaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedResourceQuotaStatusResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedResourceQuotaStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedResourceQuotaStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedResourceQuotaStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedResourceQuotaStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedSecretResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedSecretRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedSecretApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedSecretApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedSecretUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedServiceResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedServiceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedServiceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedServiceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedServiceAccountResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedServiceAccountRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedServiceAccountApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedServiceAccountApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedServiceAccountUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NamespacedServiceStatusResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NamespacedServiceStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NamespacedServiceStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NamespacedServiceStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NamespacedServiceStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NodeResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NodeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NodeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NodeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1NodeStatusResponse(resp *http.Response, span trace.Span) (res ReadCoreV1NodeStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1NodeStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1NodeStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1NodeStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1PersistentVolumeResponse(resp *http.Response, span trace.Span) (res ReadCoreV1PersistentVolumeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1PersistentVolumeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1PersistentVolumeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1PersistentVolumeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadCoreV1PersistentVolumeStatusResponse(resp *http.Response, span trace.Span) (res ReadCoreV1PersistentVolumeStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadCoreV1PersistentVolumeStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadCoreV1PersistentVolumeStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadCoreV1PersistentVolumeStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadDiscoveryV1NamespacedEndpointSliceResponse(resp *http.Response, span trace.Span) (res ReadDiscoveryV1NamespacedEndpointSliceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadDiscoveryV1NamespacedEndpointSliceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadDiscoveryV1NamespacedEndpointSliceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadDiscoveryV1NamespacedEndpointSliceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadDiscoveryV1beta1NamespacedEndpointSliceResponse(resp *http.Response, span trace.Span) (res ReadDiscoveryV1beta1NamespacedEndpointSliceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadDiscoveryV1beta1NamespacedEndpointSliceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadEventsV1NamespacedEventResponse(resp *http.Response, span trace.Span) (res ReadEventsV1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadEventsV1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadEventsV1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadEventsV1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadEventsV1beta1NamespacedEventResponse(resp *http.Response, span trace.Span) (res ReadEventsV1beta1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadEventsV1beta1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadEventsV1beta1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadEventsV1beta1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadFlowcontrolApiserverV1beta1FlowSchemaResponse(resp *http.Response, span trace.Span) (res ReadFlowcontrolApiserverV1beta1FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadFlowcontrolApiserverV1beta1FlowSchemaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadFlowcontrolApiserverV1beta1FlowSchemaStatusResponse(resp *http.Response, span trace.Span) (res ReadFlowcontrolApiserverV1beta1FlowSchemaStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadFlowcontrolApiserverV1beta1FlowSchemaStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusResponse(resp *http.Response, span trace.Span) (res ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadFlowcontrolApiserverV1beta2FlowSchemaResponse(resp *http.Response, span trace.Span) (res ReadFlowcontrolApiserverV1beta2FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadFlowcontrolApiserverV1beta2FlowSchemaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadFlowcontrolApiserverV1beta2FlowSchemaStatusResponse(resp *http.Response, span trace.Span) (res ReadFlowcontrolApiserverV1beta2FlowSchemaStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadFlowcontrolApiserverV1beta2FlowSchemaStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusResponse(resp *http.Response, span trace.Span) (res ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadInternalApiserverV1alpha1StorageVersionResponse(resp *http.Response, span trace.Span) (res ReadInternalApiserverV1alpha1StorageVersionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadInternalApiserverV1alpha1StorageVersionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadInternalApiserverV1alpha1StorageVersionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadInternalApiserverV1alpha1StorageVersionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadInternalApiserverV1alpha1StorageVersionStatusResponse(resp *http.Response, span trace.Span) (res ReadInternalApiserverV1alpha1StorageVersionStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadInternalApiserverV1alpha1StorageVersionStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadInternalApiserverV1alpha1StorageVersionStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadInternalApiserverV1alpha1StorageVersionStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadNetworkingV1IngressClassResponse(resp *http.Response, span trace.Span) (res ReadNetworkingV1IngressClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadNetworkingV1IngressClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadNetworkingV1IngressClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadNetworkingV1IngressClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadNetworkingV1NamespacedIngressResponse(resp *http.Response, span trace.Span) (res ReadNetworkingV1NamespacedIngressRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadNetworkingV1NamespacedIngressApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadNetworkingV1NamespacedIngressApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadNetworkingV1NamespacedIngressUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadNetworkingV1NamespacedIngressStatusResponse(resp *http.Response, span trace.Span) (res ReadNetworkingV1NamespacedIngressStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadNetworkingV1NamespacedIngressStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadNetworkingV1NamespacedIngressStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadNetworkingV1NamespacedIngressStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadNetworkingV1NamespacedNetworkPolicyResponse(resp *http.Response, span trace.Span) (res ReadNetworkingV1NamespacedNetworkPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadNetworkingV1NamespacedNetworkPolicyApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadNetworkingV1NamespacedNetworkPolicyApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadNetworkingV1NamespacedNetworkPolicyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadNodeV1RuntimeClassResponse(resp *http.Response, span trace.Span) (res ReadNodeV1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadNodeV1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadNodeV1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadNodeV1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadNodeV1alpha1RuntimeClassResponse(resp *http.Response, span trace.Span) (res ReadNodeV1alpha1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadNodeV1alpha1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadNodeV1alpha1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadNodeV1alpha1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadNodeV1beta1RuntimeClassResponse(resp *http.Response, span trace.Span) (res ReadNodeV1beta1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadNodeV1beta1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadNodeV1beta1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadNodeV1beta1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadPolicyV1NamespacedPodDisruptionBudgetResponse(resp *http.Response, span trace.Span) (res ReadPolicyV1NamespacedPodDisruptionBudgetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadPolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadPolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadPolicyV1NamespacedPodDisruptionBudgetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadPolicyV1NamespacedPodDisruptionBudgetStatusResponse(resp *http.Response, span trace.Span) (res ReadPolicyV1NamespacedPodDisruptionBudgetStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadPolicyV1NamespacedPodDisruptionBudgetStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadPolicyV1NamespacedPodDisruptionBudgetStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadPolicyV1NamespacedPodDisruptionBudgetStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadPolicyV1beta1NamespacedPodDisruptionBudgetResponse(resp *http.Response, span trace.Span) (res ReadPolicyV1beta1NamespacedPodDisruptionBudgetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadPolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadPolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse(resp *http.Response, span trace.Span) (res ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadPolicyV1beta1PodSecurityPolicyResponse(resp *http.Response, span trace.Span) (res ReadPolicyV1beta1PodSecurityPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadPolicyV1beta1PodSecurityPolicyApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadPolicyV1beta1PodSecurityPolicyApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadPolicyV1beta1PodSecurityPolicyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadRbacAuthorizationV1ClusterRoleResponse(resp *http.Response, span trace.Span) (res ReadRbacAuthorizationV1ClusterRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadRbacAuthorizationV1ClusterRoleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadRbacAuthorizationV1ClusterRoleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadRbacAuthorizationV1ClusterRoleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadRbacAuthorizationV1ClusterRoleBindingResponse(resp *http.Response, span trace.Span) (res ReadRbacAuthorizationV1ClusterRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadRbacAuthorizationV1ClusterRoleBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadRbacAuthorizationV1NamespacedRoleResponse(resp *http.Response, span trace.Span) (res ReadRbacAuthorizationV1NamespacedRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadRbacAuthorizationV1NamespacedRoleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadRbacAuthorizationV1NamespacedRoleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadRbacAuthorizationV1NamespacedRoleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadRbacAuthorizationV1NamespacedRoleBindingResponse(resp *http.Response, span trace.Span) (res ReadRbacAuthorizationV1NamespacedRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadRbacAuthorizationV1NamespacedRoleBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadSchedulingV1PriorityClassResponse(resp *http.Response, span trace.Span) (res ReadSchedulingV1PriorityClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadSchedulingV1PriorityClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadSchedulingV1PriorityClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadSchedulingV1PriorityClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadStorageV1CSIDriverResponse(resp *http.Response, span trace.Span) (res ReadStorageV1CSIDriverRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadStorageV1CSIDriverApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadStorageV1CSIDriverApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadStorageV1CSIDriverUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadStorageV1CSINodeResponse(resp *http.Response, span trace.Span) (res ReadStorageV1CSINodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadStorageV1CSINodeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadStorageV1CSINodeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadStorageV1CSINodeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadStorageV1StorageClassResponse(resp *http.Response, span trace.Span) (res ReadStorageV1StorageClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadStorageV1StorageClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadStorageV1StorageClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadStorageV1StorageClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadStorageV1VolumeAttachmentResponse(resp *http.Response, span trace.Span) (res ReadStorageV1VolumeAttachmentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadStorageV1VolumeAttachmentApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadStorageV1VolumeAttachmentApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadStorageV1VolumeAttachmentUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadStorageV1VolumeAttachmentStatusResponse(resp *http.Response, span trace.Span) (res ReadStorageV1VolumeAttachmentStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadStorageV1VolumeAttachmentStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadStorageV1VolumeAttachmentStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadStorageV1VolumeAttachmentStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadStorageV1alpha1NamespacedCSIStorageCapacityResponse(resp *http.Response, span trace.Span) (res ReadStorageV1alpha1NamespacedCSIStorageCapacityRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReadStorageV1beta1NamespacedCSIStorageCapacityResponse(resp *http.Response, span trace.Span) (res ReadStorageV1beta1NamespacedCSIStorageCapacityRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReadStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReadStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReadStorageV1beta1NamespacedCSIStorageCapacityUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAdmissionregistrationV1MutatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res ReplaceAdmissionregistrationV1MutatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAdmissionregistrationV1ValidatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceApiextensionsV1CustomResourceDefinitionResponse(resp *http.Response, span trace.Span) (res ReplaceApiextensionsV1CustomResourceDefinitionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceApiextensionsV1CustomResourceDefinitionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceApiextensionsV1CustomResourceDefinitionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceApiextensionsV1CustomResourceDefinitionApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceApiextensionsV1CustomResourceDefinitionApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceApiextensionsV1CustomResourceDefinitionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceApiextensionsV1CustomResourceDefinitionStatusResponse(resp *http.Response, span trace.Span) (res ReplaceApiextensionsV1CustomResourceDefinitionStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceApiextensionsV1CustomResourceDefinitionStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceApiextensionsV1CustomResourceDefinitionStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceApiextensionsV1CustomResourceDefinitionStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceApiextensionsV1CustomResourceDefinitionStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceApiextensionsV1CustomResourceDefinitionStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceApiregistrationV1APIServiceResponse(resp *http.Response, span trace.Span) (res ReplaceApiregistrationV1APIServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceApiregistrationV1APIServiceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceApiregistrationV1APIServiceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceApiregistrationV1APIServiceApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceApiregistrationV1APIServiceApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceApiregistrationV1APIServiceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceApiregistrationV1APIServiceStatusResponse(resp *http.Response, span trace.Span) (res ReplaceApiregistrationV1APIServiceStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceApiregistrationV1APIServiceStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceApiregistrationV1APIServiceStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceApiregistrationV1APIServiceStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceApiregistrationV1APIServiceStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceApiregistrationV1APIServiceStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAppsV1NamespacedControllerRevisionResponse(resp *http.Response, span trace.Span) (res ReplaceAppsV1NamespacedControllerRevisionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedControllerRevisionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedControllerRevisionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedControllerRevisionApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedControllerRevisionApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAppsV1NamespacedControllerRevisionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAppsV1NamespacedDaemonSetResponse(resp *http.Response, span trace.Span) (res ReplaceAppsV1NamespacedDaemonSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedDaemonSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedDaemonSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedDaemonSetApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedDaemonSetApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAppsV1NamespacedDaemonSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAppsV1NamespacedDaemonSetStatusResponse(resp *http.Response, span trace.Span) (res ReplaceAppsV1NamespacedDaemonSetStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedDaemonSetStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedDaemonSetStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedDaemonSetStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedDaemonSetStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAppsV1NamespacedDaemonSetStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAppsV1NamespacedDeploymentResponse(resp *http.Response, span trace.Span) (res ReplaceAppsV1NamespacedDeploymentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedDeploymentApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedDeploymentApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedDeploymentApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedDeploymentApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAppsV1NamespacedDeploymentUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAppsV1NamespacedDeploymentScaleResponse(resp *http.Response, span trace.Span) (res ReplaceAppsV1NamespacedDeploymentScaleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedDeploymentScaleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedDeploymentScaleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedDeploymentScaleApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedDeploymentScaleApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAppsV1NamespacedDeploymentScaleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAppsV1NamespacedDeploymentStatusResponse(resp *http.Response, span trace.Span) (res ReplaceAppsV1NamespacedDeploymentStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedDeploymentStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedDeploymentStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedDeploymentStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedDeploymentStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAppsV1NamespacedDeploymentStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAppsV1NamespacedReplicaSetResponse(resp *http.Response, span trace.Span) (res ReplaceAppsV1NamespacedReplicaSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedReplicaSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedReplicaSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedReplicaSetApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedReplicaSetApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAppsV1NamespacedReplicaSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAppsV1NamespacedReplicaSetScaleResponse(resp *http.Response, span trace.Span) (res ReplaceAppsV1NamespacedReplicaSetScaleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedReplicaSetScaleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedReplicaSetScaleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedReplicaSetScaleApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedReplicaSetScaleApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAppsV1NamespacedReplicaSetScaleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAppsV1NamespacedReplicaSetStatusResponse(resp *http.Response, span trace.Span) (res ReplaceAppsV1NamespacedReplicaSetStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedReplicaSetStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedReplicaSetStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedReplicaSetStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedReplicaSetStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAppsV1NamespacedReplicaSetStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAppsV1NamespacedStatefulSetResponse(resp *http.Response, span trace.Span) (res ReplaceAppsV1NamespacedStatefulSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedStatefulSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedStatefulSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedStatefulSetApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedStatefulSetApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAppsV1NamespacedStatefulSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAppsV1NamespacedStatefulSetScaleResponse(resp *http.Response, span trace.Span) (res ReplaceAppsV1NamespacedStatefulSetScaleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedStatefulSetScaleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedStatefulSetScaleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedStatefulSetScaleApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedStatefulSetScaleApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAppsV1NamespacedStatefulSetScaleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAppsV1NamespacedStatefulSetStatusResponse(resp *http.Response, span trace.Span) (res ReplaceAppsV1NamespacedStatefulSetStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedStatefulSetStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedStatefulSetStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAppsV1NamespacedStatefulSetStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAppsV1NamespacedStatefulSetStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAppsV1NamespacedStatefulSetStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse(resp *http.Response, span trace.Span) (res ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse(resp *http.Response, span trace.Span) (res ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusResponse(resp *http.Response, span trace.Span) (res ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceBatchV1NamespacedCronJobResponse(resp *http.Response, span trace.Span) (res ReplaceBatchV1NamespacedCronJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceBatchV1NamespacedCronJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceBatchV1NamespacedCronJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceBatchV1NamespacedCronJobApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceBatchV1NamespacedCronJobApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceBatchV1NamespacedCronJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceBatchV1NamespacedCronJobStatusResponse(resp *http.Response, span trace.Span) (res ReplaceBatchV1NamespacedCronJobStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceBatchV1NamespacedCronJobStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceBatchV1NamespacedCronJobStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceBatchV1NamespacedCronJobStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceBatchV1NamespacedCronJobStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceBatchV1NamespacedCronJobStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceBatchV1NamespacedJobResponse(resp *http.Response, span trace.Span) (res ReplaceBatchV1NamespacedJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceBatchV1NamespacedJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceBatchV1NamespacedJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceBatchV1NamespacedJobApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceBatchV1NamespacedJobApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceBatchV1NamespacedJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceBatchV1NamespacedJobStatusResponse(resp *http.Response, span trace.Span) (res ReplaceBatchV1NamespacedJobStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceBatchV1NamespacedJobStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceBatchV1NamespacedJobStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceBatchV1NamespacedJobStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceBatchV1NamespacedJobStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceBatchV1NamespacedJobStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceBatchV1beta1NamespacedCronJobResponse(resp *http.Response, span trace.Span) (res ReplaceBatchV1beta1NamespacedCronJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceBatchV1beta1NamespacedCronJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceBatchV1beta1NamespacedCronJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceBatchV1beta1NamespacedCronJobApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceBatchV1beta1NamespacedCronJobApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceBatchV1beta1NamespacedCronJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceBatchV1beta1NamespacedCronJobStatusResponse(resp *http.Response, span trace.Span) (res ReplaceBatchV1beta1NamespacedCronJobStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceBatchV1beta1NamespacedCronJobStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceBatchV1beta1NamespacedCronJobStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceBatchV1beta1NamespacedCronJobStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceBatchV1beta1NamespacedCronJobStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceBatchV1beta1NamespacedCronJobStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCertificatesV1CertificateSigningRequestResponse(resp *http.Response, span trace.Span) (res ReplaceCertificatesV1CertificateSigningRequestRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCertificatesV1CertificateSigningRequestApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCertificatesV1CertificateSigningRequestApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCertificatesV1CertificateSigningRequestApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCertificatesV1CertificateSigningRequestApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCertificatesV1CertificateSigningRequestUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCertificatesV1CertificateSigningRequestApprovalResponse(resp *http.Response, span trace.Span) (res ReplaceCertificatesV1CertificateSigningRequestApprovalRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCertificatesV1CertificateSigningRequestApprovalApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCertificatesV1CertificateSigningRequestApprovalApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCertificatesV1CertificateSigningRequestApprovalApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCertificatesV1CertificateSigningRequestApprovalApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCertificatesV1CertificateSigningRequestApprovalUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCertificatesV1CertificateSigningRequestStatusResponse(resp *http.Response, span trace.Span) (res ReplaceCertificatesV1CertificateSigningRequestStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCertificatesV1CertificateSigningRequestStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCertificatesV1CertificateSigningRequestStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCertificatesV1CertificateSigningRequestStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCertificatesV1CertificateSigningRequestStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCertificatesV1CertificateSigningRequestStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoordinationV1NamespacedLeaseResponse(resp *http.Response, span trace.Span) (res ReplaceCoordinationV1NamespacedLeaseRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoordinationV1NamespacedLeaseApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoordinationV1NamespacedLeaseApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoordinationV1NamespacedLeaseApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoordinationV1NamespacedLeaseApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoordinationV1NamespacedLeaseUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespaceResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespaceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespaceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespaceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespaceApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespaceApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespaceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespaceFinalizeResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespaceFinalizeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespaceFinalizeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespaceFinalizeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespaceFinalizeApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespaceFinalizeApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespaceFinalizeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespaceStatusResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespaceStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespaceStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespaceStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespaceStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespaceStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespaceStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedConfigMapResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedConfigMapRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedConfigMapApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedConfigMapApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedConfigMapApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedConfigMapApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedConfigMapUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedEndpointsResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedEndpointsRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedEndpointsApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedEndpointsApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedEndpointsApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedEndpointsApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedEndpointsUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedEventResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedEventApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedEventApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedLimitRangeResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedLimitRangeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedLimitRangeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedLimitRangeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedLimitRangeApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedLimitRangeApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedLimitRangeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedPersistentVolumeClaimResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedPersistentVolumeClaimRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedPersistentVolumeClaimApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedPersistentVolumeClaimApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedPersistentVolumeClaimUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedPersistentVolumeClaimStatusResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedPersistentVolumeClaimStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedPersistentVolumeClaimStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedPersistentVolumeClaimStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedPersistentVolumeClaimStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedPersistentVolumeClaimStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedPersistentVolumeClaimStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedPodResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedPodRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedPodApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedPodApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedPodApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedPodApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedPodUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedPodEphemeralcontainersResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedPodEphemeralcontainersRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedPodEphemeralcontainersApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedPodEphemeralcontainersApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedPodEphemeralcontainersApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedPodEphemeralcontainersApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedPodEphemeralcontainersUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedPodStatusResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedPodStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedPodStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedPodStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedPodStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedPodStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedPodStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedPodTemplateResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedPodTemplateRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedPodTemplateApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedPodTemplateApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedPodTemplateApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedPodTemplateApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedPodTemplateUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedReplicationControllerResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedReplicationControllerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedReplicationControllerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedReplicationControllerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedReplicationControllerApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedReplicationControllerApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedReplicationControllerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedReplicationControllerScaleResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedReplicationControllerScaleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedReplicationControllerScaleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedReplicationControllerScaleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedReplicationControllerScaleApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedReplicationControllerScaleApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedReplicationControllerScaleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedReplicationControllerStatusResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedReplicationControllerStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedReplicationControllerStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedReplicationControllerStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedReplicationControllerStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedReplicationControllerStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedReplicationControllerStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedResourceQuotaResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedResourceQuotaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedResourceQuotaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedResourceQuotaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedResourceQuotaApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedResourceQuotaApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedResourceQuotaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedResourceQuotaStatusResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedResourceQuotaStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedResourceQuotaStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedResourceQuotaStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedResourceQuotaStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedResourceQuotaStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedResourceQuotaStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedSecretResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedSecretRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedSecretApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedSecretApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedSecretApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedSecretApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedSecretUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedServiceResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedServiceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedServiceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedServiceApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedServiceApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedServiceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedServiceAccountResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedServiceAccountRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedServiceAccountApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedServiceAccountApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedServiceAccountApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedServiceAccountApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedServiceAccountUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NamespacedServiceStatusResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NamespacedServiceStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedServiceStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedServiceStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NamespacedServiceStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NamespacedServiceStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NamespacedServiceStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NodeResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NodeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NodeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NodeApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NodeApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NodeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1NodeStatusResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1NodeStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NodeStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NodeStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1NodeStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1NodeStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1NodeStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1PersistentVolumeResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1PersistentVolumeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1PersistentVolumeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1PersistentVolumeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1PersistentVolumeApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1PersistentVolumeApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1PersistentVolumeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceCoreV1PersistentVolumeStatusResponse(resp *http.Response, span trace.Span) (res ReplaceCoreV1PersistentVolumeStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1PersistentVolumeStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1PersistentVolumeStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceCoreV1PersistentVolumeStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceCoreV1PersistentVolumeStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceCoreV1PersistentVolumeStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceDiscoveryV1NamespacedEndpointSliceResponse(resp *http.Response, span trace.Span) (res ReplaceDiscoveryV1NamespacedEndpointSliceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceDiscoveryV1NamespacedEndpointSliceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceDiscoveryV1NamespacedEndpointSliceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceDiscoveryV1NamespacedEndpointSliceApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceDiscoveryV1NamespacedEndpointSliceApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceDiscoveryV1NamespacedEndpointSliceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceDiscoveryV1beta1NamespacedEndpointSliceResponse(resp *http.Response, span trace.Span) (res ReplaceDiscoveryV1beta1NamespacedEndpointSliceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceDiscoveryV1beta1NamespacedEndpointSliceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceEventsV1NamespacedEventResponse(resp *http.Response, span trace.Span) (res ReplaceEventsV1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceEventsV1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceEventsV1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceEventsV1NamespacedEventApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceEventsV1NamespacedEventApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceEventsV1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceEventsV1beta1NamespacedEventResponse(resp *http.Response, span trace.Span) (res ReplaceEventsV1beta1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceEventsV1beta1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceEventsV1beta1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceEventsV1beta1NamespacedEventApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceEventsV1beta1NamespacedEventApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceEventsV1beta1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceFlowcontrolApiserverV1beta1FlowSchemaResponse(resp *http.Response, span trace.Span) (res ReplaceFlowcontrolApiserverV1beta1FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceFlowcontrolApiserverV1beta1FlowSchemaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusResponse(resp *http.Response, span trace.Span) (res ReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusResponse(resp *http.Response, span trace.Span) (res ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceFlowcontrolApiserverV1beta2FlowSchemaResponse(resp *http.Response, span trace.Span) (res ReplaceFlowcontrolApiserverV1beta2FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceFlowcontrolApiserverV1beta2FlowSchemaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusResponse(resp *http.Response, span trace.Span) (res ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusResponse(resp *http.Response, span trace.Span) (res ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceInternalApiserverV1alpha1StorageVersionResponse(resp *http.Response, span trace.Span) (res ReplaceInternalApiserverV1alpha1StorageVersionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceInternalApiserverV1alpha1StorageVersionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceInternalApiserverV1alpha1StorageVersionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceInternalApiserverV1alpha1StorageVersionApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceInternalApiserverV1alpha1StorageVersionApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceInternalApiserverV1alpha1StorageVersionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceInternalApiserverV1alpha1StorageVersionStatusResponse(resp *http.Response, span trace.Span) (res ReplaceInternalApiserverV1alpha1StorageVersionStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceInternalApiserverV1alpha1StorageVersionStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceInternalApiserverV1alpha1StorageVersionStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceInternalApiserverV1alpha1StorageVersionStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceInternalApiserverV1alpha1StorageVersionStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceInternalApiserverV1alpha1StorageVersionStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceNetworkingV1IngressClassResponse(resp *http.Response, span trace.Span) (res ReplaceNetworkingV1IngressClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceNetworkingV1IngressClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceNetworkingV1IngressClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceNetworkingV1IngressClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceNetworkingV1IngressClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceNetworkingV1IngressClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceNetworkingV1NamespacedIngressResponse(resp *http.Response, span trace.Span) (res ReplaceNetworkingV1NamespacedIngressRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceNetworkingV1NamespacedIngressApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceNetworkingV1NamespacedIngressApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceNetworkingV1NamespacedIngressApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceNetworkingV1NamespacedIngressApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceNetworkingV1NamespacedIngressUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceNetworkingV1NamespacedIngressStatusResponse(resp *http.Response, span trace.Span) (res ReplaceNetworkingV1NamespacedIngressStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceNetworkingV1NamespacedIngressStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceNetworkingV1NamespacedIngressStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceNetworkingV1NamespacedIngressStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceNetworkingV1NamespacedIngressStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceNetworkingV1NamespacedIngressStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceNetworkingV1NamespacedNetworkPolicyResponse(resp *http.Response, span trace.Span) (res ReplaceNetworkingV1NamespacedNetworkPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceNetworkingV1NamespacedNetworkPolicyApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceNetworkingV1NamespacedNetworkPolicyApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceNetworkingV1NamespacedNetworkPolicyApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceNetworkingV1NamespacedNetworkPolicyApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceNetworkingV1NamespacedNetworkPolicyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceNodeV1RuntimeClassResponse(resp *http.Response, span trace.Span) (res ReplaceNodeV1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceNodeV1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceNodeV1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceNodeV1RuntimeClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceNodeV1RuntimeClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceNodeV1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceNodeV1alpha1RuntimeClassResponse(resp *http.Response, span trace.Span) (res ReplaceNodeV1alpha1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceNodeV1alpha1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceNodeV1alpha1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceNodeV1alpha1RuntimeClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceNodeV1alpha1RuntimeClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceNodeV1alpha1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceNodeV1beta1RuntimeClassResponse(resp *http.Response, span trace.Span) (res ReplaceNodeV1beta1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceNodeV1beta1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceNodeV1beta1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceNodeV1beta1RuntimeClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceNodeV1beta1RuntimeClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceNodeV1beta1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplacePolicyV1NamespacedPodDisruptionBudgetResponse(resp *http.Response, span trace.Span) (res ReplacePolicyV1NamespacedPodDisruptionBudgetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplacePolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplacePolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplacePolicyV1NamespacedPodDisruptionBudgetApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplacePolicyV1NamespacedPodDisruptionBudgetApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplacePolicyV1NamespacedPodDisruptionBudgetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplacePolicyV1NamespacedPodDisruptionBudgetStatusResponse(resp *http.Response, span trace.Span) (res ReplacePolicyV1NamespacedPodDisruptionBudgetStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplacePolicyV1NamespacedPodDisruptionBudgetStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplacePolicyV1NamespacedPodDisruptionBudgetStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplacePolicyV1NamespacedPodDisruptionBudgetStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplacePolicyV1NamespacedPodDisruptionBudgetStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplacePolicyV1NamespacedPodDisruptionBudgetStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplacePolicyV1beta1NamespacedPodDisruptionBudgetResponse(resp *http.Response, span trace.Span) (res ReplacePolicyV1beta1NamespacedPodDisruptionBudgetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplacePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplacePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplacePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplacePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplacePolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse(resp *http.Response, span trace.Span) (res ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplacePolicyV1beta1PodSecurityPolicyResponse(resp *http.Response, span trace.Span) (res ReplacePolicyV1beta1PodSecurityPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplacePolicyV1beta1PodSecurityPolicyApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplacePolicyV1beta1PodSecurityPolicyApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplacePolicyV1beta1PodSecurityPolicyApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplacePolicyV1beta1PodSecurityPolicyApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplacePolicyV1beta1PodSecurityPolicyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceRbacAuthorizationV1ClusterRoleResponse(resp *http.Response, span trace.Span) (res ReplaceRbacAuthorizationV1ClusterRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceRbacAuthorizationV1ClusterRoleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceRbacAuthorizationV1ClusterRoleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceRbacAuthorizationV1ClusterRoleApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceRbacAuthorizationV1ClusterRoleApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceRbacAuthorizationV1ClusterRoleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceRbacAuthorizationV1ClusterRoleBindingResponse(resp *http.Response, span trace.Span) (res ReplaceRbacAuthorizationV1ClusterRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceRbacAuthorizationV1ClusterRoleBindingApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceRbacAuthorizationV1ClusterRoleBindingApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceRbacAuthorizationV1ClusterRoleBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceRbacAuthorizationV1NamespacedRoleResponse(resp *http.Response, span trace.Span) (res ReplaceRbacAuthorizationV1NamespacedRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceRbacAuthorizationV1NamespacedRoleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceRbacAuthorizationV1NamespacedRoleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceRbacAuthorizationV1NamespacedRoleApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceRbacAuthorizationV1NamespacedRoleApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceRbacAuthorizationV1NamespacedRoleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceRbacAuthorizationV1NamespacedRoleBindingResponse(resp *http.Response, span trace.Span) (res ReplaceRbacAuthorizationV1NamespacedRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceRbacAuthorizationV1NamespacedRoleBindingApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceRbacAuthorizationV1NamespacedRoleBindingApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceRbacAuthorizationV1NamespacedRoleBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceSchedulingV1PriorityClassResponse(resp *http.Response, span trace.Span) (res ReplaceSchedulingV1PriorityClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceSchedulingV1PriorityClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceSchedulingV1PriorityClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceSchedulingV1PriorityClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceSchedulingV1PriorityClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceSchedulingV1PriorityClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceStorageV1CSIDriverResponse(resp *http.Response, span trace.Span) (res ReplaceStorageV1CSIDriverRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceStorageV1CSIDriverApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceStorageV1CSIDriverApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceStorageV1CSIDriverApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceStorageV1CSIDriverApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceStorageV1CSIDriverUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceStorageV1CSINodeResponse(resp *http.Response, span trace.Span) (res ReplaceStorageV1CSINodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceStorageV1CSINodeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceStorageV1CSINodeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceStorageV1CSINodeApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceStorageV1CSINodeApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceStorageV1CSINodeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceStorageV1StorageClassResponse(resp *http.Response, span trace.Span) (res ReplaceStorageV1StorageClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceStorageV1StorageClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceStorageV1StorageClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceStorageV1StorageClassApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceStorageV1StorageClassApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceStorageV1StorageClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceStorageV1VolumeAttachmentResponse(resp *http.Response, span trace.Span) (res ReplaceStorageV1VolumeAttachmentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceStorageV1VolumeAttachmentApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceStorageV1VolumeAttachmentApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceStorageV1VolumeAttachmentApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceStorageV1VolumeAttachmentApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceStorageV1VolumeAttachmentUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceStorageV1VolumeAttachmentStatusResponse(resp *http.Response, span trace.Span) (res ReplaceStorageV1VolumeAttachmentStatusRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceStorageV1VolumeAttachmentStatusApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceStorageV1VolumeAttachmentStatusApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceStorageV1VolumeAttachmentStatusApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceStorageV1VolumeAttachmentStatusApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceStorageV1VolumeAttachmentStatusUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceStorageV1alpha1NamespacedCSIStorageCapacityResponse(resp *http.Response, span trace.Span) (res ReplaceStorageV1alpha1NamespacedCSIStorageCapacityRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReplaceStorageV1beta1NamespacedCSIStorageCapacityResponse(resp *http.Response, span trace.Span) (res ReplaceStorageV1beta1NamespacedCSIStorageCapacityRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "ReplaceStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response ReplaceStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONCreated
			if err := func() error {
				return errors.New(`decoding of "ReplaceStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONCreated" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &ReplaceStorageV1beta1NamespacedCSIStorageCapacityUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAdmissionregistrationV1MutatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res WatchAdmissionregistrationV1MutatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAdmissionregistrationV1MutatingWebhookConfigurationListResponse(resp *http.Response, span trace.Span) (res WatchAdmissionregistrationV1MutatingWebhookConfigurationListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAdmissionregistrationV1MutatingWebhookConfigurationListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAdmissionregistrationV1ValidatingWebhookConfigurationResponse(resp *http.Response, span trace.Span) (res WatchAdmissionregistrationV1ValidatingWebhookConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAdmissionregistrationV1ValidatingWebhookConfigurationListResponse(resp *http.Response, span trace.Span) (res WatchAdmissionregistrationV1ValidatingWebhookConfigurationListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAdmissionregistrationV1ValidatingWebhookConfigurationListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchApiextensionsV1CustomResourceDefinitionResponse(resp *http.Response, span trace.Span) (res WatchApiextensionsV1CustomResourceDefinitionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchApiextensionsV1CustomResourceDefinitionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchApiextensionsV1CustomResourceDefinitionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchApiextensionsV1CustomResourceDefinitionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchApiextensionsV1CustomResourceDefinitionListResponse(resp *http.Response, span trace.Span) (res WatchApiextensionsV1CustomResourceDefinitionListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchApiextensionsV1CustomResourceDefinitionListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchApiextensionsV1CustomResourceDefinitionListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchApiextensionsV1CustomResourceDefinitionListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchApiregistrationV1APIServiceResponse(resp *http.Response, span trace.Span) (res WatchApiregistrationV1APIServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchApiregistrationV1APIServiceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchApiregistrationV1APIServiceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchApiregistrationV1APIServiceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchApiregistrationV1APIServiceListResponse(resp *http.Response, span trace.Span) (res WatchApiregistrationV1APIServiceListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchApiregistrationV1APIServiceListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchApiregistrationV1APIServiceListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchApiregistrationV1APIServiceListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1ControllerRevisionListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchAppsV1ControllerRevisionListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAppsV1ControllerRevisionListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAppsV1ControllerRevisionListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1ControllerRevisionListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1DaemonSetListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchAppsV1DaemonSetListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAppsV1DaemonSetListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAppsV1DaemonSetListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1DaemonSetListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1DeploymentListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchAppsV1DeploymentListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAppsV1DeploymentListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAppsV1DeploymentListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1DeploymentListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1NamespacedControllerRevisionResponse(resp *http.Response, span trace.Span) (res WatchAppsV1NamespacedControllerRevisionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAppsV1NamespacedControllerRevisionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAppsV1NamespacedControllerRevisionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1NamespacedControllerRevisionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1NamespacedControllerRevisionListResponse(resp *http.Response, span trace.Span) (res WatchAppsV1NamespacedControllerRevisionListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAppsV1NamespacedControllerRevisionListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAppsV1NamespacedControllerRevisionListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1NamespacedControllerRevisionListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1NamespacedDaemonSetResponse(resp *http.Response, span trace.Span) (res WatchAppsV1NamespacedDaemonSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAppsV1NamespacedDaemonSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAppsV1NamespacedDaemonSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1NamespacedDaemonSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1NamespacedDaemonSetListResponse(resp *http.Response, span trace.Span) (res WatchAppsV1NamespacedDaemonSetListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAppsV1NamespacedDaemonSetListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAppsV1NamespacedDaemonSetListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1NamespacedDaemonSetListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1NamespacedDeploymentResponse(resp *http.Response, span trace.Span) (res WatchAppsV1NamespacedDeploymentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAppsV1NamespacedDeploymentApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAppsV1NamespacedDeploymentApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1NamespacedDeploymentUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1NamespacedDeploymentListResponse(resp *http.Response, span trace.Span) (res WatchAppsV1NamespacedDeploymentListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAppsV1NamespacedDeploymentListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAppsV1NamespacedDeploymentListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1NamespacedDeploymentListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1NamespacedReplicaSetResponse(resp *http.Response, span trace.Span) (res WatchAppsV1NamespacedReplicaSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAppsV1NamespacedReplicaSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAppsV1NamespacedReplicaSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1NamespacedReplicaSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1NamespacedReplicaSetListResponse(resp *http.Response, span trace.Span) (res WatchAppsV1NamespacedReplicaSetListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAppsV1NamespacedReplicaSetListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAppsV1NamespacedReplicaSetListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1NamespacedReplicaSetListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1NamespacedStatefulSetResponse(resp *http.Response, span trace.Span) (res WatchAppsV1NamespacedStatefulSetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAppsV1NamespacedStatefulSetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAppsV1NamespacedStatefulSetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1NamespacedStatefulSetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1NamespacedStatefulSetListResponse(resp *http.Response, span trace.Span) (res WatchAppsV1NamespacedStatefulSetListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAppsV1NamespacedStatefulSetListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAppsV1NamespacedStatefulSetListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1NamespacedStatefulSetListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1ReplicaSetListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchAppsV1ReplicaSetListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAppsV1ReplicaSetListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAppsV1ReplicaSetListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1ReplicaSetListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAppsV1StatefulSetListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchAppsV1StatefulSetListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAppsV1StatefulSetListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAppsV1StatefulSetListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAppsV1StatefulSetListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAutoscalingV1NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res WatchAutoscalingV1NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAutoscalingV1NamespacedHorizontalPodAutoscalerListResponse(resp *http.Response, span trace.Span) (res WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListResponse(resp *http.Response, span trace.Span) (res WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerResponse(resp *http.Response, span trace.Span) (res WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListResponse(resp *http.Response, span trace.Span) (res WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchBatchV1CronJobListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchBatchV1CronJobListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchBatchV1CronJobListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchBatchV1CronJobListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchBatchV1CronJobListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchBatchV1JobListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchBatchV1JobListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchBatchV1JobListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchBatchV1JobListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchBatchV1JobListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchBatchV1NamespacedCronJobResponse(resp *http.Response, span trace.Span) (res WatchBatchV1NamespacedCronJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchBatchV1NamespacedCronJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchBatchV1NamespacedCronJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchBatchV1NamespacedCronJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchBatchV1NamespacedCronJobListResponse(resp *http.Response, span trace.Span) (res WatchBatchV1NamespacedCronJobListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchBatchV1NamespacedCronJobListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchBatchV1NamespacedCronJobListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchBatchV1NamespacedCronJobListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchBatchV1NamespacedJobResponse(resp *http.Response, span trace.Span) (res WatchBatchV1NamespacedJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchBatchV1NamespacedJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchBatchV1NamespacedJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchBatchV1NamespacedJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchBatchV1NamespacedJobListResponse(resp *http.Response, span trace.Span) (res WatchBatchV1NamespacedJobListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchBatchV1NamespacedJobListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchBatchV1NamespacedJobListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchBatchV1NamespacedJobListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchBatchV1beta1CronJobListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchBatchV1beta1CronJobListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchBatchV1beta1CronJobListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchBatchV1beta1CronJobListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchBatchV1beta1CronJobListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchBatchV1beta1NamespacedCronJobResponse(resp *http.Response, span trace.Span) (res WatchBatchV1beta1NamespacedCronJobRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchBatchV1beta1NamespacedCronJobApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchBatchV1beta1NamespacedCronJobApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchBatchV1beta1NamespacedCronJobUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchBatchV1beta1NamespacedCronJobListResponse(resp *http.Response, span trace.Span) (res WatchBatchV1beta1NamespacedCronJobListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchBatchV1beta1NamespacedCronJobListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchBatchV1beta1NamespacedCronJobListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchBatchV1beta1NamespacedCronJobListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCertificatesV1CertificateSigningRequestResponse(resp *http.Response, span trace.Span) (res WatchCertificatesV1CertificateSigningRequestRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCertificatesV1CertificateSigningRequestApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCertificatesV1CertificateSigningRequestApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCertificatesV1CertificateSigningRequestUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCertificatesV1CertificateSigningRequestListResponse(resp *http.Response, span trace.Span) (res WatchCertificatesV1CertificateSigningRequestListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCertificatesV1CertificateSigningRequestListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCertificatesV1CertificateSigningRequestListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCertificatesV1CertificateSigningRequestListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoordinationV1LeaseListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoordinationV1LeaseListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoordinationV1LeaseListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoordinationV1LeaseListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoordinationV1LeaseListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoordinationV1NamespacedLeaseResponse(resp *http.Response, span trace.Span) (res WatchCoordinationV1NamespacedLeaseRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoordinationV1NamespacedLeaseApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoordinationV1NamespacedLeaseApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoordinationV1NamespacedLeaseUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoordinationV1NamespacedLeaseListResponse(resp *http.Response, span trace.Span) (res WatchCoordinationV1NamespacedLeaseListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoordinationV1NamespacedLeaseListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoordinationV1NamespacedLeaseListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoordinationV1NamespacedLeaseListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1ConfigMapListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1ConfigMapListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1ConfigMapListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1ConfigMapListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1ConfigMapListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1EndpointsListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1EndpointsListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1EndpointsListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1EndpointsListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1EndpointsListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1EventListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1EventListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1EventListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1EventListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1EventListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1LimitRangeListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1LimitRangeListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1LimitRangeListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1LimitRangeListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1LimitRangeListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespaceResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespaceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespaceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespaceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespaceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespaceListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespaceListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespaceListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespaceListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespaceListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedConfigMapResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedConfigMapRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedConfigMapApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedConfigMapApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedConfigMapUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedConfigMapListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedConfigMapListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedConfigMapListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedConfigMapListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedConfigMapListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedEndpointsResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedEndpointsRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedEndpointsApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedEndpointsApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedEndpointsUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedEndpointsListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedEndpointsListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedEndpointsListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedEndpointsListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedEndpointsListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedEventResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedEventListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedEventListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedEventListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedEventListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedEventListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedLimitRangeResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedLimitRangeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedLimitRangeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedLimitRangeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedLimitRangeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedLimitRangeListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedLimitRangeListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedLimitRangeListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedLimitRangeListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedLimitRangeListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedPersistentVolumeClaimResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedPersistentVolumeClaimRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedPersistentVolumeClaimUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedPersistentVolumeClaimListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedPersistentVolumeClaimListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedPersistentVolumeClaimListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedPersistentVolumeClaimListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedPersistentVolumeClaimListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedPodResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedPodRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedPodApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedPodApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedPodUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedPodListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedPodListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedPodListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedPodListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedPodListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedPodTemplateResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedPodTemplateRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedPodTemplateApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedPodTemplateApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedPodTemplateUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedPodTemplateListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedPodTemplateListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedPodTemplateListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedPodTemplateListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedPodTemplateListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedReplicationControllerResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedReplicationControllerRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedReplicationControllerApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedReplicationControllerApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedReplicationControllerUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedReplicationControllerListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedReplicationControllerListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedReplicationControllerListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedReplicationControllerListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedReplicationControllerListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedResourceQuotaResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedResourceQuotaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedResourceQuotaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedResourceQuotaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedResourceQuotaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedResourceQuotaListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedResourceQuotaListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedResourceQuotaListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedResourceQuotaListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedResourceQuotaListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedSecretResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedSecretRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedSecretApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedSecretApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedSecretUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedSecretListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedSecretListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedSecretListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedSecretListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedSecretListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedServiceResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedServiceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedServiceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedServiceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedServiceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedServiceAccountResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedServiceAccountRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedServiceAccountApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedServiceAccountApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedServiceAccountUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedServiceAccountListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedServiceAccountListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedServiceAccountListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedServiceAccountListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedServiceAccountListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NamespacedServiceListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NamespacedServiceListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NamespacedServiceListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NamespacedServiceListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NamespacedServiceListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NodeResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NodeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NodeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NodeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1NodeListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1NodeListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1NodeListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1NodeListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1NodeListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1PersistentVolumeResponse(resp *http.Response, span trace.Span) (res WatchCoreV1PersistentVolumeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1PersistentVolumeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1PersistentVolumeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1PersistentVolumeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1PersistentVolumeClaimListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1PersistentVolumeClaimListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1PersistentVolumeClaimListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1PersistentVolumeListResponse(resp *http.Response, span trace.Span) (res WatchCoreV1PersistentVolumeListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1PersistentVolumeListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1PersistentVolumeListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1PersistentVolumeListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1PodListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1PodListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1PodListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1PodListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1PodListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1PodTemplateListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1PodTemplateListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1PodTemplateListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1PodTemplateListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1PodTemplateListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1ReplicationControllerListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1ReplicationControllerListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1ReplicationControllerListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1ReplicationControllerListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1ReplicationControllerListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1ResourceQuotaListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1ResourceQuotaListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1ResourceQuotaListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1ResourceQuotaListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1ResourceQuotaListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1SecretListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1SecretListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1SecretListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1SecretListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1SecretListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1ServiceAccountListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1ServiceAccountListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1ServiceAccountListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1ServiceAccountListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1ServiceAccountListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchCoreV1ServiceListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchCoreV1ServiceListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchCoreV1ServiceListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchCoreV1ServiceListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchCoreV1ServiceListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchDiscoveryV1EndpointSliceListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchDiscoveryV1EndpointSliceListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchDiscoveryV1EndpointSliceListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchDiscoveryV1NamespacedEndpointSliceResponse(resp *http.Response, span trace.Span) (res WatchDiscoveryV1NamespacedEndpointSliceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchDiscoveryV1NamespacedEndpointSliceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchDiscoveryV1NamespacedEndpointSliceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchDiscoveryV1NamespacedEndpointSliceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchDiscoveryV1NamespacedEndpointSliceListResponse(resp *http.Response, span trace.Span) (res WatchDiscoveryV1NamespacedEndpointSliceListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchDiscoveryV1NamespacedEndpointSliceListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchDiscoveryV1NamespacedEndpointSliceListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchDiscoveryV1NamespacedEndpointSliceListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchDiscoveryV1beta1EndpointSliceListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchDiscoveryV1beta1NamespacedEndpointSliceResponse(resp *http.Response, span trace.Span) (res WatchDiscoveryV1beta1NamespacedEndpointSliceRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchDiscoveryV1beta1NamespacedEndpointSliceUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchDiscoveryV1beta1NamespacedEndpointSliceListResponse(resp *http.Response, span trace.Span) (res WatchDiscoveryV1beta1NamespacedEndpointSliceListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchDiscoveryV1beta1NamespacedEndpointSliceListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchDiscoveryV1beta1NamespacedEndpointSliceListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchDiscoveryV1beta1NamespacedEndpointSliceListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchEventsV1EventListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchEventsV1EventListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchEventsV1EventListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchEventsV1EventListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchEventsV1EventListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchEventsV1NamespacedEventResponse(resp *http.Response, span trace.Span) (res WatchEventsV1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchEventsV1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchEventsV1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchEventsV1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchEventsV1NamespacedEventListResponse(resp *http.Response, span trace.Span) (res WatchEventsV1NamespacedEventListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchEventsV1NamespacedEventListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchEventsV1NamespacedEventListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchEventsV1NamespacedEventListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchEventsV1beta1EventListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchEventsV1beta1EventListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchEventsV1beta1EventListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchEventsV1beta1EventListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchEventsV1beta1EventListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchEventsV1beta1NamespacedEventResponse(resp *http.Response, span trace.Span) (res WatchEventsV1beta1NamespacedEventRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchEventsV1beta1NamespacedEventApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchEventsV1beta1NamespacedEventApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchEventsV1beta1NamespacedEventUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchEventsV1beta1NamespacedEventListResponse(resp *http.Response, span trace.Span) (res WatchEventsV1beta1NamespacedEventListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchEventsV1beta1NamespacedEventListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchEventsV1beta1NamespacedEventListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchEventsV1beta1NamespacedEventListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchFlowcontrolApiserverV1beta1FlowSchemaResponse(resp *http.Response, span trace.Span) (res WatchFlowcontrolApiserverV1beta1FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchFlowcontrolApiserverV1beta1FlowSchemaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchFlowcontrolApiserverV1beta1FlowSchemaListResponse(resp *http.Response, span trace.Span) (res WatchFlowcontrolApiserverV1beta1FlowSchemaListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchFlowcontrolApiserverV1beta1FlowSchemaListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListResponse(resp *http.Response, span trace.Span) (res WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchFlowcontrolApiserverV1beta2FlowSchemaResponse(resp *http.Response, span trace.Span) (res WatchFlowcontrolApiserverV1beta2FlowSchemaRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchFlowcontrolApiserverV1beta2FlowSchemaUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchFlowcontrolApiserverV1beta2FlowSchemaListResponse(resp *http.Response, span trace.Span) (res WatchFlowcontrolApiserverV1beta2FlowSchemaListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchFlowcontrolApiserverV1beta2FlowSchemaListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(resp *http.Response, span trace.Span) (res WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListResponse(resp *http.Response, span trace.Span) (res WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchInternalApiserverV1alpha1StorageVersionResponse(resp *http.Response, span trace.Span) (res WatchInternalApiserverV1alpha1StorageVersionRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchInternalApiserverV1alpha1StorageVersionApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchInternalApiserverV1alpha1StorageVersionApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchInternalApiserverV1alpha1StorageVersionUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchInternalApiserverV1alpha1StorageVersionListResponse(resp *http.Response, span trace.Span) (res WatchInternalApiserverV1alpha1StorageVersionListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchInternalApiserverV1alpha1StorageVersionListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchInternalApiserverV1alpha1StorageVersionListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchInternalApiserverV1alpha1StorageVersionListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNetworkingV1IngressClassResponse(resp *http.Response, span trace.Span) (res WatchNetworkingV1IngressClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchNetworkingV1IngressClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchNetworkingV1IngressClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNetworkingV1IngressClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNetworkingV1IngressClassListResponse(resp *http.Response, span trace.Span) (res WatchNetworkingV1IngressClassListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchNetworkingV1IngressClassListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchNetworkingV1IngressClassListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNetworkingV1IngressClassListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNetworkingV1IngressListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchNetworkingV1IngressListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchNetworkingV1IngressListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchNetworkingV1IngressListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNetworkingV1IngressListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNetworkingV1NamespacedIngressResponse(resp *http.Response, span trace.Span) (res WatchNetworkingV1NamespacedIngressRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchNetworkingV1NamespacedIngressApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchNetworkingV1NamespacedIngressApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNetworkingV1NamespacedIngressUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNetworkingV1NamespacedIngressListResponse(resp *http.Response, span trace.Span) (res WatchNetworkingV1NamespacedIngressListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchNetworkingV1NamespacedIngressListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchNetworkingV1NamespacedIngressListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNetworkingV1NamespacedIngressListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNetworkingV1NamespacedNetworkPolicyResponse(resp *http.Response, span trace.Span) (res WatchNetworkingV1NamespacedNetworkPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchNetworkingV1NamespacedNetworkPolicyApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchNetworkingV1NamespacedNetworkPolicyApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNetworkingV1NamespacedNetworkPolicyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNetworkingV1NamespacedNetworkPolicyListResponse(resp *http.Response, span trace.Span) (res WatchNetworkingV1NamespacedNetworkPolicyListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchNetworkingV1NamespacedNetworkPolicyListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchNetworkingV1NamespacedNetworkPolicyListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNetworkingV1NamespacedNetworkPolicyListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNetworkingV1NetworkPolicyListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchNetworkingV1NetworkPolicyListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNetworkingV1NetworkPolicyListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNodeV1RuntimeClassResponse(resp *http.Response, span trace.Span) (res WatchNodeV1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchNodeV1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchNodeV1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNodeV1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNodeV1RuntimeClassListResponse(resp *http.Response, span trace.Span) (res WatchNodeV1RuntimeClassListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchNodeV1RuntimeClassListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchNodeV1RuntimeClassListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNodeV1RuntimeClassListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNodeV1alpha1RuntimeClassResponse(resp *http.Response, span trace.Span) (res WatchNodeV1alpha1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchNodeV1alpha1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchNodeV1alpha1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNodeV1alpha1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNodeV1alpha1RuntimeClassListResponse(resp *http.Response, span trace.Span) (res WatchNodeV1alpha1RuntimeClassListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchNodeV1alpha1RuntimeClassListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchNodeV1alpha1RuntimeClassListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNodeV1alpha1RuntimeClassListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNodeV1beta1RuntimeClassResponse(resp *http.Response, span trace.Span) (res WatchNodeV1beta1RuntimeClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchNodeV1beta1RuntimeClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchNodeV1beta1RuntimeClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNodeV1beta1RuntimeClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchNodeV1beta1RuntimeClassListResponse(resp *http.Response, span trace.Span) (res WatchNodeV1beta1RuntimeClassListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchNodeV1beta1RuntimeClassListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchNodeV1beta1RuntimeClassListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchNodeV1beta1RuntimeClassListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchPolicyV1NamespacedPodDisruptionBudgetResponse(resp *http.Response, span trace.Span) (res WatchPolicyV1NamespacedPodDisruptionBudgetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchPolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchPolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchPolicyV1NamespacedPodDisruptionBudgetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchPolicyV1NamespacedPodDisruptionBudgetListResponse(resp *http.Response, span trace.Span) (res WatchPolicyV1NamespacedPodDisruptionBudgetListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchPolicyV1NamespacedPodDisruptionBudgetListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchPolicyV1NamespacedPodDisruptionBudgetListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchPolicyV1NamespacedPodDisruptionBudgetListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchPolicyV1PodDisruptionBudgetListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchPolicyV1PodDisruptionBudgetListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchPolicyV1PodDisruptionBudgetListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchPolicyV1beta1NamespacedPodDisruptionBudgetResponse(resp *http.Response, span trace.Span) (res WatchPolicyV1beta1NamespacedPodDisruptionBudgetRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchPolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchPolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchPolicyV1beta1NamespacedPodDisruptionBudgetListResponse(resp *http.Response, span trace.Span) (res WatchPolicyV1beta1NamespacedPodDisruptionBudgetListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchPolicyV1beta1NamespacedPodDisruptionBudgetListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchPolicyV1beta1NamespacedPodDisruptionBudgetListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchPolicyV1beta1NamespacedPodDisruptionBudgetListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchPolicyV1beta1PodSecurityPolicyResponse(resp *http.Response, span trace.Span) (res WatchPolicyV1beta1PodSecurityPolicyRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchPolicyV1beta1PodSecurityPolicyApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchPolicyV1beta1PodSecurityPolicyApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchPolicyV1beta1PodSecurityPolicyUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchPolicyV1beta1PodSecurityPolicyListResponse(resp *http.Response, span trace.Span) (res WatchPolicyV1beta1PodSecurityPolicyListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchPolicyV1beta1PodSecurityPolicyListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchPolicyV1beta1PodSecurityPolicyListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchPolicyV1beta1PodSecurityPolicyListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchRbacAuthorizationV1ClusterRoleResponse(resp *http.Response, span trace.Span) (res WatchRbacAuthorizationV1ClusterRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchRbacAuthorizationV1ClusterRoleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchRbacAuthorizationV1ClusterRoleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchRbacAuthorizationV1ClusterRoleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchRbacAuthorizationV1ClusterRoleBindingResponse(resp *http.Response, span trace.Span) (res WatchRbacAuthorizationV1ClusterRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchRbacAuthorizationV1ClusterRoleBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchRbacAuthorizationV1ClusterRoleBindingListResponse(resp *http.Response, span trace.Span) (res WatchRbacAuthorizationV1ClusterRoleBindingListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchRbacAuthorizationV1ClusterRoleBindingListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchRbacAuthorizationV1ClusterRoleBindingListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchRbacAuthorizationV1ClusterRoleBindingListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchRbacAuthorizationV1ClusterRoleListResponse(resp *http.Response, span trace.Span) (res WatchRbacAuthorizationV1ClusterRoleListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchRbacAuthorizationV1ClusterRoleListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchRbacAuthorizationV1ClusterRoleListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchRbacAuthorizationV1ClusterRoleListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchRbacAuthorizationV1NamespacedRoleResponse(resp *http.Response, span trace.Span) (res WatchRbacAuthorizationV1NamespacedRoleRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchRbacAuthorizationV1NamespacedRoleApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchRbacAuthorizationV1NamespacedRoleApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchRbacAuthorizationV1NamespacedRoleUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchRbacAuthorizationV1NamespacedRoleBindingResponse(resp *http.Response, span trace.Span) (res WatchRbacAuthorizationV1NamespacedRoleBindingRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchRbacAuthorizationV1NamespacedRoleBindingUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchRbacAuthorizationV1NamespacedRoleBindingListResponse(resp *http.Response, span trace.Span) (res WatchRbacAuthorizationV1NamespacedRoleBindingListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchRbacAuthorizationV1NamespacedRoleBindingListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchRbacAuthorizationV1NamespacedRoleBindingListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchRbacAuthorizationV1NamespacedRoleBindingListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchRbacAuthorizationV1NamespacedRoleListResponse(resp *http.Response, span trace.Span) (res WatchRbacAuthorizationV1NamespacedRoleListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchRbacAuthorizationV1NamespacedRoleListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchRbacAuthorizationV1NamespacedRoleListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchRbacAuthorizationV1NamespacedRoleListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchRbacAuthorizationV1RoleBindingListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchRbacAuthorizationV1RoleBindingListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchRbacAuthorizationV1RoleBindingListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchRbacAuthorizationV1RoleListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchRbacAuthorizationV1RoleListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchRbacAuthorizationV1RoleListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchSchedulingV1PriorityClassResponse(resp *http.Response, span trace.Span) (res WatchSchedulingV1PriorityClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchSchedulingV1PriorityClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchSchedulingV1PriorityClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchSchedulingV1PriorityClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchSchedulingV1PriorityClassListResponse(resp *http.Response, span trace.Span) (res WatchSchedulingV1PriorityClassListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchSchedulingV1PriorityClassListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchSchedulingV1PriorityClassListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchSchedulingV1PriorityClassListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1CSIDriverResponse(resp *http.Response, span trace.Span) (res WatchStorageV1CSIDriverRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchStorageV1CSIDriverApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchStorageV1CSIDriverApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1CSIDriverUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1CSIDriverListResponse(resp *http.Response, span trace.Span) (res WatchStorageV1CSIDriverListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchStorageV1CSIDriverListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchStorageV1CSIDriverListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1CSIDriverListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1CSINodeResponse(resp *http.Response, span trace.Span) (res WatchStorageV1CSINodeRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchStorageV1CSINodeApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchStorageV1CSINodeApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1CSINodeUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1CSINodeListResponse(resp *http.Response, span trace.Span) (res WatchStorageV1CSINodeListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchStorageV1CSINodeListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchStorageV1CSINodeListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1CSINodeListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1StorageClassResponse(resp *http.Response, span trace.Span) (res WatchStorageV1StorageClassRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchStorageV1StorageClassApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchStorageV1StorageClassApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1StorageClassUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1StorageClassListResponse(resp *http.Response, span trace.Span) (res WatchStorageV1StorageClassListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchStorageV1StorageClassListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchStorageV1StorageClassListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1StorageClassListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1VolumeAttachmentResponse(resp *http.Response, span trace.Span) (res WatchStorageV1VolumeAttachmentRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchStorageV1VolumeAttachmentApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchStorageV1VolumeAttachmentApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1VolumeAttachmentUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1VolumeAttachmentListResponse(resp *http.Response, span trace.Span) (res WatchStorageV1VolumeAttachmentListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchStorageV1VolumeAttachmentListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchStorageV1VolumeAttachmentListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1VolumeAttachmentListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1alpha1NamespacedCSIStorageCapacityResponse(resp *http.Response, span trace.Span) (res WatchStorageV1alpha1NamespacedCSIStorageCapacityRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1alpha1NamespacedCSIStorageCapacityListResponse(resp *http.Response, span trace.Span) (res WatchStorageV1alpha1NamespacedCSIStorageCapacityListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchStorageV1alpha1NamespacedCSIStorageCapacityListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchStorageV1alpha1NamespacedCSIStorageCapacityListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1alpha1NamespacedCSIStorageCapacityListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1beta1CSIStorageCapacityListForAllNamespacesResponse(resp *http.Response, span trace.Span) (res WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1beta1NamespacedCSIStorageCapacityResponse(resp *http.Response, span trace.Span) (res WatchStorageV1beta1NamespacedCSIStorageCapacityRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1beta1NamespacedCSIStorageCapacityUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeWatchStorageV1beta1NamespacedCSIStorageCapacityListResponse(resp *http.Response, span trace.Span) (res WatchStorageV1beta1NamespacedCSIStorageCapacityListRes, err error) {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)
	if _, err := io.Copy(buf, resp.Body); err != nil {
		return res, err
	}

	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			d := json.GetDecoder()
			defer json.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response WatchStorageV1beta1NamespacedCSIStorageCapacityListApplicationJSONOK
			if err := func() error {
				return errors.New(`decoding of "WatchStorageV1beta1NamespacedCSIStorageCapacityListApplicationJSONOK" (alias) is not implemented`)
				return nil
			}(); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json;stream=watch":
			return res, errors.New("application/json;stream=watch decoder not implemented")
		case "application/vnd.kubernetes.protobuf":
			return res, errors.New("application/vnd.kubernetes.protobuf decoder not implemented")
		case "application/vnd.kubernetes.protobuf;stream=watch":
			return res, errors.New("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
		case "application/yaml":
			return res, errors.New("application/yaml decoder not implemented")
		default:
			return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		return &WatchStorageV1beta1NamespacedCSIStorageCapacityListUnauthorized{}, nil
	default:
		return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}
