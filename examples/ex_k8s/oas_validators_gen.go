// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.AdmissionReviewVersions == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.AdmissionReviewVersions {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.AdmissionReviewVersions
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "admissionReviewVersions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Webhooks {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Webhooks
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "webhooks",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.AdmissionReviewVersions == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.AdmissionReviewVersions {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.AdmissionReviewVersions
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "admissionReviewVersions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Webhooks {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Webhooks
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "webhooks",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAppsV1ControllerRevisionList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAppsV1DaemonSet) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAppsV1DaemonSetList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAppsV1DaemonSetSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Template
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "template",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAppsV1Deployment) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAppsV1DeploymentList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAppsV1DeploymentSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Template
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "template",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAppsV1ReplicaSet) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAppsV1ReplicaSetList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAppsV1ReplicaSetSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Template
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "template",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAppsV1StatefulSet) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAppsV1StatefulSetList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAppsV1StatefulSetSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Template
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "template",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAuthorizationV1NonResourceRule) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Verbs == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Verbs {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Verbs
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verbs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAuthorizationV1ResourceRule) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Verbs == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Verbs {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Verbs
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verbs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAuthorizationV1SelfSubjectRulesReview) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Status
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.NonResourceRules == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.NonResourceRules {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.NonResourceRules
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nonResourceRules",
			Error: err,
		})
	}
	if err := func() error {
		if s.ResourceRules == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.ResourceRules {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.ResourceRules
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "resourceRules",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Status
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Conditions == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Conditions {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Conditions
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "conditions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Status
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Conditions == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Conditions {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Conditions
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "conditions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIBatchV1CronJob) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIBatchV1CronJobList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIBatchV1CronJobSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.JobTemplate
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "jobTemplate",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIBatchV1Job) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIBatchV1JobList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIBatchV1JobSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Template
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "template",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIBatchV1JobTemplateSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIBatchV1beta1CronJob) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIBatchV1beta1CronJobList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIBatchV1beta1CronJobSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.JobTemplate
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "jobTemplate",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIBatchV1beta1JobTemplateSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICertificatesV1CertificateSigningRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICertificatesV1CertificateSigningRequestList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Request == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Request {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Request
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "request",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoordinationV1LeaseList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1Affinity) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.NodeAffinity
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nodeAffinity",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Monitors == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Monitors {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Monitors
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "monitors",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1CephFSVolumeSource) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Monitors == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Monitors {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Monitors
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "monitors",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1ComponentStatusList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1ConfigMapList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1EndpointsList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1EventList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1LimitRange) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1LimitRangeList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1LimitRangeSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Limits == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Limits {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Limits
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limits",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1NamespaceList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1NodeAffinity) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.RequiredDuringSchedulingIgnoredDuringExecution
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "requiredDuringSchedulingIgnoredDuringExecution",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1NodeList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1NodeSelector) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.NodeSelectorTerms == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.NodeSelectorTerms {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.NodeSelectorTerms
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nodeSelectorTerms",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1PersistentVolume) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1PersistentVolumeClaimList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1PersistentVolumeList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1PersistentVolumeSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Cephfs
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cephfs",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.NodeAffinity
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nodeAffinity",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Rbd
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rbd",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1Pod) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1PodList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1PodSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Affinity
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "affinity",
			Error: err,
		})
	}
	if err := func() error {
		if s.Containers == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Containers {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Containers
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "containers",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Volumes {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Volumes
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "volumes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1PodTemplate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Template
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "template",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1PodTemplateList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1PodTemplateSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Monitors == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Monitors {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Monitors
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "monitors",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1RBDVolumeSource) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Monitors == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Monitors {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Monitors
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "monitors",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1ReplicationController) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1ReplicationControllerList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1ReplicationControllerSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Template
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "template",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1ResourceQuotaList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1SecretList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1ServiceAccountList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1ServiceList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1TopologySelectorLabelRequirement) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Values == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Values {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Values
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "values",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1TopologySelectorTerm) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.MatchLabelExpressions {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.MatchLabelExpressions
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "matchLabelExpressions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1Volume) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Cephfs
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cephfs",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Rbd
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rbd",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPICoreV1VolumeNodeAffinity) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Required
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIDiscoveryV1Endpoint) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Addresses == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Addresses {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Addresses
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addresses",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIDiscoveryV1EndpointSlice) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Endpoints == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Endpoints {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Endpoints
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "endpoints",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIDiscoveryV1EndpointSliceList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Addresses == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Addresses {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Addresses
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addresses",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Endpoints == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Endpoints {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Endpoints
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "endpoints",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIDiscoveryV1beta1EndpointSliceList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIEventsV1EventList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIEventsV1beta1EventList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchema) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Rules {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Rules
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rules",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.NonResourceURLs == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.NonResourceURLs {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.NonResourceURLs
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nonResourceURLs",
			Error: err,
		})
	}
	if err := func() error {
		if s.Verbs == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Verbs {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Verbs
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verbs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.NonResourceRules {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.NonResourceRules
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nonResourceRules",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ResourceRules {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.ResourceRules
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "resourceRules",
			Error: err,
		})
	}
	if err := func() error {
		if s.Subjects == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Subjects {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Subjects
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subjects",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.ApiGroups == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.ApiGroups {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.ApiGroups
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apiGroups",
			Error: err,
		})
	}
	if err := func() error {
		if s.Resources == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Resources {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Resources
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "resources",
			Error: err,
		})
	}
	if err := func() error {
		if s.Verbs == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Verbs {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Verbs
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verbs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchema) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Rules {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Rules
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rules",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.NonResourceURLs == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.NonResourceURLs {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.NonResourceURLs
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nonResourceURLs",
			Error: err,
		})
	}
	if err := func() error {
		if s.Verbs == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Verbs {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Verbs
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verbs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.NonResourceRules {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.NonResourceRules
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nonResourceRules",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ResourceRules {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.ResourceRules
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "resourceRules",
			Error: err,
		})
	}
	if err := func() error {
		if s.Subjects == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Subjects {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Subjects
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subjects",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.ApiGroups == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.ApiGroups {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.ApiGroups
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apiGroups",
			Error: err,
		})
	}
	if err := func() error {
		if s.Resources == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Resources {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Resources
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "resources",
			Error: err,
		})
	}
	if err := func() error {
		if s.Verbs == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Verbs {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Verbs
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verbs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPINetworkingV1HTTPIngressRuleValue) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Paths == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Paths {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Paths
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paths",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPINetworkingV1Ingress) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPINetworkingV1IngressClassList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPINetworkingV1IngressList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPINetworkingV1IngressRule) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.HTTP
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "http",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPINetworkingV1IngressSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Rules {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Rules
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rules",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPINetworkingV1NetworkPolicyList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPINodeV1RuntimeClassList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPINodeV1alpha1RuntimeClassList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPINodeV1beta1RuntimeClassList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicy) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicyList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.RuntimeClass
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runtimeClass",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.AllowedRuntimeClassNames == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.AllowedRuntimeClassNames {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.AllowedRuntimeClassNames
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "allowedRuntimeClassNames",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIRbacV1ClusterRole) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Rules {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Rules
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rules",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIRbacV1ClusterRoleBindingList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIRbacV1ClusterRoleList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIRbacV1PolicyRule) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Verbs == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Verbs {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Verbs
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verbs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIRbacV1Role) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Rules {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Rules
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rules",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIRbacV1RoleBindingList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIRbacV1RoleList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPISchedulingV1PriorityClassList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIStorageV1CSIDriverList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIStorageV1CSINode) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIStorageV1CSINodeList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIStorageV1CSINodeSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Drivers == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Drivers {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Drivers
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "drivers",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIStorageV1StorageClass) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.AllowedTopologies {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.AllowedTopologies
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "allowedTopologies",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIStorageV1StorageClassList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIStorageV1VolumeAttachment) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIStorageV1VolumeAttachmentList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIStorageV1VolumeAttachmentSource) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.InlineVolumeSpec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "inlineVolumeSpec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIStorageV1VolumeAttachmentSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Source
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "source",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacityList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacityList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Webhook
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "webhook",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Spec
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spec",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Conversion
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "conversion",
			Error: err,
		})
	}
	if err := func() error {
		if s.Versions == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Versions {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Versions
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "versions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.ConversionReviewVersions == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.ConversionReviewVersions {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.ConversionReviewVersions
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "conversionReviewVersions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Versions == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Versions {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Versions
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "versions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sApimachineryPkgApisMetaV1APIGroupList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Groups == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Groups {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Groups
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "groups",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Verbs == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Verbs {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Verbs
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verbs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sApimachineryPkgApisMetaV1APIResourceList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Resources == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Resources {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Resources
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "resources",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sApimachineryPkgApisMetaV1APIVersions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.ServerAddressByClientCIDRs == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.ServerAddressByClientCIDRs {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.ServerAddressByClientCIDRs
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "serverAddressByClientCIDRs",
			Error: err,
		})
	}
	if err := func() error {
		if s.Versions == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Versions {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Versions
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "versions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Items
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
