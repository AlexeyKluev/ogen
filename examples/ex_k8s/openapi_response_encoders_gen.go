// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/encoding/json"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
)

func encodeGetServiceAccountIssuerOpenIDConfigurationResponse(response GetServiceAccountIssuerOpenIDConfigurationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GetServiceAccountIssuerOpenIDConfigurationOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GetServiceAccountIssuerOpenIDConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/.well-known/openid-configuration: unexpected response type for method: %T", response)
	}
}

func encodeGetCoreAPIVersionsResponse(response GetCoreAPIVersionsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIVersions:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIVersions:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIVersions:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetCoreAPIVersionsUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api: unexpected response type for method: %T", response)
	}
}

func encodeGetCoreV1APIResourcesResponse(response GetCoreV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GetCoreV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1: unexpected response type for method: %T", response)
	}
}

func encodeListCoreV1ComponentStatusResponse(response ListCoreV1ComponentStatusResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ComponentStatusList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1ComponentStatusList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1ComponentStatusList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1ComponentStatusList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1ComponentStatusList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListCoreV1ComponentStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/componentstatuses: unexpected response type for method: %T", response)
	}
}

func encodeListCoreV1ConfigMapForAllNamespacesResponse(response ListCoreV1ConfigMapForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ConfigMapList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1ConfigMapList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1ConfigMapList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1ConfigMapList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1ConfigMapList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ListCoreV1ConfigMapForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/configmaps: unexpected response type for method: %T", response)
	}
}

func encodeListCoreV1EndpointsForAllNamespacesResponse(response ListCoreV1EndpointsForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1EndpointsList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1EndpointsList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1EndpointsList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1EndpointsList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1EndpointsList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *ListCoreV1EndpointsForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/endpoints: unexpected response type for method: %T", response)
	}
}

func encodeListCoreV1EventForAllNamespacesResponse(response ListCoreV1EventForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1EventList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1EventList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1EventList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1EventList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1EventList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *ListCoreV1EventForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/events: unexpected response type for method: %T", response)
	}
}

func encodeListCoreV1LimitRangeForAllNamespacesResponse(response ListCoreV1LimitRangeForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1LimitRangeList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1LimitRangeList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1LimitRangeList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1LimitRangeList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1LimitRangeList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *ListCoreV1LimitRangeForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/limitranges: unexpected response type for method: %T", response)
	}
}

func encodeListCoreV1NamespaceResponse(response ListCoreV1NamespaceResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1NamespaceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1NamespaceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1NamespaceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1NamespaceList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1NamespaceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListCoreV1NamespaceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/namespaces: unexpected response type for method: %T", response)
	}
}

func encodeCreateCoreV1NamespaceResponse(response CreateCoreV1NamespaceResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1Namespace:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1Namespace:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1Namespace:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1Namespace:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1Namespace:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1Namespace:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1Namespace:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1Namespace:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1Namespace:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateCoreV1NamespaceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/namespaces: unexpected response type for method: %T", response)
	}
}

func encodeListCoreV1NodeResponse(response ListCoreV1NodeResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1NodeList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1NodeList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1NodeList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1NodeList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1NodeList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ListCoreV1NodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/nodes: unexpected response type for method: %T", response)
	}
}

func encodeCreateCoreV1NodeResponse(response CreateCoreV1NodeResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1Node:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1Node:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1Node:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1Node:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1Node:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1Node:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1Node:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1Node:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1Node:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateCoreV1NodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/nodes: unexpected response type for method: %T", response)
	}
}

func encodeDeleteCoreV1CollectionNodeResponse(response DeleteCoreV1CollectionNodeResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *DeleteCoreV1CollectionNodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/nodes: unexpected response type for method: %T", response)
	}
}

func encodeListCoreV1PersistentVolumeClaimForAllNamespacesResponse(response ListCoreV1PersistentVolumeClaimForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1PersistentVolumeClaimList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1PersistentVolumeClaimList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1PersistentVolumeClaimList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1PersistentVolumeClaimList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1PersistentVolumeClaimList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *ListCoreV1PersistentVolumeClaimForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/persistentvolumeclaims: unexpected response type for method: %T", response)
	}
}

func encodeListCoreV1PersistentVolumeResponse(response ListCoreV1PersistentVolumeResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1PersistentVolumeList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1PersistentVolumeList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1PersistentVolumeList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1PersistentVolumeList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1PersistentVolumeList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *ListCoreV1PersistentVolumeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/persistentvolumes: unexpected response type for method: %T", response)
	}
}

func encodeCreateCoreV1PersistentVolumeResponse(response CreateCoreV1PersistentVolumeResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1PersistentVolume:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1PersistentVolume:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1PersistentVolume:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1PersistentVolume:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1PersistentVolume:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1PersistentVolume:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1PersistentVolume:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1PersistentVolume:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1PersistentVolume:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *CreateCoreV1PersistentVolumeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/persistentvolumes: unexpected response type for method: %T", response)
	}
}

func encodeDeleteCoreV1CollectionPersistentVolumeResponse(response DeleteCoreV1CollectionPersistentVolumeResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *DeleteCoreV1CollectionPersistentVolumeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/persistentvolumes: unexpected response type for method: %T", response)
	}
}

func encodeListCoreV1PodForAllNamespacesResponse(response ListCoreV1PodForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1PodList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1PodList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1PodList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1PodList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1PodList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListCoreV1PodForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/pods: unexpected response type for method: %T", response)
	}
}

func encodeListCoreV1PodTemplateForAllNamespacesResponse(response ListCoreV1PodTemplateForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1PodTemplateList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1PodTemplateList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1PodTemplateList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1PodTemplateList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1PodTemplateList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *ListCoreV1PodTemplateForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/podtemplates: unexpected response type for method: %T", response)
	}
}

func encodeListCoreV1ReplicationControllerForAllNamespacesResponse(response ListCoreV1ReplicationControllerForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ReplicationControllerList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1ReplicationControllerList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1ReplicationControllerList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1ReplicationControllerList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1ReplicationControllerList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *ListCoreV1ReplicationControllerForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/replicationcontrollers: unexpected response type for method: %T", response)
	}
}

func encodeListCoreV1ResourceQuotaForAllNamespacesResponse(response ListCoreV1ResourceQuotaForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ResourceQuotaList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1ResourceQuotaList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoreV1ResourceQuotaList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1ResourceQuotaList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1ResourceQuotaList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListCoreV1ResourceQuotaForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/resourcequotas: unexpected response type for method: %T", response)
	}
}

func encodeListCoreV1SecretForAllNamespacesResponse(response ListCoreV1SecretForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1SecretList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1SecretList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1SecretList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1SecretList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1SecretList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *ListCoreV1SecretForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/secrets: unexpected response type for method: %T", response)
	}
}

func encodeListCoreV1ServiceAccountForAllNamespacesResponse(response ListCoreV1ServiceAccountForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ServiceAccountList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1ServiceAccountList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1ServiceAccountList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1ServiceAccountList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1ServiceAccountList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *ListCoreV1ServiceAccountForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/serviceaccounts: unexpected response type for method: %T", response)
	}
}

func encodeListCoreV1ServiceForAllNamespacesResponse(response ListCoreV1ServiceForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ServiceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoreV1ServiceList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1ServiceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPICoreV1ServiceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoreV1ServiceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *ListCoreV1ServiceForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/services: unexpected response type for method: %T", response)
	}
}

func encodeWatchCoreV1ConfigMapListForAllNamespacesResponse(response WatchCoreV1ConfigMapListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchCoreV1ConfigMapListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/watch/configmaps: unexpected response type for method: %T", response)
	}
}

func encodeWatchCoreV1EndpointsListForAllNamespacesResponse(response WatchCoreV1EndpointsListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchCoreV1EndpointsListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/watch/endpoints: unexpected response type for method: %T", response)
	}
}

func encodeWatchCoreV1EventListForAllNamespacesResponse(response WatchCoreV1EventListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchCoreV1EventListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/watch/events: unexpected response type for method: %T", response)
	}
}

func encodeWatchCoreV1LimitRangeListForAllNamespacesResponse(response WatchCoreV1LimitRangeListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *WatchCoreV1LimitRangeListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/watch/limitranges: unexpected response type for method: %T", response)
	}
}

func encodeWatchCoreV1NamespaceListResponse(response WatchCoreV1NamespaceListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *WatchCoreV1NamespaceListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/watch/namespaces: unexpected response type for method: %T", response)
	}
}

func encodeWatchCoreV1NodeListResponse(response WatchCoreV1NodeListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *WatchCoreV1NodeListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/watch/nodes: unexpected response type for method: %T", response)
	}
}

func encodeWatchCoreV1PersistentVolumeClaimListForAllNamespacesResponse(response WatchCoreV1PersistentVolumeClaimListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchCoreV1PersistentVolumeClaimListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/watch/persistentvolumeclaims: unexpected response type for method: %T", response)
	}
}

func encodeWatchCoreV1PersistentVolumeListResponse(response WatchCoreV1PersistentVolumeListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *WatchCoreV1PersistentVolumeListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/watch/persistentvolumes: unexpected response type for method: %T", response)
	}
}

func encodeWatchCoreV1PodListForAllNamespacesResponse(response WatchCoreV1PodListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchCoreV1PodListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/watch/pods: unexpected response type for method: %T", response)
	}
}

func encodeWatchCoreV1PodTemplateListForAllNamespacesResponse(response WatchCoreV1PodTemplateListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *WatchCoreV1PodTemplateListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/watch/podtemplates: unexpected response type for method: %T", response)
	}
}

func encodeWatchCoreV1ReplicationControllerListForAllNamespacesResponse(response WatchCoreV1ReplicationControllerListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *WatchCoreV1ReplicationControllerListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/watch/replicationcontrollers: unexpected response type for method: %T", response)
	}
}

func encodeWatchCoreV1ResourceQuotaListForAllNamespacesResponse(response WatchCoreV1ResourceQuotaListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchCoreV1ResourceQuotaListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/watch/resourcequotas: unexpected response type for method: %T", response)
	}
}

func encodeWatchCoreV1SecretListForAllNamespacesResponse(response WatchCoreV1SecretListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *WatchCoreV1SecretListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/watch/secrets: unexpected response type for method: %T", response)
	}
}

func encodeWatchCoreV1ServiceAccountListForAllNamespacesResponse(response WatchCoreV1ServiceAccountListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchCoreV1ServiceAccountListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/watch/serviceaccounts: unexpected response type for method: %T", response)
	}
}

func encodeWatchCoreV1ServiceListForAllNamespacesResponse(response WatchCoreV1ServiceListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchCoreV1ServiceListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/api/v1/watch/services: unexpected response type for method: %T", response)
	}
}

func encodeGetAPIVersionsResponse(response GetAPIVersionsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroupList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroupList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroupList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GetAPIVersionsUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis: unexpected response type for method: %T", response)
	}
}

func encodeGetAdmissionregistrationAPIGroupResponse(response GetAdmissionregistrationAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *GetAdmissionregistrationAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/admissionregistration.k8s.io: unexpected response type for method: %T", response)
	}
}

func encodeGetAdmissionregistrationV1APIResourcesResponse(response GetAdmissionregistrationV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *GetAdmissionregistrationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/admissionregistration.k8s.io/v1: unexpected response type for method: %T", response)
	}
}

func encodeListAdmissionregistrationV1MutatingWebhookConfigurationResponse(response ListAdmissionregistrationV1MutatingWebhookConfigurationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ListAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations: unexpected response type for method: %T", response)
	}
}

func encodeCreateAdmissionregistrationV1MutatingWebhookConfigurationResponse(response CreateAdmissionregistrationV1MutatingWebhookConfigurationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *CreateAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations: unexpected response type for method: %T", response)
	}
}

func encodeDeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationResponse(response DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations: unexpected response type for method: %T", response)
	}
}

func encodeListAdmissionregistrationV1ValidatingWebhookConfigurationResponse(response ListAdmissionregistrationV1ValidatingWebhookConfigurationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations: unexpected response type for method: %T", response)
	}
}

func encodeCreateAdmissionregistrationV1ValidatingWebhookConfigurationResponse(response CreateAdmissionregistrationV1ValidatingWebhookConfigurationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *CreateAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations: unexpected response type for method: %T", response)
	}
}

func encodeDeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationResponse(response DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations: unexpected response type for method: %T", response)
	}
}

func encodeWatchAdmissionregistrationV1MutatingWebhookConfigurationListResponse(response WatchAdmissionregistrationV1MutatingWebhookConfigurationListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchAdmissionregistrationV1MutatingWebhookConfigurationListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations: unexpected response type for method: %T", response)
	}
}

func encodeWatchAdmissionregistrationV1ValidatingWebhookConfigurationListResponse(response WatchAdmissionregistrationV1ValidatingWebhookConfigurationListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchAdmissionregistrationV1ValidatingWebhookConfigurationListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations: unexpected response type for method: %T", response)
	}
}

func encodeGetApiextensionsAPIGroupResponse(response GetApiextensionsAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetApiextensionsAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apiextensions.k8s.io: unexpected response type for method: %T", response)
	}
}

func encodeGetApiextensionsV1APIResourcesResponse(response GetApiextensionsV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *GetApiextensionsV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apiextensions.k8s.io/v1: unexpected response type for method: %T", response)
	}
}

func encodeListApiextensionsV1CustomResourceDefinitionResponse(response ListApiextensionsV1CustomResourceDefinitionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListApiextensionsV1CustomResourceDefinitionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apiextensions.k8s.io/v1/customresourcedefinitions: unexpected response type for method: %T", response)
	}
}

func encodeCreateApiextensionsV1CustomResourceDefinitionResponse(response CreateApiextensionsV1CustomResourceDefinitionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateApiextensionsV1CustomResourceDefinitionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apiextensions.k8s.io/v1/customresourcedefinitions: unexpected response type for method: %T", response)
	}
}

func encodeDeleteApiextensionsV1CollectionCustomResourceDefinitionResponse(response DeleteApiextensionsV1CollectionCustomResourceDefinitionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *DeleteApiextensionsV1CollectionCustomResourceDefinitionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apiextensions.k8s.io/v1/customresourcedefinitions: unexpected response type for method: %T", response)
	}
}

func encodeWatchApiextensionsV1CustomResourceDefinitionListResponse(response WatchApiextensionsV1CustomResourceDefinitionListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *WatchApiextensionsV1CustomResourceDefinitionListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions: unexpected response type for method: %T", response)
	}
}

func encodeGetApiregistrationAPIGroupResponse(response GetApiregistrationAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetApiregistrationAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apiregistration.k8s.io: unexpected response type for method: %T", response)
	}
}

func encodeGetApiregistrationV1APIResourcesResponse(response GetApiregistrationV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GetApiregistrationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apiregistration.k8s.io/v1: unexpected response type for method: %T", response)
	}
}

func encodeListApiregistrationV1APIServiceResponse(response ListApiregistrationV1APIServiceResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *ListApiregistrationV1APIServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apiregistration.k8s.io/v1/apiservices: unexpected response type for method: %T", response)
	}
}

func encodeCreateApiregistrationV1APIServiceResponse(response CreateApiregistrationV1APIServiceResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateApiregistrationV1APIServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apiregistration.k8s.io/v1/apiservices: unexpected response type for method: %T", response)
	}
}

func encodeDeleteApiregistrationV1CollectionAPIServiceResponse(response DeleteApiregistrationV1CollectionAPIServiceResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *DeleteApiregistrationV1CollectionAPIServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apiregistration.k8s.io/v1/apiservices: unexpected response type for method: %T", response)
	}
}

func encodeWatchApiregistrationV1APIServiceListResponse(response WatchApiregistrationV1APIServiceListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *WatchApiregistrationV1APIServiceListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apiregistration.k8s.io/v1/watch/apiservices: unexpected response type for method: %T", response)
	}
}

func encodeGetAppsAPIGroupResponse(response GetAppsAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *GetAppsAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apps: unexpected response type for method: %T", response)
	}
}

func encodeGetAppsV1APIResourcesResponse(response GetAppsV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetAppsV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apps/v1: unexpected response type for method: %T", response)
	}
}

func encodeListAppsV1ControllerRevisionForAllNamespacesResponse(response ListAppsV1ControllerRevisionForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1ControllerRevisionList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAppsV1ControllerRevisionList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAppsV1ControllerRevisionList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIAppsV1ControllerRevisionList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIAppsV1ControllerRevisionList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ListAppsV1ControllerRevisionForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apps/v1/controllerrevisions: unexpected response type for method: %T", response)
	}
}

func encodeListAppsV1DaemonSetForAllNamespacesResponse(response ListAppsV1DaemonSetForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1DaemonSetList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAppsV1DaemonSetList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIAppsV1DaemonSetList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIAppsV1DaemonSetList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAppsV1DaemonSetList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *ListAppsV1DaemonSetForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apps/v1/daemonsets: unexpected response type for method: %T", response)
	}
}

func encodeListAppsV1DeploymentForAllNamespacesResponse(response ListAppsV1DeploymentForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1DeploymentList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAppsV1DeploymentList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAppsV1DeploymentList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIAppsV1DeploymentList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIAppsV1DeploymentList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ListAppsV1DeploymentForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apps/v1/deployments: unexpected response type for method: %T", response)
	}
}

func encodeListAppsV1ReplicaSetForAllNamespacesResponse(response ListAppsV1ReplicaSetForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1ReplicaSetList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAppsV1ReplicaSetList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAppsV1ReplicaSetList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAppsV1ReplicaSetList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIAppsV1ReplicaSetList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListAppsV1ReplicaSetForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apps/v1/replicasets: unexpected response type for method: %T", response)
	}
}

func encodeListAppsV1StatefulSetForAllNamespacesResponse(response ListAppsV1StatefulSetForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1StatefulSetList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAppsV1StatefulSetList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAppsV1StatefulSetList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIAppsV1StatefulSetList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIAppsV1StatefulSetList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ListAppsV1StatefulSetForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apps/v1/statefulsets: unexpected response type for method: %T", response)
	}
}

func encodeWatchAppsV1ControllerRevisionListForAllNamespacesResponse(response WatchAppsV1ControllerRevisionListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *WatchAppsV1ControllerRevisionListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apps/v1/watch/controllerrevisions: unexpected response type for method: %T", response)
	}
}

func encodeWatchAppsV1DaemonSetListForAllNamespacesResponse(response WatchAppsV1DaemonSetListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchAppsV1DaemonSetListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apps/v1/watch/daemonsets: unexpected response type for method: %T", response)
	}
}

func encodeWatchAppsV1DeploymentListForAllNamespacesResponse(response WatchAppsV1DeploymentListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *WatchAppsV1DeploymentListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apps/v1/watch/deployments: unexpected response type for method: %T", response)
	}
}

func encodeWatchAppsV1ReplicaSetListForAllNamespacesResponse(response WatchAppsV1ReplicaSetListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchAppsV1ReplicaSetListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apps/v1/watch/replicasets: unexpected response type for method: %T", response)
	}
}

func encodeWatchAppsV1StatefulSetListForAllNamespacesResponse(response WatchAppsV1StatefulSetListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchAppsV1StatefulSetListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/apps/v1/watch/statefulsets: unexpected response type for method: %T", response)
	}
}

func encodeGetAuthenticationAPIGroupResponse(response GetAuthenticationAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetAuthenticationAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/authentication.k8s.io: unexpected response type for method: %T", response)
	}
}

func encodeGetAuthenticationV1APIResourcesResponse(response GetAuthenticationV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetAuthenticationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/authentication.k8s.io/v1: unexpected response type for method: %T", response)
	}
}

func encodeCreateAuthenticationV1TokenReviewResponse(response CreateAuthenticationV1TokenReviewResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIAuthenticationV1TokenReview:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAuthenticationV1TokenReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAuthenticationV1TokenReview:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAuthenticationV1TokenReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAuthenticationV1TokenReview:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAuthenticationV1TokenReview:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAuthenticationV1TokenReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAuthenticationV1TokenReview:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAuthenticationV1TokenReview:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateAuthenticationV1TokenReviewUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/authentication.k8s.io/v1/tokenreviews: unexpected response type for method: %T", response)
	}
}

func encodeGetAuthorizationAPIGroupResponse(response GetAuthorizationAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetAuthorizationAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/authorization.k8s.io: unexpected response type for method: %T", response)
	}
}

func encodeGetAuthorizationV1APIResourcesResponse(response GetAuthorizationV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetAuthorizationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/authorization.k8s.io/v1: unexpected response type for method: %T", response)
	}
}

func encodeCreateAuthorizationV1SelfSubjectAccessReviewResponse(response CreateAuthorizationV1SelfSubjectAccessReviewResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIAuthorizationV1SelfSubjectAccessReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAuthorizationV1SelfSubjectAccessReview:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAuthorizationV1SelfSubjectAccessReview:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAuthorizationV1SelfSubjectAccessReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAuthorizationV1SelfSubjectAccessReview:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAuthorizationV1SelfSubjectAccessReview:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAuthorizationV1SelfSubjectAccessReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAuthorizationV1SelfSubjectAccessReview:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAuthorizationV1SelfSubjectAccessReview:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateAuthorizationV1SelfSubjectAccessReviewUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/authorization.k8s.io/v1/selfsubjectaccessreviews: unexpected response type for method: %T", response)
	}
}

func encodeCreateAuthorizationV1SelfSubjectRulesReviewResponse(response CreateAuthorizationV1SelfSubjectRulesReviewResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIAuthorizationV1SelfSubjectRulesReview:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAuthorizationV1SelfSubjectRulesReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAuthorizationV1SelfSubjectRulesReview:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAuthorizationV1SelfSubjectRulesReview:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAuthorizationV1SelfSubjectRulesReview:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAuthorizationV1SelfSubjectRulesReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAuthorizationV1SelfSubjectRulesReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAuthorizationV1SelfSubjectRulesReview:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAuthorizationV1SelfSubjectRulesReview:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateAuthorizationV1SelfSubjectRulesReviewUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/authorization.k8s.io/v1/selfsubjectrulesreviews: unexpected response type for method: %T", response)
	}
}

func encodeCreateAuthorizationV1SubjectAccessReviewResponse(response CreateAuthorizationV1SubjectAccessReviewResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIAuthorizationV1SubjectAccessReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAuthorizationV1SubjectAccessReview:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAuthorizationV1SubjectAccessReview:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAuthorizationV1SubjectAccessReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAuthorizationV1SubjectAccessReview:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAuthorizationV1SubjectAccessReview:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAuthorizationV1SubjectAccessReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAuthorizationV1SubjectAccessReview:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAuthorizationV1SubjectAccessReview:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateAuthorizationV1SubjectAccessReviewUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/authorization.k8s.io/v1/subjectaccessreviews: unexpected response type for method: %T", response)
	}
}

func encodeGetAutoscalingAPIGroupResponse(response GetAutoscalingAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *GetAutoscalingAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/autoscaling: unexpected response type for method: %T", response)
	}
}

func encodeGetAutoscalingV1APIResourcesResponse(response GetAutoscalingV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetAutoscalingV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/autoscaling/v1: unexpected response type for method: %T", response)
	}
}

func encodeListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesResponse(response ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/autoscaling/v1/horizontalpodautoscalers: unexpected response type for method: %T", response)
	}
}

func encodeWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesResponse(response WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/autoscaling/v1/watch/horizontalpodautoscalers: unexpected response type for method: %T", response)
	}
}

func encodeGetAutoscalingV2beta1APIResourcesResponse(response GetAutoscalingV2beta1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetAutoscalingV2beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/autoscaling/v2beta1: unexpected response type for method: %T", response)
	}
}

func encodeListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesResponse(response ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/autoscaling/v2beta1/horizontalpodautoscalers: unexpected response type for method: %T", response)
	}
}

func encodeWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesResponse(response WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/autoscaling/v2beta1/watch/horizontalpodautoscalers: unexpected response type for method: %T", response)
	}
}

func encodeGetAutoscalingV2beta2APIResourcesResponse(response GetAutoscalingV2beta2APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *GetAutoscalingV2beta2APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/autoscaling/v2beta2: unexpected response type for method: %T", response)
	}
}

func encodeListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesResponse(response ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/autoscaling/v2beta2/horizontalpodautoscalers: unexpected response type for method: %T", response)
	}
}

func encodeWatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesResponse(response WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/autoscaling/v2beta2/watch/horizontalpodautoscalers: unexpected response type for method: %T", response)
	}
}

func encodeGetBatchAPIGroupResponse(response GetBatchAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetBatchAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/batch: unexpected response type for method: %T", response)
	}
}

func encodeGetBatchV1APIResourcesResponse(response GetBatchV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetBatchV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/batch/v1: unexpected response type for method: %T", response)
	}
}

func encodeListBatchV1CronJobForAllNamespacesResponse(response ListBatchV1CronJobForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIBatchV1CronJobList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIBatchV1CronJobList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIBatchV1CronJobList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIBatchV1CronJobList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIBatchV1CronJobList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListBatchV1CronJobForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/batch/v1/cronjobs: unexpected response type for method: %T", response)
	}
}

func encodeListBatchV1JobForAllNamespacesResponse(response ListBatchV1JobForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIBatchV1JobList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIBatchV1JobList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIBatchV1JobList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIBatchV1JobList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIBatchV1JobList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ListBatchV1JobForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/batch/v1/jobs: unexpected response type for method: %T", response)
	}
}

func encodeWatchBatchV1CronJobListForAllNamespacesResponse(response WatchBatchV1CronJobListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchBatchV1CronJobListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/batch/v1/watch/cronjobs: unexpected response type for method: %T", response)
	}
}

func encodeWatchBatchV1JobListForAllNamespacesResponse(response WatchBatchV1JobListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *WatchBatchV1JobListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/batch/v1/watch/jobs: unexpected response type for method: %T", response)
	}
}

func encodeGetBatchV1beta1APIResourcesResponse(response GetBatchV1beta1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GetBatchV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/batch/v1beta1: unexpected response type for method: %T", response)
	}
}

func encodeListBatchV1beta1CronJobForAllNamespacesResponse(response ListBatchV1beta1CronJobForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIBatchV1beta1CronJobList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIBatchV1beta1CronJobList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIBatchV1beta1CronJobList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIBatchV1beta1CronJobList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIBatchV1beta1CronJobList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *ListBatchV1beta1CronJobForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/batch/v1beta1/cronjobs: unexpected response type for method: %T", response)
	}
}

func encodeWatchBatchV1beta1CronJobListForAllNamespacesResponse(response WatchBatchV1beta1CronJobListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *WatchBatchV1beta1CronJobListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/batch/v1beta1/watch/cronjobs: unexpected response type for method: %T", response)
	}
}

func encodeGetCertificatesAPIGroupResponse(response GetCertificatesAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetCertificatesAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/certificates.k8s.io: unexpected response type for method: %T", response)
	}
}

func encodeGetCertificatesV1APIResourcesResponse(response GetCertificatesV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *GetCertificatesV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/certificates.k8s.io/v1: unexpected response type for method: %T", response)
	}
}

func encodeListCertificatesV1CertificateSigningRequestResponse(response ListCertificatesV1CertificateSigningRequestResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICertificatesV1CertificateSigningRequestList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPICertificatesV1CertificateSigningRequestList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICertificatesV1CertificateSigningRequestList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICertificatesV1CertificateSigningRequestList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICertificatesV1CertificateSigningRequestList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *ListCertificatesV1CertificateSigningRequestUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/certificates.k8s.io/v1/certificatesigningrequests: unexpected response type for method: %T", response)
	}
}

func encodeCreateCertificatesV1CertificateSigningRequestResponse(response CreateCertificatesV1CertificateSigningRequestResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICertificatesV1CertificateSigningRequest:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICertificatesV1CertificateSigningRequest:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICertificatesV1CertificateSigningRequest:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICertificatesV1CertificateSigningRequest:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICertificatesV1CertificateSigningRequest:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICertificatesV1CertificateSigningRequest:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICertificatesV1CertificateSigningRequest:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICertificatesV1CertificateSigningRequest:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICertificatesV1CertificateSigningRequest:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateCertificatesV1CertificateSigningRequestUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/certificates.k8s.io/v1/certificatesigningrequests: unexpected response type for method: %T", response)
	}
}

func encodeDeleteCertificatesV1CollectionCertificateSigningRequestResponse(response DeleteCertificatesV1CollectionCertificateSigningRequestResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *DeleteCertificatesV1CollectionCertificateSigningRequestUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/certificates.k8s.io/v1/certificatesigningrequests: unexpected response type for method: %T", response)
	}
}

func encodeWatchCertificatesV1CertificateSigningRequestListResponse(response WatchCertificatesV1CertificateSigningRequestListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *WatchCertificatesV1CertificateSigningRequestListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/certificates.k8s.io/v1/watch/certificatesigningrequests: unexpected response type for method: %T", response)
	}
}

func encodeGetCoordinationAPIGroupResponse(response GetCoordinationAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GetCoordinationAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/coordination.k8s.io: unexpected response type for method: %T", response)
	}
}

func encodeGetCoordinationV1APIResourcesResponse(response GetCoordinationV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetCoordinationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/coordination.k8s.io/v1: unexpected response type for method: %T", response)
	}
}

func encodeListCoordinationV1LeaseForAllNamespacesResponse(response ListCoordinationV1LeaseForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPICoordinationV1LeaseList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPICoordinationV1LeaseList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPICoordinationV1LeaseList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPICoordinationV1LeaseList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPICoordinationV1LeaseList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListCoordinationV1LeaseForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/coordination.k8s.io/v1/leases: unexpected response type for method: %T", response)
	}
}

func encodeWatchCoordinationV1LeaseListForAllNamespacesResponse(response WatchCoordinationV1LeaseListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *WatchCoordinationV1LeaseListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/coordination.k8s.io/v1/watch/leases: unexpected response type for method: %T", response)
	}
}

func encodeGetDiscoveryAPIGroupResponse(response GetDiscoveryAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetDiscoveryAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/discovery.k8s.io: unexpected response type for method: %T", response)
	}
}

func encodeGetDiscoveryV1APIResourcesResponse(response GetDiscoveryV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *GetDiscoveryV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/discovery.k8s.io/v1: unexpected response type for method: %T", response)
	}
}

func encodeListDiscoveryV1EndpointSliceForAllNamespacesResponse(response ListDiscoveryV1EndpointSliceForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIDiscoveryV1EndpointSliceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIDiscoveryV1EndpointSliceList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIDiscoveryV1EndpointSliceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIDiscoveryV1EndpointSliceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIDiscoveryV1EndpointSliceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *ListDiscoveryV1EndpointSliceForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/discovery.k8s.io/v1/endpointslices: unexpected response type for method: %T", response)
	}
}

func encodeWatchDiscoveryV1EndpointSliceListForAllNamespacesResponse(response WatchDiscoveryV1EndpointSliceListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *WatchDiscoveryV1EndpointSliceListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/discovery.k8s.io/v1/watch/endpointslices: unexpected response type for method: %T", response)
	}
}

func encodeGetDiscoveryV1beta1APIResourcesResponse(response GetDiscoveryV1beta1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetDiscoveryV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/discovery.k8s.io/v1beta1: unexpected response type for method: %T", response)
	}
}

func encodeListDiscoveryV1beta1EndpointSliceForAllNamespacesResponse(response ListDiscoveryV1beta1EndpointSliceForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIDiscoveryV1beta1EndpointSliceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIDiscoveryV1beta1EndpointSliceList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIDiscoveryV1beta1EndpointSliceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIDiscoveryV1beta1EndpointSliceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIDiscoveryV1beta1EndpointSliceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *ListDiscoveryV1beta1EndpointSliceForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/discovery.k8s.io/v1beta1/endpointslices: unexpected response type for method: %T", response)
	}
}

func encodeWatchDiscoveryV1beta1EndpointSliceListForAllNamespacesResponse(response WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/discovery.k8s.io/v1beta1/watch/endpointslices: unexpected response type for method: %T", response)
	}
}

func encodeGetEventsAPIGroupResponse(response GetEventsAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetEventsAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/events.k8s.io: unexpected response type for method: %T", response)
	}
}

func encodeGetEventsV1APIResourcesResponse(response GetEventsV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GetEventsV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/events.k8s.io/v1: unexpected response type for method: %T", response)
	}
}

func encodeListEventsV1EventForAllNamespacesResponse(response ListEventsV1EventForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIEventsV1EventList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIEventsV1EventList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIEventsV1EventList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIEventsV1EventList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIEventsV1EventList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *ListEventsV1EventForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/events.k8s.io/v1/events: unexpected response type for method: %T", response)
	}
}

func encodeWatchEventsV1EventListForAllNamespacesResponse(response WatchEventsV1EventListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *WatchEventsV1EventListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/events.k8s.io/v1/watch/events: unexpected response type for method: %T", response)
	}
}

func encodeGetEventsV1beta1APIResourcesResponse(response GetEventsV1beta1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetEventsV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/events.k8s.io/v1beta1: unexpected response type for method: %T", response)
	}
}

func encodeListEventsV1beta1EventForAllNamespacesResponse(response ListEventsV1beta1EventForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIEventsV1beta1EventList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIEventsV1beta1EventList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIEventsV1beta1EventList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIEventsV1beta1EventList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIEventsV1beta1EventList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ListEventsV1beta1EventForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/events.k8s.io/v1beta1/events: unexpected response type for method: %T", response)
	}
}

func encodeWatchEventsV1beta1EventListForAllNamespacesResponse(response WatchEventsV1beta1EventListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *WatchEventsV1beta1EventListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/events.k8s.io/v1beta1/watch/events: unexpected response type for method: %T", response)
	}
}

func encodeGetFlowcontrolApiserverAPIGroupResponse(response GetFlowcontrolApiserverAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GetFlowcontrolApiserverAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io: unexpected response type for method: %T", response)
	}
}

func encodeGetFlowcontrolApiserverV1beta1APIResourcesResponse(response GetFlowcontrolApiserverV1beta1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetFlowcontrolApiserverV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1: unexpected response type for method: %T", response)
	}
}

func encodeListFlowcontrolApiserverV1beta1FlowSchemaResponse(response ListFlowcontrolApiserverV1beta1FlowSchemaResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta1FlowSchemaList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta1FlowSchemaList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIFlowcontrolV1beta1FlowSchemaList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta1FlowSchemaList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta1FlowSchemaList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *ListFlowcontrolApiserverV1beta1FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas: unexpected response type for method: %T", response)
	}
}

func encodeCreateFlowcontrolApiserverV1beta1FlowSchemaResponse(response CreateFlowcontrolApiserverV1beta1FlowSchemaResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta1FlowSchema:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIFlowcontrolV1beta1FlowSchema:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta1FlowSchema:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta1FlowSchema:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta1FlowSchema:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIFlowcontrolV1beta1FlowSchema:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta1FlowSchema:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIFlowcontrolV1beta1FlowSchema:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta1FlowSchema:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateFlowcontrolApiserverV1beta1FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas: unexpected response type for method: %T", response)
	}
}

func encodeDeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaResponse(response DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas: unexpected response type for method: %T", response)
	}
}

func encodeListFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(response ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations: unexpected response type for method: %T", response)
	}
}

func encodeCreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(response CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations: unexpected response type for method: %T", response)
	}
}

func encodeDeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationResponse(response DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations: unexpected response type for method: %T", response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta1FlowSchemaListResponse(response WatchFlowcontrolApiserverV1beta1FlowSchemaListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *WatchFlowcontrolApiserverV1beta1FlowSchemaListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/flowschemas: unexpected response type for method: %T", response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListResponse(response WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/prioritylevelconfigurations: unexpected response type for method: %T", response)
	}
}

func encodeGetFlowcontrolApiserverV1beta2APIResourcesResponse(response GetFlowcontrolApiserverV1beta2APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *GetFlowcontrolApiserverV1beta2APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2: unexpected response type for method: %T", response)
	}
}

func encodeListFlowcontrolApiserverV1beta2FlowSchemaResponse(response ListFlowcontrolApiserverV1beta2FlowSchemaResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta2FlowSchemaList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta2FlowSchemaList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta2FlowSchemaList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta2FlowSchemaList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIFlowcontrolV1beta2FlowSchemaList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *ListFlowcontrolApiserverV1beta2FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas: unexpected response type for method: %T", response)
	}
}

func encodeCreateFlowcontrolApiserverV1beta2FlowSchemaResponse(response CreateFlowcontrolApiserverV1beta2FlowSchemaResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta2FlowSchema:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta2FlowSchema:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIFlowcontrolV1beta2FlowSchema:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta2FlowSchema:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIFlowcontrolV1beta2FlowSchema:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta2FlowSchema:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta2FlowSchema:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIFlowcontrolV1beta2FlowSchema:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta2FlowSchema:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateFlowcontrolApiserverV1beta2FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas: unexpected response type for method: %T", response)
	}
}

func encodeDeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaResponse(response DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas: unexpected response type for method: %T", response)
	}
}

func encodeListFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(response ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations: unexpected response type for method: %T", response)
	}
}

func encodeCreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(response CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations: unexpected response type for method: %T", response)
	}
}

func encodeDeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationResponse(response DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations: unexpected response type for method: %T", response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta2FlowSchemaListResponse(response WatchFlowcontrolApiserverV1beta2FlowSchemaListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *WatchFlowcontrolApiserverV1beta2FlowSchemaListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas: unexpected response type for method: %T", response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListResponse(response WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations: unexpected response type for method: %T", response)
	}
}

func encodeGetInternalApiserverAPIGroupResponse(response GetInternalApiserverAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GetInternalApiserverAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/internal.apiserver.k8s.io: unexpected response type for method: %T", response)
	}
}

func encodeGetInternalApiserverV1alpha1APIResourcesResponse(response GetInternalApiserverV1alpha1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetInternalApiserverV1alpha1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/internal.apiserver.k8s.io/v1alpha1: unexpected response type for method: %T", response)
	}
}

func encodeListInternalApiserverV1alpha1StorageVersionResponse(response ListInternalApiserverV1alpha1StorageVersionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIApiserverinternalV1alpha1StorageVersionList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIApiserverinternalV1alpha1StorageVersionList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIApiserverinternalV1alpha1StorageVersionList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIApiserverinternalV1alpha1StorageVersionList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIApiserverinternalV1alpha1StorageVersionList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *ListInternalApiserverV1alpha1StorageVersionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/internal.apiserver.k8s.io/v1alpha1/storageversions: unexpected response type for method: %T", response)
	}
}

func encodeCreateInternalApiserverV1alpha1StorageVersionResponse(response CreateInternalApiserverV1alpha1StorageVersionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIApiserverinternalV1alpha1StorageVersion:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIApiserverinternalV1alpha1StorageVersion:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIApiserverinternalV1alpha1StorageVersion:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIApiserverinternalV1alpha1StorageVersion:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIApiserverinternalV1alpha1StorageVersion:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIApiserverinternalV1alpha1StorageVersion:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIApiserverinternalV1alpha1StorageVersion:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIApiserverinternalV1alpha1StorageVersion:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIApiserverinternalV1alpha1StorageVersion:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *CreateInternalApiserverV1alpha1StorageVersionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/internal.apiserver.k8s.io/v1alpha1/storageversions: unexpected response type for method: %T", response)
	}
}

func encodeDeleteInternalApiserverV1alpha1CollectionStorageVersionResponse(response DeleteInternalApiserverV1alpha1CollectionStorageVersionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *DeleteInternalApiserverV1alpha1CollectionStorageVersionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/internal.apiserver.k8s.io/v1alpha1/storageversions: unexpected response type for method: %T", response)
	}
}

func encodeWatchInternalApiserverV1alpha1StorageVersionListResponse(response WatchInternalApiserverV1alpha1StorageVersionListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *WatchInternalApiserverV1alpha1StorageVersionListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/internal.apiserver.k8s.io/v1alpha1/watch/storageversions: unexpected response type for method: %T", response)
	}
}

func encodeGetNetworkingAPIGroupResponse(response GetNetworkingAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *GetNetworkingAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/networking.k8s.io: unexpected response type for method: %T", response)
	}
}

func encodeGetNetworkingV1APIResourcesResponse(response GetNetworkingV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GetNetworkingV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/networking.k8s.io/v1: unexpected response type for method: %T", response)
	}
}

func encodeListNetworkingV1IngressClassResponse(response ListNetworkingV1IngressClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPINetworkingV1IngressClassList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPINetworkingV1IngressClassList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPINetworkingV1IngressClassList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPINetworkingV1IngressClassList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPINetworkingV1IngressClassList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *ListNetworkingV1IngressClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/networking.k8s.io/v1/ingressclasses: unexpected response type for method: %T", response)
	}
}

func encodeCreateNetworkingV1IngressClassResponse(response CreateNetworkingV1IngressClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPINetworkingV1IngressClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPINetworkingV1IngressClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPINetworkingV1IngressClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPINetworkingV1IngressClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPINetworkingV1IngressClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPINetworkingV1IngressClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPINetworkingV1IngressClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPINetworkingV1IngressClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPINetworkingV1IngressClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CreateNetworkingV1IngressClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/networking.k8s.io/v1/ingressclasses: unexpected response type for method: %T", response)
	}
}

func encodeDeleteNetworkingV1CollectionIngressClassResponse(response DeleteNetworkingV1CollectionIngressClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *DeleteNetworkingV1CollectionIngressClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/networking.k8s.io/v1/ingressclasses: unexpected response type for method: %T", response)
	}
}

func encodeListNetworkingV1IngressForAllNamespacesResponse(response ListNetworkingV1IngressForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPINetworkingV1IngressList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPINetworkingV1IngressList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPINetworkingV1IngressList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPINetworkingV1IngressList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPINetworkingV1IngressList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListNetworkingV1IngressForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/networking.k8s.io/v1/ingresses: unexpected response type for method: %T", response)
	}
}

func encodeListNetworkingV1NetworkPolicyForAllNamespacesResponse(response ListNetworkingV1NetworkPolicyForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPINetworkingV1NetworkPolicyList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPINetworkingV1NetworkPolicyList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPINetworkingV1NetworkPolicyList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPINetworkingV1NetworkPolicyList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPINetworkingV1NetworkPolicyList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *ListNetworkingV1NetworkPolicyForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/networking.k8s.io/v1/networkpolicies: unexpected response type for method: %T", response)
	}
}

func encodeWatchNetworkingV1IngressClassListResponse(response WatchNetworkingV1IngressClassListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchNetworkingV1IngressClassListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/networking.k8s.io/v1/watch/ingressclasses: unexpected response type for method: %T", response)
	}
}

func encodeWatchNetworkingV1IngressListForAllNamespacesResponse(response WatchNetworkingV1IngressListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchNetworkingV1IngressListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/networking.k8s.io/v1/watch/ingresses: unexpected response type for method: %T", response)
	}
}

func encodeWatchNetworkingV1NetworkPolicyListForAllNamespacesResponse(response WatchNetworkingV1NetworkPolicyListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *WatchNetworkingV1NetworkPolicyListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/networking.k8s.io/v1/watch/networkpolicies: unexpected response type for method: %T", response)
	}
}

func encodeGetNodeAPIGroupResponse(response GetNodeAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetNodeAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/node.k8s.io: unexpected response type for method: %T", response)
	}
}

func encodeGetNodeV1APIResourcesResponse(response GetNodeV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetNodeV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/node.k8s.io/v1: unexpected response type for method: %T", response)
	}
}

func encodeListNodeV1RuntimeClassResponse(response ListNodeV1RuntimeClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPINodeV1RuntimeClassList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPINodeV1RuntimeClassList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPINodeV1RuntimeClassList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPINodeV1RuntimeClassList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPINodeV1RuntimeClassList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *ListNodeV1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/node.k8s.io/v1/runtimeclasses: unexpected response type for method: %T", response)
	}
}

func encodeCreateNodeV1RuntimeClassResponse(response CreateNodeV1RuntimeClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPINodeV1RuntimeClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPINodeV1RuntimeClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPINodeV1RuntimeClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPINodeV1RuntimeClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPINodeV1RuntimeClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPINodeV1RuntimeClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPINodeV1RuntimeClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPINodeV1RuntimeClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPINodeV1RuntimeClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateNodeV1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/node.k8s.io/v1/runtimeclasses: unexpected response type for method: %T", response)
	}
}

func encodeDeleteNodeV1CollectionRuntimeClassResponse(response DeleteNodeV1CollectionRuntimeClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *DeleteNodeV1CollectionRuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/node.k8s.io/v1/runtimeclasses: unexpected response type for method: %T", response)
	}
}

func encodeWatchNodeV1RuntimeClassListResponse(response WatchNodeV1RuntimeClassListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *WatchNodeV1RuntimeClassListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/node.k8s.io/v1/watch/runtimeclasses: unexpected response type for method: %T", response)
	}
}

func encodeGetNodeV1alpha1APIResourcesResponse(response GetNodeV1alpha1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GetNodeV1alpha1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/node.k8s.io/v1alpha1: unexpected response type for method: %T", response)
	}
}

func encodeListNodeV1alpha1RuntimeClassResponse(response ListNodeV1alpha1RuntimeClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPINodeV1alpha1RuntimeClassList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPINodeV1alpha1RuntimeClassList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPINodeV1alpha1RuntimeClassList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPINodeV1alpha1RuntimeClassList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPINodeV1alpha1RuntimeClassList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *ListNodeV1alpha1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/node.k8s.io/v1alpha1/runtimeclasses: unexpected response type for method: %T", response)
	}
}

func encodeCreateNodeV1alpha1RuntimeClassResponse(response CreateNodeV1alpha1RuntimeClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPINodeV1alpha1RuntimeClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPINodeV1alpha1RuntimeClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPINodeV1alpha1RuntimeClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPINodeV1alpha1RuntimeClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPINodeV1alpha1RuntimeClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPINodeV1alpha1RuntimeClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPINodeV1alpha1RuntimeClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPINodeV1alpha1RuntimeClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPINodeV1alpha1RuntimeClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *CreateNodeV1alpha1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/node.k8s.io/v1alpha1/runtimeclasses: unexpected response type for method: %T", response)
	}
}

func encodeDeleteNodeV1alpha1CollectionRuntimeClassResponse(response DeleteNodeV1alpha1CollectionRuntimeClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *DeleteNodeV1alpha1CollectionRuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/node.k8s.io/v1alpha1/runtimeclasses: unexpected response type for method: %T", response)
	}
}

func encodeWatchNodeV1alpha1RuntimeClassListResponse(response WatchNodeV1alpha1RuntimeClassListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchNodeV1alpha1RuntimeClassListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/node.k8s.io/v1alpha1/watch/runtimeclasses: unexpected response type for method: %T", response)
	}
}

func encodeGetNodeV1beta1APIResourcesResponse(response GetNodeV1beta1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *GetNodeV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/node.k8s.io/v1beta1: unexpected response type for method: %T", response)
	}
}

func encodeListNodeV1beta1RuntimeClassResponse(response ListNodeV1beta1RuntimeClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPINodeV1beta1RuntimeClassList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPINodeV1beta1RuntimeClassList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPINodeV1beta1RuntimeClassList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPINodeV1beta1RuntimeClassList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPINodeV1beta1RuntimeClassList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListNodeV1beta1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/node.k8s.io/v1beta1/runtimeclasses: unexpected response type for method: %T", response)
	}
}

func encodeCreateNodeV1beta1RuntimeClassResponse(response CreateNodeV1beta1RuntimeClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPINodeV1beta1RuntimeClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPINodeV1beta1RuntimeClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPINodeV1beta1RuntimeClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPINodeV1beta1RuntimeClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPINodeV1beta1RuntimeClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPINodeV1beta1RuntimeClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPINodeV1beta1RuntimeClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPINodeV1beta1RuntimeClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPINodeV1beta1RuntimeClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateNodeV1beta1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/node.k8s.io/v1beta1/runtimeclasses: unexpected response type for method: %T", response)
	}
}

func encodeDeleteNodeV1beta1CollectionRuntimeClassResponse(response DeleteNodeV1beta1CollectionRuntimeClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *DeleteNodeV1beta1CollectionRuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/node.k8s.io/v1beta1/runtimeclasses: unexpected response type for method: %T", response)
	}
}

func encodeWatchNodeV1beta1RuntimeClassListResponse(response WatchNodeV1beta1RuntimeClassListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *WatchNodeV1beta1RuntimeClassListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/node.k8s.io/v1beta1/watch/runtimeclasses: unexpected response type for method: %T", response)
	}
}

func encodeGetPolicyAPIGroupResponse(response GetPolicyAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetPolicyAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/policy: unexpected response type for method: %T", response)
	}
}

func encodeGetPolicyV1APIResourcesResponse(response GetPolicyV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GetPolicyV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/policy/v1: unexpected response type for method: %T", response)
	}
}

func encodeListPolicyV1PodDisruptionBudgetForAllNamespacesResponse(response ListPolicyV1PodDisruptionBudgetForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIPolicyV1PodDisruptionBudgetList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIPolicyV1PodDisruptionBudgetList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIPolicyV1PodDisruptionBudgetList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIPolicyV1PodDisruptionBudgetList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIPolicyV1PodDisruptionBudgetList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ListPolicyV1PodDisruptionBudgetForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/policy/v1/poddisruptionbudgets: unexpected response type for method: %T", response)
	}
}

func encodeWatchPolicyV1PodDisruptionBudgetListForAllNamespacesResponse(response WatchPolicyV1PodDisruptionBudgetListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchPolicyV1PodDisruptionBudgetListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/policy/v1/watch/poddisruptionbudgets: unexpected response type for method: %T", response)
	}
}

func encodeGetPolicyV1beta1APIResourcesResponse(response GetPolicyV1beta1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetPolicyV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/policy/v1beta1: unexpected response type for method: %T", response)
	}
}

func encodeListPolicyV1beta1PodDisruptionBudgetForAllNamespacesResponse(response ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/policy/v1beta1/poddisruptionbudgets: unexpected response type for method: %T", response)
	}
}

func encodeListPolicyV1beta1PodSecurityPolicyResponse(response ListPolicyV1beta1PodSecurityPolicyResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIPolicyV1beta1PodSecurityPolicyList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIPolicyV1beta1PodSecurityPolicyList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIPolicyV1beta1PodSecurityPolicyList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIPolicyV1beta1PodSecurityPolicyList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIPolicyV1beta1PodSecurityPolicyList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *ListPolicyV1beta1PodSecurityPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/policy/v1beta1/podsecuritypolicies: unexpected response type for method: %T", response)
	}
}

func encodeCreatePolicyV1beta1PodSecurityPolicyResponse(response CreatePolicyV1beta1PodSecurityPolicyResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIPolicyV1beta1PodSecurityPolicy:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIPolicyV1beta1PodSecurityPolicy:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIPolicyV1beta1PodSecurityPolicy:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIPolicyV1beta1PodSecurityPolicy:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIPolicyV1beta1PodSecurityPolicy:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIPolicyV1beta1PodSecurityPolicy:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIPolicyV1beta1PodSecurityPolicy:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIPolicyV1beta1PodSecurityPolicy:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIPolicyV1beta1PodSecurityPolicy:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreatePolicyV1beta1PodSecurityPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/policy/v1beta1/podsecuritypolicies: unexpected response type for method: %T", response)
	}
}

func encodeDeletePolicyV1beta1CollectionPodSecurityPolicyResponse(response DeletePolicyV1beta1CollectionPodSecurityPolicyResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *DeletePolicyV1beta1CollectionPodSecurityPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/policy/v1beta1/podsecuritypolicies: unexpected response type for method: %T", response)
	}
}

func encodeWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesResponse(response WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/policy/v1beta1/watch/poddisruptionbudgets: unexpected response type for method: %T", response)
	}
}

func encodeWatchPolicyV1beta1PodSecurityPolicyListResponse(response WatchPolicyV1beta1PodSecurityPolicyListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *WatchPolicyV1beta1PodSecurityPolicyListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/policy/v1beta1/watch/podsecuritypolicies: unexpected response type for method: %T", response)
	}
}

func encodeGetRbacAuthorizationAPIGroupResponse(response GetRbacAuthorizationAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *GetRbacAuthorizationAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/rbac.authorization.k8s.io: unexpected response type for method: %T", response)
	}
}

func encodeGetRbacAuthorizationV1APIResourcesResponse(response GetRbacAuthorizationV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetRbacAuthorizationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/rbac.authorization.k8s.io/v1: unexpected response type for method: %T", response)
	}
}

func encodeListRbacAuthorizationV1ClusterRoleBindingResponse(response ListRbacAuthorizationV1ClusterRoleBindingResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIRbacV1ClusterRoleBindingList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIRbacV1ClusterRoleBindingList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIRbacV1ClusterRoleBindingList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIRbacV1ClusterRoleBindingList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIRbacV1ClusterRoleBindingList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *ListRbacAuthorizationV1ClusterRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/rbac.authorization.k8s.io/v1/clusterrolebindings: unexpected response type for method: %T", response)
	}
}

func encodeCreateRbacAuthorizationV1ClusterRoleBindingResponse(response CreateRbacAuthorizationV1ClusterRoleBindingResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIRbacV1ClusterRoleBinding:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIRbacV1ClusterRoleBinding:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIRbacV1ClusterRoleBinding:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIRbacV1ClusterRoleBinding:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIRbacV1ClusterRoleBinding:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIRbacV1ClusterRoleBinding:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIRbacV1ClusterRoleBinding:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIRbacV1ClusterRoleBinding:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIRbacV1ClusterRoleBinding:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateRbacAuthorizationV1ClusterRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/rbac.authorization.k8s.io/v1/clusterrolebindings: unexpected response type for method: %T", response)
	}
}

func encodeDeleteRbacAuthorizationV1CollectionClusterRoleBindingResponse(response DeleteRbacAuthorizationV1CollectionClusterRoleBindingResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *DeleteRbacAuthorizationV1CollectionClusterRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/rbac.authorization.k8s.io/v1/clusterrolebindings: unexpected response type for method: %T", response)
	}
}

func encodeListRbacAuthorizationV1ClusterRoleResponse(response ListRbacAuthorizationV1ClusterRoleResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIRbacV1ClusterRoleList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIRbacV1ClusterRoleList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIRbacV1ClusterRoleList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIRbacV1ClusterRoleList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIRbacV1ClusterRoleList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListRbacAuthorizationV1ClusterRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/rbac.authorization.k8s.io/v1/clusterroles: unexpected response type for method: %T", response)
	}
}

func encodeCreateRbacAuthorizationV1ClusterRoleResponse(response CreateRbacAuthorizationV1ClusterRoleResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIRbacV1ClusterRole:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIRbacV1ClusterRole:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIRbacV1ClusterRole:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIRbacV1ClusterRole:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIRbacV1ClusterRole:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIRbacV1ClusterRole:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIRbacV1ClusterRole:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIRbacV1ClusterRole:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIRbacV1ClusterRole:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CreateRbacAuthorizationV1ClusterRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/rbac.authorization.k8s.io/v1/clusterroles: unexpected response type for method: %T", response)
	}
}

func encodeDeleteRbacAuthorizationV1CollectionClusterRoleResponse(response DeleteRbacAuthorizationV1CollectionClusterRoleResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *DeleteRbacAuthorizationV1CollectionClusterRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/rbac.authorization.k8s.io/v1/clusterroles: unexpected response type for method: %T", response)
	}
}

func encodeListRbacAuthorizationV1RoleBindingForAllNamespacesResponse(response ListRbacAuthorizationV1RoleBindingForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIRbacV1RoleBindingList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIRbacV1RoleBindingList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIRbacV1RoleBindingList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIRbacV1RoleBindingList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIRbacV1RoleBindingList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListRbacAuthorizationV1RoleBindingForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/rbac.authorization.k8s.io/v1/rolebindings: unexpected response type for method: %T", response)
	}
}

func encodeListRbacAuthorizationV1RoleForAllNamespacesResponse(response ListRbacAuthorizationV1RoleForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIRbacV1RoleList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIRbacV1RoleList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIRbacV1RoleList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIRbacV1RoleList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIRbacV1RoleList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ListRbacAuthorizationV1RoleForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/rbac.authorization.k8s.io/v1/roles: unexpected response type for method: %T", response)
	}
}

func encodeWatchRbacAuthorizationV1ClusterRoleBindingListResponse(response WatchRbacAuthorizationV1ClusterRoleBindingListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *WatchRbacAuthorizationV1ClusterRoleBindingListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings: unexpected response type for method: %T", response)
	}
}

func encodeWatchRbacAuthorizationV1ClusterRoleListResponse(response WatchRbacAuthorizationV1ClusterRoleListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *WatchRbacAuthorizationV1ClusterRoleListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/rbac.authorization.k8s.io/v1/watch/clusterroles: unexpected response type for method: %T", response)
	}
}

func encodeWatchRbacAuthorizationV1RoleBindingListForAllNamespacesResponse(response WatchRbacAuthorizationV1RoleBindingListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *WatchRbacAuthorizationV1RoleBindingListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/rbac.authorization.k8s.io/v1/watch/rolebindings: unexpected response type for method: %T", response)
	}
}

func encodeWatchRbacAuthorizationV1RoleListForAllNamespacesResponse(response WatchRbacAuthorizationV1RoleListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *WatchRbacAuthorizationV1RoleListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/rbac.authorization.k8s.io/v1/watch/roles: unexpected response type for method: %T", response)
	}
}

func encodeGetSchedulingAPIGroupResponse(response GetSchedulingAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetSchedulingAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/scheduling.k8s.io: unexpected response type for method: %T", response)
	}
}

func encodeGetSchedulingV1APIResourcesResponse(response GetSchedulingV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetSchedulingV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/scheduling.k8s.io/v1: unexpected response type for method: %T", response)
	}
}

func encodeListSchedulingV1PriorityClassResponse(response ListSchedulingV1PriorityClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPISchedulingV1PriorityClassList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPISchedulingV1PriorityClassList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPISchedulingV1PriorityClassList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPISchedulingV1PriorityClassList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPISchedulingV1PriorityClassList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *ListSchedulingV1PriorityClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/scheduling.k8s.io/v1/priorityclasses: unexpected response type for method: %T", response)
	}
}

func encodeCreateSchedulingV1PriorityClassResponse(response CreateSchedulingV1PriorityClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPISchedulingV1PriorityClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPISchedulingV1PriorityClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPISchedulingV1PriorityClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPISchedulingV1PriorityClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPISchedulingV1PriorityClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPISchedulingV1PriorityClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPISchedulingV1PriorityClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPISchedulingV1PriorityClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPISchedulingV1PriorityClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateSchedulingV1PriorityClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/scheduling.k8s.io/v1/priorityclasses: unexpected response type for method: %T", response)
	}
}

func encodeDeleteSchedulingV1CollectionPriorityClassResponse(response DeleteSchedulingV1CollectionPriorityClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *DeleteSchedulingV1CollectionPriorityClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/scheduling.k8s.io/v1/priorityclasses: unexpected response type for method: %T", response)
	}
}

func encodeWatchSchedulingV1PriorityClassListResponse(response WatchSchedulingV1PriorityClassListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *WatchSchedulingV1PriorityClassListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/scheduling.k8s.io/v1/watch/priorityclasses: unexpected response type for method: %T", response)
	}
}

func encodeGetStorageAPIGroupResponse(response GetStorageAPIGroupResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GetStorageAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io: unexpected response type for method: %T", response)
	}
}

func encodeGetStorageV1APIResourcesResponse(response GetStorageV1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetStorageV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1: unexpected response type for method: %T", response)
	}
}

func encodeListStorageV1CSIDriverResponse(response ListStorageV1CSIDriverResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1CSIDriverList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIStorageV1CSIDriverList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIStorageV1CSIDriverList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIStorageV1CSIDriverList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIStorageV1CSIDriverList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *ListStorageV1CSIDriverUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1/csidrivers: unexpected response type for method: %T", response)
	}
}

func encodeCreateStorageV1CSIDriverResponse(response CreateStorageV1CSIDriverResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1CSIDriver:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIStorageV1CSIDriver:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIStorageV1CSIDriver:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIStorageV1CSIDriver:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIStorageV1CSIDriver:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIStorageV1CSIDriver:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIStorageV1CSIDriver:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIStorageV1CSIDriver:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIStorageV1CSIDriver:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *CreateStorageV1CSIDriverUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1/csidrivers: unexpected response type for method: %T", response)
	}
}

func encodeDeleteStorageV1CollectionCSIDriverResponse(response DeleteStorageV1CollectionCSIDriverResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *DeleteStorageV1CollectionCSIDriverUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1/csidrivers: unexpected response type for method: %T", response)
	}
}

func encodeListStorageV1CSINodeResponse(response ListStorageV1CSINodeResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1CSINodeList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIStorageV1CSINodeList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIStorageV1CSINodeList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIStorageV1CSINodeList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIStorageV1CSINodeList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListStorageV1CSINodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1/csinodes: unexpected response type for method: %T", response)
	}
}

func encodeCreateStorageV1CSINodeResponse(response CreateStorageV1CSINodeResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1CSINode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIStorageV1CSINode:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIStorageV1CSINode:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIStorageV1CSINode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIStorageV1CSINode:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIStorageV1CSINode:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIStorageV1CSINode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIStorageV1CSINode:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIStorageV1CSINode:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateStorageV1CSINodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1/csinodes: unexpected response type for method: %T", response)
	}
}

func encodeDeleteStorageV1CollectionCSINodeResponse(response DeleteStorageV1CollectionCSINodeResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *DeleteStorageV1CollectionCSINodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1/csinodes: unexpected response type for method: %T", response)
	}
}

func encodeListStorageV1StorageClassResponse(response ListStorageV1StorageClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1StorageClassList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIStorageV1StorageClassList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIStorageV1StorageClassList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIStorageV1StorageClassList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIStorageV1StorageClassList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *ListStorageV1StorageClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1/storageclasses: unexpected response type for method: %T", response)
	}
}

func encodeCreateStorageV1StorageClassResponse(response CreateStorageV1StorageClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1StorageClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIStorageV1StorageClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIStorageV1StorageClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIStorageV1StorageClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIStorageV1StorageClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIStorageV1StorageClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIStorageV1StorageClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIStorageV1StorageClass:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIStorageV1StorageClass:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *CreateStorageV1StorageClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1/storageclasses: unexpected response type for method: %T", response)
	}
}

func encodeDeleteStorageV1CollectionStorageClassResponse(response DeleteStorageV1CollectionStorageClassResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *DeleteStorageV1CollectionStorageClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1/storageclasses: unexpected response type for method: %T", response)
	}
}

func encodeListStorageV1VolumeAttachmentResponse(response ListStorageV1VolumeAttachmentResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1VolumeAttachmentList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIStorageV1VolumeAttachmentList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIStorageV1VolumeAttachmentList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIStorageV1VolumeAttachmentList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIStorageV1VolumeAttachmentList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *ListStorageV1VolumeAttachmentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1/volumeattachments: unexpected response type for method: %T", response)
	}
}

func encodeCreateStorageV1VolumeAttachmentResponse(response CreateStorageV1VolumeAttachmentResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1VolumeAttachment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIStorageV1VolumeAttachment:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIStorageV1VolumeAttachment:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIStorageV1VolumeAttachment:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIStorageV1VolumeAttachment:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIStorageV1VolumeAttachment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIStorageV1VolumeAttachment:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIStorageV1VolumeAttachment:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIStorageV1VolumeAttachment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CreateStorageV1VolumeAttachmentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1/volumeattachments: unexpected response type for method: %T", response)
	}
}

func encodeDeleteStorageV1CollectionVolumeAttachmentResponse(response DeleteStorageV1CollectionVolumeAttachmentResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1Status:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *DeleteStorageV1CollectionVolumeAttachmentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1/volumeattachments: unexpected response type for method: %T", response)
	}
}

func encodeWatchStorageV1CSIDriverListResponse(response WatchStorageV1CSIDriverListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *WatchStorageV1CSIDriverListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1/watch/csidrivers: unexpected response type for method: %T", response)
	}
}

func encodeWatchStorageV1CSINodeListResponse(response WatchStorageV1CSINodeListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *WatchStorageV1CSINodeListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1/watch/csinodes: unexpected response type for method: %T", response)
	}
}

func encodeWatchStorageV1StorageClassListResponse(response WatchStorageV1StorageClassListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *WatchStorageV1StorageClassListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1/watch/storageclasses: unexpected response type for method: %T", response)
	}
}

func encodeWatchStorageV1VolumeAttachmentListResponse(response WatchStorageV1VolumeAttachmentListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *WatchStorageV1VolumeAttachmentListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1/watch/volumeattachments: unexpected response type for method: %T", response)
	}
}

func encodeGetStorageV1alpha1APIResourcesResponse(response GetStorageV1alpha1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GetStorageV1alpha1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1alpha1: unexpected response type for method: %T", response)
	}
}

func encodeListStorageV1alpha1CSIStorageCapacityForAllNamespacesResponse(response ListStorageV1alpha1CSIStorageCapacityForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1alpha1CSIStorageCapacityList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIStorageV1alpha1CSIStorageCapacityList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIStorageV1alpha1CSIStorageCapacityList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sAPIStorageV1alpha1CSIStorageCapacityList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIStorageV1alpha1CSIStorageCapacityList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *ListStorageV1alpha1CSIStorageCapacityForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1alpha1/csistoragecapacities: unexpected response type for method: %T", response)
	}
}

func encodeWatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesResponse(response WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1alpha1/watch/csistoragecapacities: unexpected response type for method: %T", response)
	}
}

func encodeGetStorageV1beta1APIResourcesResponse(response GetStorageV1beta1APIResourcesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *GetStorageV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1beta1: unexpected response type for method: %T", response)
	}
}

func encodeListStorageV1beta1CSIStorageCapacityForAllNamespacesResponse(response ListStorageV1beta1CSIStorageCapacityForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1beta1CSIStorageCapacityList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IoK8sAPIStorageV1beta1CSIStorageCapacityList:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sAPIStorageV1beta1CSIStorageCapacityList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sAPIStorageV1beta1CSIStorageCapacityList:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sAPIStorageV1beta1CSIStorageCapacityList:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *ListStorageV1beta1CSIStorageCapacityForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1beta1/csistoragecapacities: unexpected response type for method: %T", response)
	}
}

func encodeWatchStorageV1beta1CSIStorageCapacityListForAllNamespacesResponse(response WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return fmt.Errorf("application/yaml encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/json;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch encoder not implemented")
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/apis/storage.k8s.io/v1beta1/watch/csistoragecapacities: unexpected response type for method: %T", response)
	}
}

func encodeLogFileListHandlerResponse(response LogFileListHandler, w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

func encodeGetServiceAccountIssuerOpenIDKeysetResponse(response GetServiceAccountIssuerOpenIDKeysetResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GetServiceAccountIssuerOpenIDKeysetOK:
		w.Header().Set("Content-Type", "application/jwk-set+json")
		w.WriteHeader(200)
		return fmt.Errorf("application/jwk-set+json encoder not implemented")
	case *GetServiceAccountIssuerOpenIDKeysetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/openid/v1/jwks: unexpected response type for method: %T", response)
	}
}

func encodeGetCodeVersionResponse(response GetCodeVersionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgVersionInfo:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GetCodeVersionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return fmt.Errorf("/version: unexpected response type for method: %T", response)
	}
}
