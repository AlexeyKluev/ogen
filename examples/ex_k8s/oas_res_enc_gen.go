// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/errors"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
)

func encodeConnectCoreV1DeleteNamespacedPodProxyResponse(response ConnectCoreV1DeleteNamespacedPodProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1DeleteNamespacedPodProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1DeleteNamespacedPodProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1DeleteNamespacedPodProxyWithPathResponse(response ConnectCoreV1DeleteNamespacedPodProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1DeleteNamespacedPodProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1DeleteNamespacedPodProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1DeleteNamespacedServiceProxyResponse(response ConnectCoreV1DeleteNamespacedServiceProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1DeleteNamespacedServiceProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1DeleteNamespacedServiceProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1DeleteNamespacedServiceProxyWithPathResponse(response ConnectCoreV1DeleteNamespacedServiceProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1DeleteNamespacedServiceProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1DeleteNamespacedServiceProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1DeleteNodeProxyResponse(response ConnectCoreV1DeleteNodeProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1DeleteNodeProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1DeleteNodeProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1DeleteNodeProxyWithPathResponse(response ConnectCoreV1DeleteNodeProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1DeleteNodeProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1DeleteNodeProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1GetNamespacedPodAttachResponse(response ConnectCoreV1GetNamespacedPodAttachRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1GetNamespacedPodAttachOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1GetNamespacedPodAttachUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/attach: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1GetNamespacedPodExecResponse(response ConnectCoreV1GetNamespacedPodExecRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1GetNamespacedPodExecOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1GetNamespacedPodExecUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/exec: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1GetNamespacedPodPortforwardResponse(response ConnectCoreV1GetNamespacedPodPortforwardRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1GetNamespacedPodPortforwardOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1GetNamespacedPodPortforwardUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/portforward: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1GetNamespacedPodProxyResponse(response ConnectCoreV1GetNamespacedPodProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1GetNamespacedPodProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1GetNamespacedPodProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1GetNamespacedPodProxyWithPathResponse(response ConnectCoreV1GetNamespacedPodProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1GetNamespacedPodProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1GetNamespacedPodProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1GetNamespacedServiceProxyResponse(response ConnectCoreV1GetNamespacedServiceProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1GetNamespacedServiceProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1GetNamespacedServiceProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1GetNamespacedServiceProxyWithPathResponse(response ConnectCoreV1GetNamespacedServiceProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1GetNamespacedServiceProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1GetNamespacedServiceProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1GetNodeProxyResponse(response ConnectCoreV1GetNodeProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1GetNodeProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1GetNodeProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1GetNodeProxyWithPathResponse(response ConnectCoreV1GetNodeProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1GetNodeProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1GetNodeProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1HeadNamespacedPodProxyResponse(response ConnectCoreV1HeadNamespacedPodProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1HeadNamespacedPodProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1HeadNamespacedPodProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1HeadNamespacedPodProxyWithPathResponse(response ConnectCoreV1HeadNamespacedPodProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1HeadNamespacedPodProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1HeadNamespacedPodProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1HeadNamespacedServiceProxyResponse(response ConnectCoreV1HeadNamespacedServiceProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1HeadNamespacedServiceProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1HeadNamespacedServiceProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1HeadNamespacedServiceProxyWithPathResponse(response ConnectCoreV1HeadNamespacedServiceProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1HeadNamespacedServiceProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1HeadNamespacedServiceProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1HeadNodeProxyResponse(response ConnectCoreV1HeadNodeProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1HeadNodeProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1HeadNodeProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1HeadNodeProxyWithPathResponse(response ConnectCoreV1HeadNodeProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1HeadNodeProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1HeadNodeProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1OptionsNamespacedPodProxyResponse(response ConnectCoreV1OptionsNamespacedPodProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1OptionsNamespacedPodProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1OptionsNamespacedPodProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1OptionsNamespacedPodProxyWithPathResponse(response ConnectCoreV1OptionsNamespacedPodProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1OptionsNamespacedPodProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1OptionsNamespacedPodProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1OptionsNamespacedServiceProxyResponse(response ConnectCoreV1OptionsNamespacedServiceProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1OptionsNamespacedServiceProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1OptionsNamespacedServiceProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1OptionsNamespacedServiceProxyWithPathResponse(response ConnectCoreV1OptionsNamespacedServiceProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1OptionsNamespacedServiceProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1OptionsNamespacedServiceProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1OptionsNodeProxyResponse(response ConnectCoreV1OptionsNodeProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1OptionsNodeProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1OptionsNodeProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1OptionsNodeProxyWithPathResponse(response ConnectCoreV1OptionsNodeProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1OptionsNodeProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1OptionsNodeProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PatchNamespacedPodProxyResponse(response ConnectCoreV1PatchNamespacedPodProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PatchNamespacedPodProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PatchNamespacedPodProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PatchNamespacedPodProxyWithPathResponse(response ConnectCoreV1PatchNamespacedPodProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PatchNamespacedPodProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PatchNamespacedPodProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PatchNamespacedServiceProxyResponse(response ConnectCoreV1PatchNamespacedServiceProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PatchNamespacedServiceProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PatchNamespacedServiceProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PatchNamespacedServiceProxyWithPathResponse(response ConnectCoreV1PatchNamespacedServiceProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PatchNamespacedServiceProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PatchNamespacedServiceProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PatchNodeProxyResponse(response ConnectCoreV1PatchNodeProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PatchNodeProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PatchNodeProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PatchNodeProxyWithPathResponse(response ConnectCoreV1PatchNodeProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PatchNodeProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PatchNodeProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PostNamespacedPodAttachResponse(response ConnectCoreV1PostNamespacedPodAttachRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PostNamespacedPodAttachOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PostNamespacedPodAttachUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/attach: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PostNamespacedPodExecResponse(response ConnectCoreV1PostNamespacedPodExecRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PostNamespacedPodExecOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PostNamespacedPodExecUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/exec: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PostNamespacedPodPortforwardResponse(response ConnectCoreV1PostNamespacedPodPortforwardRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PostNamespacedPodPortforwardOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PostNamespacedPodPortforwardUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/portforward: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PostNamespacedPodProxyResponse(response ConnectCoreV1PostNamespacedPodProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PostNamespacedPodProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PostNamespacedPodProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PostNamespacedPodProxyWithPathResponse(response ConnectCoreV1PostNamespacedPodProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PostNamespacedPodProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PostNamespacedPodProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PostNamespacedServiceProxyResponse(response ConnectCoreV1PostNamespacedServiceProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PostNamespacedServiceProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PostNamespacedServiceProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PostNamespacedServiceProxyWithPathResponse(response ConnectCoreV1PostNamespacedServiceProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PostNamespacedServiceProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PostNamespacedServiceProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PostNodeProxyResponse(response ConnectCoreV1PostNodeProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PostNodeProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PostNodeProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PostNodeProxyWithPathResponse(response ConnectCoreV1PostNodeProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PostNodeProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PostNodeProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PutNamespacedPodProxyResponse(response ConnectCoreV1PutNamespacedPodProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PutNamespacedPodProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PutNamespacedPodProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PutNamespacedPodProxyWithPathResponse(response ConnectCoreV1PutNamespacedPodProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PutNamespacedPodProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PutNamespacedPodProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PutNamespacedServiceProxyResponse(response ConnectCoreV1PutNamespacedServiceProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PutNamespacedServiceProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PutNamespacedServiceProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PutNamespacedServiceProxyWithPathResponse(response ConnectCoreV1PutNamespacedServiceProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PutNamespacedServiceProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PutNamespacedServiceProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PutNodeProxyResponse(response ConnectCoreV1PutNodeProxyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PutNodeProxyOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PutNodeProxyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}/proxy: unexpected response type: %T`, response)
	}
}

func encodeConnectCoreV1PutNodeProxyWithPathResponse(response ConnectCoreV1PutNodeProxyWithPathRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ConnectCoreV1PutNodeProxyWithPathOK:
		w.Header().Set("Content-Type", "*/*")
		w.WriteHeader(200)
		return errors.New(`*/* encoder not implemented`)
	case *ConnectCoreV1PutNodeProxyWithPathUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}/proxy/{path}: unexpected response type: %T`, response)
	}
}

func encodeCreateAdmissionregistrationV1MutatingWebhookConfigurationResponse(response CreateAdmissionregistrationV1MutatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations: unexpected response type: %T`, response)
	}
}

func encodeCreateAdmissionregistrationV1ValidatingWebhookConfigurationResponse(response CreateAdmissionregistrationV1ValidatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations: unexpected response type: %T`, response)
	}
}

func encodeCreateApiextensionsV1CustomResourceDefinitionResponse(response CreateApiextensionsV1CustomResourceDefinitionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateApiextensionsV1CustomResourceDefinitionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateApiextensionsV1CustomResourceDefinitionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateApiextensionsV1CustomResourceDefinitionApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateApiextensionsV1CustomResourceDefinitionApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateApiextensionsV1CustomResourceDefinitionApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateApiextensionsV1CustomResourceDefinitionApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateApiextensionsV1CustomResourceDefinitionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiextensions.k8s.io/v1/customresourcedefinitions: unexpected response type: %T`, response)
	}
}

func encodeCreateApiregistrationV1APIServiceResponse(response CreateApiregistrationV1APIServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateApiregistrationV1APIServiceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateApiregistrationV1APIServiceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateApiregistrationV1APIServiceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateApiregistrationV1APIServiceApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateApiregistrationV1APIServiceApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateApiregistrationV1APIServiceApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateApiregistrationV1APIServiceApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateApiregistrationV1APIServiceApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateApiregistrationV1APIServiceApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateApiregistrationV1APIServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiregistration.k8s.io/v1/apiservices: unexpected response type: %T`, response)
	}
}

func encodeCreateAppsV1NamespacedControllerRevisionResponse(response CreateAppsV1NamespacedControllerRevisionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateAppsV1NamespacedControllerRevisionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAppsV1NamespacedControllerRevisionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAppsV1NamespacedControllerRevisionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAppsV1NamespacedControllerRevisionApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAppsV1NamespacedControllerRevisionApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAppsV1NamespacedControllerRevisionApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAppsV1NamespacedControllerRevisionApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAppsV1NamespacedControllerRevisionApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAppsV1NamespacedControllerRevisionApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAppsV1NamespacedControllerRevisionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/controllerrevisions: unexpected response type: %T`, response)
	}
}

func encodeCreateAppsV1NamespacedDaemonSetResponse(response CreateAppsV1NamespacedDaemonSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateAppsV1NamespacedDaemonSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAppsV1NamespacedDaemonSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAppsV1NamespacedDaemonSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAppsV1NamespacedDaemonSetApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAppsV1NamespacedDaemonSetApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAppsV1NamespacedDaemonSetApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAppsV1NamespacedDaemonSetApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAppsV1NamespacedDaemonSetApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAppsV1NamespacedDaemonSetApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAppsV1NamespacedDaemonSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/daemonsets: unexpected response type: %T`, response)
	}
}

func encodeCreateAppsV1NamespacedDeploymentResponse(response CreateAppsV1NamespacedDeploymentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateAppsV1NamespacedDeploymentApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAppsV1NamespacedDeploymentApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAppsV1NamespacedDeploymentApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAppsV1NamespacedDeploymentApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAppsV1NamespacedDeploymentApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAppsV1NamespacedDeploymentApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAppsV1NamespacedDeploymentApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAppsV1NamespacedDeploymentApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAppsV1NamespacedDeploymentApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAppsV1NamespacedDeploymentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/deployments: unexpected response type: %T`, response)
	}
}

func encodeCreateAppsV1NamespacedReplicaSetResponse(response CreateAppsV1NamespacedReplicaSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateAppsV1NamespacedReplicaSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAppsV1NamespacedReplicaSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAppsV1NamespacedReplicaSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAppsV1NamespacedReplicaSetApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAppsV1NamespacedReplicaSetApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAppsV1NamespacedReplicaSetApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAppsV1NamespacedReplicaSetApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAppsV1NamespacedReplicaSetApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAppsV1NamespacedReplicaSetApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAppsV1NamespacedReplicaSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/replicasets: unexpected response type: %T`, response)
	}
}

func encodeCreateAppsV1NamespacedStatefulSetResponse(response CreateAppsV1NamespacedStatefulSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateAppsV1NamespacedStatefulSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAppsV1NamespacedStatefulSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAppsV1NamespacedStatefulSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAppsV1NamespacedStatefulSetApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAppsV1NamespacedStatefulSetApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAppsV1NamespacedStatefulSetApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAppsV1NamespacedStatefulSetApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAppsV1NamespacedStatefulSetApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAppsV1NamespacedStatefulSetApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAppsV1NamespacedStatefulSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/statefulsets: unexpected response type: %T`, response)
	}
}

func encodeCreateAuthenticationV1TokenReviewResponse(response CreateAuthenticationV1TokenReviewRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateAuthenticationV1TokenReviewApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAuthenticationV1TokenReviewApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAuthenticationV1TokenReviewApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAuthenticationV1TokenReviewApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAuthenticationV1TokenReviewApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAuthenticationV1TokenReviewApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAuthenticationV1TokenReviewApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAuthenticationV1TokenReviewApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAuthenticationV1TokenReviewApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAuthenticationV1TokenReviewUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/authentication.k8s.io/v1/tokenreviews: unexpected response type: %T`, response)
	}
}

func encodeCreateAuthorizationV1NamespacedLocalSubjectAccessReviewResponse(response CreateAuthorizationV1NamespacedLocalSubjectAccessReviewRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateAuthorizationV1NamespacedLocalSubjectAccessReviewApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAuthorizationV1NamespacedLocalSubjectAccessReviewApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAuthorizationV1NamespacedLocalSubjectAccessReviewApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAuthorizationV1NamespacedLocalSubjectAccessReviewApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAuthorizationV1NamespacedLocalSubjectAccessReviewApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAuthorizationV1NamespacedLocalSubjectAccessReviewApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAuthorizationV1NamespacedLocalSubjectAccessReviewApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAuthorizationV1NamespacedLocalSubjectAccessReviewApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAuthorizationV1NamespacedLocalSubjectAccessReviewApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAuthorizationV1NamespacedLocalSubjectAccessReviewUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews: unexpected response type: %T`, response)
	}
}

func encodeCreateAuthorizationV1SelfSubjectAccessReviewResponse(response CreateAuthorizationV1SelfSubjectAccessReviewRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAuthorizationV1SelfSubjectAccessReviewApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAuthorizationV1SelfSubjectAccessReviewApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAuthorizationV1SelfSubjectAccessReviewApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAuthorizationV1SelfSubjectAccessReviewApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAuthorizationV1SelfSubjectAccessReviewApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAuthorizationV1SelfSubjectAccessReviewApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAuthorizationV1SelfSubjectAccessReviewUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/authorization.k8s.io/v1/selfsubjectaccessreviews: unexpected response type: %T`, response)
	}
}

func encodeCreateAuthorizationV1SelfSubjectRulesReviewResponse(response CreateAuthorizationV1SelfSubjectRulesReviewRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAuthorizationV1SelfSubjectRulesReviewApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAuthorizationV1SelfSubjectRulesReviewApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAuthorizationV1SelfSubjectRulesReviewApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAuthorizationV1SelfSubjectRulesReviewApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAuthorizationV1SelfSubjectRulesReviewApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAuthorizationV1SelfSubjectRulesReviewApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAuthorizationV1SelfSubjectRulesReviewUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/authorization.k8s.io/v1/selfsubjectrulesreviews: unexpected response type: %T`, response)
	}
}

func encodeCreateAuthorizationV1SubjectAccessReviewResponse(response CreateAuthorizationV1SubjectAccessReviewRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateAuthorizationV1SubjectAccessReviewApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAuthorizationV1SubjectAccessReviewApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAuthorizationV1SubjectAccessReviewApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAuthorizationV1SubjectAccessReviewApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAuthorizationV1SubjectAccessReviewApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAuthorizationV1SubjectAccessReviewApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAuthorizationV1SubjectAccessReviewApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAuthorizationV1SubjectAccessReviewApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAuthorizationV1SubjectAccessReviewApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAuthorizationV1SubjectAccessReviewUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/authorization.k8s.io/v1/subjectaccessreviews: unexpected response type: %T`, response)
	}
}

func encodeCreateAutoscalingV1NamespacedHorizontalPodAutoscalerResponse(response CreateAutoscalingV1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeCreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse(response CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeCreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerResponse(response CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeCreateBatchV1NamespacedCronJobResponse(response CreateBatchV1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateBatchV1NamespacedCronJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateBatchV1NamespacedCronJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateBatchV1NamespacedCronJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateBatchV1NamespacedCronJobApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateBatchV1NamespacedCronJobApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateBatchV1NamespacedCronJobApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateBatchV1NamespacedCronJobApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateBatchV1NamespacedCronJobApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateBatchV1NamespacedCronJobApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateBatchV1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/cronjobs: unexpected response type: %T`, response)
	}
}

func encodeCreateBatchV1NamespacedJobResponse(response CreateBatchV1NamespacedJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateBatchV1NamespacedJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateBatchV1NamespacedJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateBatchV1NamespacedJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateBatchV1NamespacedJobApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateBatchV1NamespacedJobApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateBatchV1NamespacedJobApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateBatchV1NamespacedJobApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateBatchV1NamespacedJobApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateBatchV1NamespacedJobApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateBatchV1NamespacedJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/jobs: unexpected response type: %T`, response)
	}
}

func encodeCreateBatchV1beta1NamespacedCronJobResponse(response CreateBatchV1beta1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateBatchV1beta1NamespacedCronJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateBatchV1beta1NamespacedCronJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateBatchV1beta1NamespacedCronJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateBatchV1beta1NamespacedCronJobApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateBatchV1beta1NamespacedCronJobApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateBatchV1beta1NamespacedCronJobApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateBatchV1beta1NamespacedCronJobApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateBatchV1beta1NamespacedCronJobApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateBatchV1beta1NamespacedCronJobApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateBatchV1beta1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1beta1/namespaces/{namespace}/cronjobs: unexpected response type: %T`, response)
	}
}

func encodeCreateCertificatesV1CertificateSigningRequestResponse(response CreateCertificatesV1CertificateSigningRequestRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCertificatesV1CertificateSigningRequestApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCertificatesV1CertificateSigningRequestApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCertificatesV1CertificateSigningRequestApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCertificatesV1CertificateSigningRequestApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCertificatesV1CertificateSigningRequestApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCertificatesV1CertificateSigningRequestApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCertificatesV1CertificateSigningRequestUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/certificates.k8s.io/v1/certificatesigningrequests: unexpected response type: %T`, response)
	}
}

func encodeCreateCoordinationV1NamespacedLeaseResponse(response CreateCoordinationV1NamespacedLeaseRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoordinationV1NamespacedLeaseApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoordinationV1NamespacedLeaseApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoordinationV1NamespacedLeaseApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoordinationV1NamespacedLeaseApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoordinationV1NamespacedLeaseApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoordinationV1NamespacedLeaseApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoordinationV1NamespacedLeaseApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoordinationV1NamespacedLeaseApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoordinationV1NamespacedLeaseApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoordinationV1NamespacedLeaseUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NamespaceResponse(response CreateCoreV1NamespaceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NamespaceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespaceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespaceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespaceApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespaceApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespaceApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespaceApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespaceApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespaceApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespaceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NamespacedBindingResponse(response CreateCoreV1NamespacedBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NamespacedBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedBindingApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedBindingApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedBindingApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedBindingApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedBindingApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedBindingApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/bindings: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NamespacedConfigMapResponse(response CreateCoreV1NamespacedConfigMapRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NamespacedConfigMapApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedConfigMapApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedConfigMapApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedConfigMapApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedConfigMapApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedConfigMapApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedConfigMapApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedConfigMapApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedConfigMapApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedConfigMapUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/configmaps: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NamespacedEndpointsResponse(response CreateCoreV1NamespacedEndpointsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NamespacedEndpointsApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedEndpointsApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedEndpointsApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedEndpointsApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedEndpointsApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedEndpointsApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedEndpointsApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedEndpointsApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedEndpointsApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedEndpointsUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/endpoints: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NamespacedEventResponse(response CreateCoreV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedEventApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedEventApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedEventApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedEventApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedEventApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedEventApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/events: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NamespacedLimitRangeResponse(response CreateCoreV1NamespacedLimitRangeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NamespacedLimitRangeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedLimitRangeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedLimitRangeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedLimitRangeApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedLimitRangeApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedLimitRangeApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedLimitRangeApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedLimitRangeApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedLimitRangeApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedLimitRangeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/limitranges: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NamespacedPersistentVolumeClaimResponse(response CreateCoreV1NamespacedPersistentVolumeClaimRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedPersistentVolumeClaimApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedPersistentVolumeClaimApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedPersistentVolumeClaimApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedPersistentVolumeClaimApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedPersistentVolumeClaimApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedPersistentVolumeClaimApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedPersistentVolumeClaimApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedPersistentVolumeClaimApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedPersistentVolumeClaimUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/persistentvolumeclaims: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NamespacedPodResponse(response CreateCoreV1NamespacedPodRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NamespacedPodApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedPodApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedPodApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedPodApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedPodApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedPodApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedPodApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedPodApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedPodApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedPodUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NamespacedPodBindingResponse(response CreateCoreV1NamespacedPodBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NamespacedPodBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedPodBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedPodBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedPodBindingApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedPodBindingApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedPodBindingApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedPodBindingApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedPodBindingApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedPodBindingApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedPodBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/binding: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NamespacedPodEvictionResponse(response CreateCoreV1NamespacedPodEvictionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NamespacedPodEvictionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedPodEvictionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedPodEvictionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedPodEvictionApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedPodEvictionApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedPodEvictionApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedPodEvictionApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedPodEvictionApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedPodEvictionApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedPodEvictionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/eviction: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NamespacedPodTemplateResponse(response CreateCoreV1NamespacedPodTemplateRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NamespacedPodTemplateApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedPodTemplateApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedPodTemplateApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedPodTemplateApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedPodTemplateApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedPodTemplateApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedPodTemplateApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedPodTemplateApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedPodTemplateApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedPodTemplateUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/podtemplates: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NamespacedReplicationControllerResponse(response CreateCoreV1NamespacedReplicationControllerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NamespacedReplicationControllerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedReplicationControllerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedReplicationControllerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedReplicationControllerApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedReplicationControllerApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedReplicationControllerApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedReplicationControllerApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedReplicationControllerApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedReplicationControllerApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedReplicationControllerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/replicationcontrollers: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NamespacedResourceQuotaResponse(response CreateCoreV1NamespacedResourceQuotaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NamespacedResourceQuotaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedResourceQuotaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedResourceQuotaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedResourceQuotaApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedResourceQuotaApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedResourceQuotaApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedResourceQuotaApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedResourceQuotaApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedResourceQuotaApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedResourceQuotaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/resourcequotas: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NamespacedSecretResponse(response CreateCoreV1NamespacedSecretRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NamespacedSecretApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedSecretApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedSecretApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedSecretApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedSecretApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedSecretApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedSecretApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedSecretApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedSecretApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedSecretUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/secrets: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NamespacedServiceResponse(response CreateCoreV1NamespacedServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NamespacedServiceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedServiceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedServiceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedServiceApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedServiceApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedServiceApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedServiceApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedServiceApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedServiceApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NamespacedServiceAccountResponse(response CreateCoreV1NamespacedServiceAccountRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NamespacedServiceAccountApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedServiceAccountApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedServiceAccountApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedServiceAccountApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedServiceAccountApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedServiceAccountApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedServiceAccountApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedServiceAccountApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedServiceAccountApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedServiceAccountUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/serviceaccounts: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NamespacedServiceAccountTokenResponse(response CreateCoreV1NamespacedServiceAccountTokenRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NamespacedServiceAccountTokenApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedServiceAccountTokenApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedServiceAccountTokenApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedServiceAccountTokenApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedServiceAccountTokenApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedServiceAccountTokenApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedServiceAccountTokenApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NamespacedServiceAccountTokenApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NamespacedServiceAccountTokenApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NamespacedServiceAccountTokenUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/serviceaccounts/{name}/token: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1NodeResponse(response CreateCoreV1NodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1NodeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NodeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NodeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NodeApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NodeApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NodeApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NodeApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1NodeApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1NodeApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1NodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes: unexpected response type: %T`, response)
	}
}

func encodeCreateCoreV1PersistentVolumeResponse(response CreateCoreV1PersistentVolumeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateCoreV1PersistentVolumeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1PersistentVolumeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1PersistentVolumeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1PersistentVolumeApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1PersistentVolumeApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1PersistentVolumeApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1PersistentVolumeApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateCoreV1PersistentVolumeApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateCoreV1PersistentVolumeApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateCoreV1PersistentVolumeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/persistentvolumes: unexpected response type: %T`, response)
	}
}

func encodeCreateDiscoveryV1NamespacedEndpointSliceResponse(response CreateDiscoveryV1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateDiscoveryV1NamespacedEndpointSliceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateDiscoveryV1NamespacedEndpointSliceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateDiscoveryV1NamespacedEndpointSliceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateDiscoveryV1NamespacedEndpointSliceApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateDiscoveryV1NamespacedEndpointSliceApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateDiscoveryV1NamespacedEndpointSliceApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateDiscoveryV1NamespacedEndpointSliceApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateDiscoveryV1NamespacedEndpointSliceApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateDiscoveryV1NamespacedEndpointSliceApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateDiscoveryV1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices: unexpected response type: %T`, response)
	}
}

func encodeCreateDiscoveryV1beta1NamespacedEndpointSliceResponse(response CreateDiscoveryV1beta1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateDiscoveryV1beta1NamespacedEndpointSliceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateDiscoveryV1beta1NamespacedEndpointSliceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateDiscoveryV1beta1NamespacedEndpointSliceApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateDiscoveryV1beta1NamespacedEndpointSliceApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateDiscoveryV1beta1NamespacedEndpointSliceApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateDiscoveryV1beta1NamespacedEndpointSliceApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateDiscoveryV1beta1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices: unexpected response type: %T`, response)
	}
}

func encodeCreateEventsV1NamespacedEventResponse(response CreateEventsV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateEventsV1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateEventsV1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateEventsV1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateEventsV1NamespacedEventApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateEventsV1NamespacedEventApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateEventsV1NamespacedEventApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateEventsV1NamespacedEventApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateEventsV1NamespacedEventApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateEventsV1NamespacedEventApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateEventsV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1/namespaces/{namespace}/events: unexpected response type: %T`, response)
	}
}

func encodeCreateEventsV1beta1NamespacedEventResponse(response CreateEventsV1beta1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateEventsV1beta1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateEventsV1beta1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateEventsV1beta1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateEventsV1beta1NamespacedEventApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateEventsV1beta1NamespacedEventApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateEventsV1beta1NamespacedEventApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateEventsV1beta1NamespacedEventApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateEventsV1beta1NamespacedEventApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateEventsV1beta1NamespacedEventApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateEventsV1beta1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events: unexpected response type: %T`, response)
	}
}

func encodeCreateFlowcontrolApiserverV1beta1FlowSchemaResponse(response CreateFlowcontrolApiserverV1beta1FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta1FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas: unexpected response type: %T`, response)
	}
}

func encodeCreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(response CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations: unexpected response type: %T`, response)
	}
}

func encodeCreateFlowcontrolApiserverV1beta2FlowSchemaResponse(response CreateFlowcontrolApiserverV1beta2FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta2FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas: unexpected response type: %T`, response)
	}
}

func encodeCreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(response CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations: unexpected response type: %T`, response)
	}
}

func encodeCreateInternalApiserverV1alpha1StorageVersionResponse(response CreateInternalApiserverV1alpha1StorageVersionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateInternalApiserverV1alpha1StorageVersionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateInternalApiserverV1alpha1StorageVersionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateInternalApiserverV1alpha1StorageVersionApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateInternalApiserverV1alpha1StorageVersionApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateInternalApiserverV1alpha1StorageVersionApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateInternalApiserverV1alpha1StorageVersionApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateInternalApiserverV1alpha1StorageVersionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/internal.apiserver.k8s.io/v1alpha1/storageversions: unexpected response type: %T`, response)
	}
}

func encodeCreateNetworkingV1IngressClassResponse(response CreateNetworkingV1IngressClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateNetworkingV1IngressClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNetworkingV1IngressClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNetworkingV1IngressClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNetworkingV1IngressClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNetworkingV1IngressClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNetworkingV1IngressClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNetworkingV1IngressClassApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNetworkingV1IngressClassApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNetworkingV1IngressClassApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNetworkingV1IngressClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/ingressclasses: unexpected response type: %T`, response)
	}
}

func encodeCreateNetworkingV1NamespacedIngressResponse(response CreateNetworkingV1NamespacedIngressRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateNetworkingV1NamespacedIngressApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNetworkingV1NamespacedIngressApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNetworkingV1NamespacedIngressApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNetworkingV1NamespacedIngressApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNetworkingV1NamespacedIngressApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNetworkingV1NamespacedIngressApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNetworkingV1NamespacedIngressApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNetworkingV1NamespacedIngressApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNetworkingV1NamespacedIngressApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNetworkingV1NamespacedIngressUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses: unexpected response type: %T`, response)
	}
}

func encodeCreateNetworkingV1NamespacedNetworkPolicyResponse(response CreateNetworkingV1NamespacedNetworkPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateNetworkingV1NamespacedNetworkPolicyApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNetworkingV1NamespacedNetworkPolicyApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNetworkingV1NamespacedNetworkPolicyApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNetworkingV1NamespacedNetworkPolicyApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNetworkingV1NamespacedNetworkPolicyApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNetworkingV1NamespacedNetworkPolicyApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNetworkingV1NamespacedNetworkPolicyApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNetworkingV1NamespacedNetworkPolicyApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNetworkingV1NamespacedNetworkPolicyApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNetworkingV1NamespacedNetworkPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies: unexpected response type: %T`, response)
	}
}

func encodeCreateNodeV1RuntimeClassResponse(response CreateNodeV1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateNodeV1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNodeV1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNodeV1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNodeV1RuntimeClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNodeV1RuntimeClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNodeV1RuntimeClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNodeV1RuntimeClassApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNodeV1RuntimeClassApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNodeV1RuntimeClassApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNodeV1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1/runtimeclasses: unexpected response type: %T`, response)
	}
}

func encodeCreateNodeV1alpha1RuntimeClassResponse(response CreateNodeV1alpha1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateNodeV1alpha1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNodeV1alpha1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNodeV1alpha1RuntimeClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNodeV1alpha1RuntimeClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNodeV1alpha1RuntimeClassApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNodeV1alpha1RuntimeClassApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNodeV1alpha1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1alpha1/runtimeclasses: unexpected response type: %T`, response)
	}
}

func encodeCreateNodeV1beta1RuntimeClassResponse(response CreateNodeV1beta1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateNodeV1beta1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNodeV1beta1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNodeV1beta1RuntimeClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNodeV1beta1RuntimeClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNodeV1beta1RuntimeClassApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateNodeV1beta1RuntimeClassApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateNodeV1beta1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1beta1/runtimeclasses: unexpected response type: %T`, response)
	}
}

func encodeCreatePolicyV1NamespacedPodDisruptionBudgetResponse(response CreatePolicyV1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreatePolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreatePolicyV1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreatePolicyV1NamespacedPodDisruptionBudgetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreatePolicyV1NamespacedPodDisruptionBudgetApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreatePolicyV1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreatePolicyV1NamespacedPodDisruptionBudgetApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreatePolicyV1NamespacedPodDisruptionBudgetApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreatePolicyV1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreatePolicyV1NamespacedPodDisruptionBudgetApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreatePolicyV1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets: unexpected response type: %T`, response)
	}
}

func encodeCreatePolicyV1beta1NamespacedPodDisruptionBudgetResponse(response CreatePolicyV1beta1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreatePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreatePolicyV1beta1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreatePolicyV1beta1NamespacedPodDisruptionBudgetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreatePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreatePolicyV1beta1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreatePolicyV1beta1NamespacedPodDisruptionBudgetApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreatePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreatePolicyV1beta1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreatePolicyV1beta1NamespacedPodDisruptionBudgetApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreatePolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets: unexpected response type: %T`, response)
	}
}

func encodeCreatePolicyV1beta1PodSecurityPolicyResponse(response CreatePolicyV1beta1PodSecurityPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreatePolicyV1beta1PodSecurityPolicyApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreatePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreatePolicyV1beta1PodSecurityPolicyApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreatePolicyV1beta1PodSecurityPolicyApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreatePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreatePolicyV1beta1PodSecurityPolicyApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreatePolicyV1beta1PodSecurityPolicyApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreatePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreatePolicyV1beta1PodSecurityPolicyApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreatePolicyV1beta1PodSecurityPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/podsecuritypolicies: unexpected response type: %T`, response)
	}
}

func encodeCreateRbacAuthorizationV1ClusterRoleResponse(response CreateRbacAuthorizationV1ClusterRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateRbacAuthorizationV1ClusterRoleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateRbacAuthorizationV1ClusterRoleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateRbacAuthorizationV1ClusterRoleApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateRbacAuthorizationV1ClusterRoleApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateRbacAuthorizationV1ClusterRoleApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateRbacAuthorizationV1ClusterRoleApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateRbacAuthorizationV1ClusterRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/clusterroles: unexpected response type: %T`, response)
	}
}

func encodeCreateRbacAuthorizationV1ClusterRoleBindingResponse(response CreateRbacAuthorizationV1ClusterRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateRbacAuthorizationV1ClusterRoleBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateRbacAuthorizationV1ClusterRoleBindingApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateRbacAuthorizationV1ClusterRoleBindingApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateRbacAuthorizationV1ClusterRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/clusterrolebindings: unexpected response type: %T`, response)
	}
}

func encodeCreateRbacAuthorizationV1NamespacedRoleResponse(response CreateRbacAuthorizationV1NamespacedRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateRbacAuthorizationV1NamespacedRoleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateRbacAuthorizationV1NamespacedRoleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateRbacAuthorizationV1NamespacedRoleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateRbacAuthorizationV1NamespacedRoleApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateRbacAuthorizationV1NamespacedRoleApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateRbacAuthorizationV1NamespacedRoleApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateRbacAuthorizationV1NamespacedRoleApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateRbacAuthorizationV1NamespacedRoleApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateRbacAuthorizationV1NamespacedRoleApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateRbacAuthorizationV1NamespacedRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles: unexpected response type: %T`, response)
	}
}

func encodeCreateRbacAuthorizationV1NamespacedRoleBindingResponse(response CreateRbacAuthorizationV1NamespacedRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateRbacAuthorizationV1NamespacedRoleBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateRbacAuthorizationV1NamespacedRoleBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateRbacAuthorizationV1NamespacedRoleBindingApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateRbacAuthorizationV1NamespacedRoleBindingApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateRbacAuthorizationV1NamespacedRoleBindingApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateRbacAuthorizationV1NamespacedRoleBindingApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateRbacAuthorizationV1NamespacedRoleBindingApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateRbacAuthorizationV1NamespacedRoleBindingApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateRbacAuthorizationV1NamespacedRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings: unexpected response type: %T`, response)
	}
}

func encodeCreateSchedulingV1PriorityClassResponse(response CreateSchedulingV1PriorityClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateSchedulingV1PriorityClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateSchedulingV1PriorityClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateSchedulingV1PriorityClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateSchedulingV1PriorityClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateSchedulingV1PriorityClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateSchedulingV1PriorityClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateSchedulingV1PriorityClassApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateSchedulingV1PriorityClassApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateSchedulingV1PriorityClassApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateSchedulingV1PriorityClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/scheduling.k8s.io/v1/priorityclasses: unexpected response type: %T`, response)
	}
}

func encodeCreateStorageV1CSIDriverResponse(response CreateStorageV1CSIDriverRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateStorageV1CSIDriverApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1CSIDriverApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1CSIDriverApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1CSIDriverApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1CSIDriverApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1CSIDriverApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1CSIDriverApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1CSIDriverApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1CSIDriverApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1CSIDriverUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/csidrivers: unexpected response type: %T`, response)
	}
}

func encodeCreateStorageV1CSINodeResponse(response CreateStorageV1CSINodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateStorageV1CSINodeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1CSINodeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1CSINodeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1CSINodeApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1CSINodeApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1CSINodeApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1CSINodeApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1CSINodeApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1CSINodeApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1CSINodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/csinodes: unexpected response type: %T`, response)
	}
}

func encodeCreateStorageV1StorageClassResponse(response CreateStorageV1StorageClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateStorageV1StorageClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1StorageClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1StorageClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1StorageClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1StorageClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1StorageClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1StorageClassApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1StorageClassApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1StorageClassApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1StorageClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/storageclasses: unexpected response type: %T`, response)
	}
}

func encodeCreateStorageV1VolumeAttachmentResponse(response CreateStorageV1VolumeAttachmentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateStorageV1VolumeAttachmentApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1VolumeAttachmentApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1VolumeAttachmentApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1VolumeAttachmentApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1VolumeAttachmentApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1VolumeAttachmentApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1VolumeAttachmentApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1VolumeAttachmentApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1VolumeAttachmentApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1VolumeAttachmentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/volumeattachments: unexpected response type: %T`, response)
	}
}

func encodeCreateStorageV1alpha1NamespacedCSIStorageCapacityResponse(response CreateStorageV1alpha1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1alpha1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1alpha1NamespacedCSIStorageCapacityApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1alpha1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1alpha1NamespacedCSIStorageCapacityApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1alpha1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1alpha1NamespacedCSIStorageCapacityApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities: unexpected response type: %T`, response)
	}
}

func encodeCreateStorageV1beta1NamespacedCSIStorageCapacityResponse(response CreateStorageV1beta1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CreateStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1beta1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1beta1NamespacedCSIStorageCapacityApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1beta1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1beta1NamespacedCSIStorageCapacityApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *CreateStorageV1beta1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *CreateStorageV1beta1NamespacedCSIStorageCapacityApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *CreateStorageV1beta1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities: unexpected response type: %T`, response)
	}
}

func encodeDeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationResponse(response DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations: unexpected response type: %T`, response)
	}
}

func encodeDeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationResponse(response DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations: unexpected response type: %T`, response)
	}
}

func encodeDeleteAdmissionregistrationV1MutatingWebhookConfigurationResponse(response DeleteAdmissionregistrationV1MutatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteAdmissionregistrationV1ValidatingWebhookConfigurationResponse(response DeleteAdmissionregistrationV1ValidatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteApiextensionsV1CollectionCustomResourceDefinitionResponse(response DeleteApiextensionsV1CollectionCustomResourceDefinitionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteApiextensionsV1CollectionCustomResourceDefinitionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiextensions.k8s.io/v1/customresourcedefinitions: unexpected response type: %T`, response)
	}
}

func encodeDeleteApiextensionsV1CustomResourceDefinitionResponse(response DeleteApiextensionsV1CustomResourceDefinitionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteApiextensionsV1CustomResourceDefinitionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteApiextensionsV1CustomResourceDefinitionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteApiextensionsV1CustomResourceDefinitionApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteApiextensionsV1CustomResourceDefinitionApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteApiextensionsV1CustomResourceDefinitionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteApiregistrationV1APIServiceResponse(response DeleteApiregistrationV1APIServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteApiregistrationV1APIServiceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteApiregistrationV1APIServiceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteApiregistrationV1APIServiceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteApiregistrationV1APIServiceApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteApiregistrationV1APIServiceApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteApiregistrationV1APIServiceApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteApiregistrationV1APIServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiregistration.k8s.io/v1/apiservices/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteApiregistrationV1CollectionAPIServiceResponse(response DeleteApiregistrationV1CollectionAPIServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteApiregistrationV1CollectionAPIServiceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteApiregistrationV1CollectionAPIServiceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteApiregistrationV1CollectionAPIServiceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteApiregistrationV1CollectionAPIServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiregistration.k8s.io/v1/apiservices: unexpected response type: %T`, response)
	}
}

func encodeDeleteAppsV1CollectionNamespacedControllerRevisionResponse(response DeleteAppsV1CollectionNamespacedControllerRevisionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAppsV1CollectionNamespacedControllerRevisionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAppsV1CollectionNamespacedControllerRevisionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAppsV1CollectionNamespacedControllerRevisionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAppsV1CollectionNamespacedControllerRevisionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/controllerrevisions: unexpected response type: %T`, response)
	}
}

func encodeDeleteAppsV1CollectionNamespacedDaemonSetResponse(response DeleteAppsV1CollectionNamespacedDaemonSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAppsV1CollectionNamespacedDaemonSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAppsV1CollectionNamespacedDaemonSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAppsV1CollectionNamespacedDaemonSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAppsV1CollectionNamespacedDaemonSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/daemonsets: unexpected response type: %T`, response)
	}
}

func encodeDeleteAppsV1CollectionNamespacedDeploymentResponse(response DeleteAppsV1CollectionNamespacedDeploymentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAppsV1CollectionNamespacedDeploymentApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAppsV1CollectionNamespacedDeploymentApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAppsV1CollectionNamespacedDeploymentApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAppsV1CollectionNamespacedDeploymentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/deployments: unexpected response type: %T`, response)
	}
}

func encodeDeleteAppsV1CollectionNamespacedReplicaSetResponse(response DeleteAppsV1CollectionNamespacedReplicaSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAppsV1CollectionNamespacedReplicaSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAppsV1CollectionNamespacedReplicaSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAppsV1CollectionNamespacedReplicaSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAppsV1CollectionNamespacedReplicaSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/replicasets: unexpected response type: %T`, response)
	}
}

func encodeDeleteAppsV1CollectionNamespacedStatefulSetResponse(response DeleteAppsV1CollectionNamespacedStatefulSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAppsV1CollectionNamespacedStatefulSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAppsV1CollectionNamespacedStatefulSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAppsV1CollectionNamespacedStatefulSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAppsV1CollectionNamespacedStatefulSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/statefulsets: unexpected response type: %T`, response)
	}
}

func encodeDeleteAppsV1NamespacedControllerRevisionResponse(response DeleteAppsV1NamespacedControllerRevisionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAppsV1NamespacedControllerRevisionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAppsV1NamespacedControllerRevisionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAppsV1NamespacedControllerRevisionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAppsV1NamespacedControllerRevisionApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAppsV1NamespacedControllerRevisionApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAppsV1NamespacedControllerRevisionApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAppsV1NamespacedControllerRevisionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteAppsV1NamespacedDaemonSetResponse(response DeleteAppsV1NamespacedDaemonSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAppsV1NamespacedDaemonSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAppsV1NamespacedDaemonSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAppsV1NamespacedDaemonSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAppsV1NamespacedDaemonSetApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAppsV1NamespacedDaemonSetApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAppsV1NamespacedDaemonSetApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAppsV1NamespacedDaemonSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteAppsV1NamespacedDeploymentResponse(response DeleteAppsV1NamespacedDeploymentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAppsV1NamespacedDeploymentApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAppsV1NamespacedDeploymentApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAppsV1NamespacedDeploymentApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAppsV1NamespacedDeploymentApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAppsV1NamespacedDeploymentApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAppsV1NamespacedDeploymentApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAppsV1NamespacedDeploymentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/deployments/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteAppsV1NamespacedReplicaSetResponse(response DeleteAppsV1NamespacedReplicaSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAppsV1NamespacedReplicaSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAppsV1NamespacedReplicaSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAppsV1NamespacedReplicaSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAppsV1NamespacedReplicaSetApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAppsV1NamespacedReplicaSetApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAppsV1NamespacedReplicaSetApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAppsV1NamespacedReplicaSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/replicasets/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteAppsV1NamespacedStatefulSetResponse(response DeleteAppsV1NamespacedStatefulSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAppsV1NamespacedStatefulSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAppsV1NamespacedStatefulSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAppsV1NamespacedStatefulSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAppsV1NamespacedStatefulSetApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAppsV1NamespacedStatefulSetApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAppsV1NamespacedStatefulSetApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAppsV1NamespacedStatefulSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerResponse(response DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeDeleteAutoscalingV1NamespacedHorizontalPodAutoscalerResponse(response DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerResponse(response DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeDeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse(response DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerResponse(response DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeDeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerResponse(response DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteBatchV1CollectionNamespacedCronJobResponse(response DeleteBatchV1CollectionNamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteBatchV1CollectionNamespacedCronJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteBatchV1CollectionNamespacedCronJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteBatchV1CollectionNamespacedCronJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteBatchV1CollectionNamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/cronjobs: unexpected response type: %T`, response)
	}
}

func encodeDeleteBatchV1CollectionNamespacedJobResponse(response DeleteBatchV1CollectionNamespacedJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteBatchV1CollectionNamespacedJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteBatchV1CollectionNamespacedJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteBatchV1CollectionNamespacedJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteBatchV1CollectionNamespacedJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/jobs: unexpected response type: %T`, response)
	}
}

func encodeDeleteBatchV1NamespacedCronJobResponse(response DeleteBatchV1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteBatchV1NamespacedCronJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteBatchV1NamespacedCronJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteBatchV1NamespacedCronJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteBatchV1NamespacedCronJobApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteBatchV1NamespacedCronJobApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteBatchV1NamespacedCronJobApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteBatchV1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteBatchV1NamespacedJobResponse(response DeleteBatchV1NamespacedJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteBatchV1NamespacedJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteBatchV1NamespacedJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteBatchV1NamespacedJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteBatchV1NamespacedJobApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteBatchV1NamespacedJobApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteBatchV1NamespacedJobApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteBatchV1NamespacedJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/jobs/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteBatchV1beta1CollectionNamespacedCronJobResponse(response DeleteBatchV1beta1CollectionNamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteBatchV1beta1CollectionNamespacedCronJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteBatchV1beta1CollectionNamespacedCronJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteBatchV1beta1CollectionNamespacedCronJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteBatchV1beta1CollectionNamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1beta1/namespaces/{namespace}/cronjobs: unexpected response type: %T`, response)
	}
}

func encodeDeleteBatchV1beta1NamespacedCronJobResponse(response DeleteBatchV1beta1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteBatchV1beta1NamespacedCronJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteBatchV1beta1NamespacedCronJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteBatchV1beta1NamespacedCronJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteBatchV1beta1NamespacedCronJobApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteBatchV1beta1NamespacedCronJobApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteBatchV1beta1NamespacedCronJobApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteBatchV1beta1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteCertificatesV1CertificateSigningRequestResponse(response DeleteCertificatesV1CertificateSigningRequestRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCertificatesV1CertificateSigningRequestApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCertificatesV1CertificateSigningRequestApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCertificatesV1CertificateSigningRequestApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCertificatesV1CertificateSigningRequestApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCertificatesV1CertificateSigningRequestUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteCertificatesV1CollectionCertificateSigningRequestResponse(response DeleteCertificatesV1CollectionCertificateSigningRequestRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCertificatesV1CollectionCertificateSigningRequestApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCertificatesV1CollectionCertificateSigningRequestApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCertificatesV1CollectionCertificateSigningRequestApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCertificatesV1CollectionCertificateSigningRequestUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/certificates.k8s.io/v1/certificatesigningrequests: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoordinationV1CollectionNamespacedLeaseResponse(response DeleteCoordinationV1CollectionNamespacedLeaseRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoordinationV1CollectionNamespacedLeaseApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoordinationV1CollectionNamespacedLeaseApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoordinationV1CollectionNamespacedLeaseApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoordinationV1CollectionNamespacedLeaseUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoordinationV1NamespacedLeaseResponse(response DeleteCoordinationV1NamespacedLeaseRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoordinationV1NamespacedLeaseApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoordinationV1NamespacedLeaseApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoordinationV1NamespacedLeaseApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoordinationV1NamespacedLeaseApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoordinationV1NamespacedLeaseApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoordinationV1NamespacedLeaseApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoordinationV1NamespacedLeaseUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1CollectionNamespacedConfigMapResponse(response DeleteCoreV1CollectionNamespacedConfigMapRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1CollectionNamespacedConfigMapApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1CollectionNamespacedConfigMapApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedConfigMapApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedConfigMapUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/configmaps: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1CollectionNamespacedEndpointsResponse(response DeleteCoreV1CollectionNamespacedEndpointsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1CollectionNamespacedEndpointsApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1CollectionNamespacedEndpointsApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedEndpointsApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedEndpointsUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/endpoints: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1CollectionNamespacedEventResponse(response DeleteCoreV1CollectionNamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1CollectionNamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1CollectionNamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/events: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1CollectionNamespacedLimitRangeResponse(response DeleteCoreV1CollectionNamespacedLimitRangeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1CollectionNamespacedLimitRangeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1CollectionNamespacedLimitRangeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedLimitRangeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedLimitRangeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/limitranges: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1CollectionNamespacedPersistentVolumeClaimResponse(response DeleteCoreV1CollectionNamespacedPersistentVolumeClaimRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1CollectionNamespacedPersistentVolumeClaimApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1CollectionNamespacedPersistentVolumeClaimApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedPersistentVolumeClaimApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedPersistentVolumeClaimUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/persistentvolumeclaims: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1CollectionNamespacedPodResponse(response DeleteCoreV1CollectionNamespacedPodRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1CollectionNamespacedPodApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1CollectionNamespacedPodApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedPodApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedPodUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1CollectionNamespacedPodTemplateResponse(response DeleteCoreV1CollectionNamespacedPodTemplateRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1CollectionNamespacedPodTemplateApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1CollectionNamespacedPodTemplateApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedPodTemplateApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedPodTemplateUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/podtemplates: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1CollectionNamespacedReplicationControllerResponse(response DeleteCoreV1CollectionNamespacedReplicationControllerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1CollectionNamespacedReplicationControllerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1CollectionNamespacedReplicationControllerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedReplicationControllerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedReplicationControllerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/replicationcontrollers: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1CollectionNamespacedResourceQuotaResponse(response DeleteCoreV1CollectionNamespacedResourceQuotaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1CollectionNamespacedResourceQuotaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1CollectionNamespacedResourceQuotaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedResourceQuotaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedResourceQuotaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/resourcequotas: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1CollectionNamespacedSecretResponse(response DeleteCoreV1CollectionNamespacedSecretRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1CollectionNamespacedSecretApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1CollectionNamespacedSecretApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedSecretApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedSecretUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/secrets: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1CollectionNamespacedServiceResponse(response DeleteCoreV1CollectionNamespacedServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1CollectionNamespacedServiceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1CollectionNamespacedServiceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedServiceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1CollectionNamespacedServiceAccountResponse(response DeleteCoreV1CollectionNamespacedServiceAccountRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1CollectionNamespacedServiceAccountApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1CollectionNamespacedServiceAccountApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedServiceAccountApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1CollectionNamespacedServiceAccountUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/serviceaccounts: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1CollectionNodeResponse(response DeleteCoreV1CollectionNodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1CollectionNodeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1CollectionNodeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1CollectionNodeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1CollectionNodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1CollectionPersistentVolumeResponse(response DeleteCoreV1CollectionPersistentVolumeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1CollectionPersistentVolumeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1CollectionPersistentVolumeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1CollectionPersistentVolumeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1CollectionPersistentVolumeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/persistentvolumes: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1NamespaceResponse(response DeleteCoreV1NamespaceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1NamespaceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespaceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespaceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespaceApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespaceApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespaceApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespaceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1NamespacedConfigMapResponse(response DeleteCoreV1NamespacedConfigMapRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1NamespacedConfigMapApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedConfigMapApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedConfigMapApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedConfigMapApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedConfigMapApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedConfigMapApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedConfigMapUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/configmaps/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1NamespacedEndpointsResponse(response DeleteCoreV1NamespacedEndpointsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1NamespacedEndpointsApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedEndpointsApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedEndpointsApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedEndpointsApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedEndpointsApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedEndpointsApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedEndpointsUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/endpoints/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1NamespacedEventResponse(response DeleteCoreV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedEventApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedEventApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedEventApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/events/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1NamespacedLimitRangeResponse(response DeleteCoreV1NamespacedLimitRangeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1NamespacedLimitRangeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedLimitRangeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedLimitRangeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedLimitRangeApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedLimitRangeApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedLimitRangeApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedLimitRangeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/limitranges/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1NamespacedPersistentVolumeClaimResponse(response DeleteCoreV1NamespacedPersistentVolumeClaimRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedPersistentVolumeClaimApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedPersistentVolumeClaimApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedPersistentVolumeClaimApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedPersistentVolumeClaimApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedPersistentVolumeClaimApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedPersistentVolumeClaimUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1NamespacedPodResponse(response DeleteCoreV1NamespacedPodRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1NamespacedPodApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedPodApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedPodApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedPodApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedPodApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedPodApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedPodUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1NamespacedPodTemplateResponse(response DeleteCoreV1NamespacedPodTemplateRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1NamespacedPodTemplateApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedPodTemplateApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedPodTemplateApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedPodTemplateApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedPodTemplateApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedPodTemplateApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedPodTemplateUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/podtemplates/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1NamespacedReplicationControllerResponse(response DeleteCoreV1NamespacedReplicationControllerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1NamespacedReplicationControllerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedReplicationControllerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedReplicationControllerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedReplicationControllerApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedReplicationControllerApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedReplicationControllerApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedReplicationControllerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/replicationcontrollers/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1NamespacedResourceQuotaResponse(response DeleteCoreV1NamespacedResourceQuotaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1NamespacedResourceQuotaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedResourceQuotaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedResourceQuotaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedResourceQuotaApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedResourceQuotaApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedResourceQuotaApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedResourceQuotaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/resourcequotas/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1NamespacedSecretResponse(response DeleteCoreV1NamespacedSecretRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1NamespacedSecretApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedSecretApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedSecretApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedSecretApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedSecretApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedSecretApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedSecretUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/secrets/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1NamespacedServiceResponse(response DeleteCoreV1NamespacedServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1NamespacedServiceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedServiceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedServiceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedServiceApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedServiceApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedServiceApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1NamespacedServiceAccountResponse(response DeleteCoreV1NamespacedServiceAccountRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1NamespacedServiceAccountApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedServiceAccountApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedServiceAccountApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedServiceAccountApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NamespacedServiceAccountApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NamespacedServiceAccountApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NamespacedServiceAccountUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/serviceaccounts/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1NodeResponse(response DeleteCoreV1NodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1NodeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NodeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NodeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NodeApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1NodeApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1NodeApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1NodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteCoreV1PersistentVolumeResponse(response DeleteCoreV1PersistentVolumeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCoreV1PersistentVolumeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1PersistentVolumeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1PersistentVolumeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1PersistentVolumeApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteCoreV1PersistentVolumeApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteCoreV1PersistentVolumeApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteCoreV1PersistentVolumeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/persistentvolumes/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteDiscoveryV1CollectionNamespacedEndpointSliceResponse(response DeleteDiscoveryV1CollectionNamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteDiscoveryV1CollectionNamespacedEndpointSliceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteDiscoveryV1CollectionNamespacedEndpointSliceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteDiscoveryV1CollectionNamespacedEndpointSliceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteDiscoveryV1CollectionNamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices: unexpected response type: %T`, response)
	}
}

func encodeDeleteDiscoveryV1NamespacedEndpointSliceResponse(response DeleteDiscoveryV1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteDiscoveryV1NamespacedEndpointSliceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteDiscoveryV1NamespacedEndpointSliceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteDiscoveryV1NamespacedEndpointSliceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteDiscoveryV1NamespacedEndpointSliceApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteDiscoveryV1NamespacedEndpointSliceApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteDiscoveryV1NamespacedEndpointSliceApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteDiscoveryV1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceResponse(response DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices: unexpected response type: %T`, response)
	}
}

func encodeDeleteDiscoveryV1beta1NamespacedEndpointSliceResponse(response DeleteDiscoveryV1beta1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteDiscoveryV1beta1NamespacedEndpointSliceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteDiscoveryV1beta1NamespacedEndpointSliceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteDiscoveryV1beta1NamespacedEndpointSliceApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteDiscoveryV1beta1NamespacedEndpointSliceApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteDiscoveryV1beta1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteEventsV1CollectionNamespacedEventResponse(response DeleteEventsV1CollectionNamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteEventsV1CollectionNamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteEventsV1CollectionNamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteEventsV1CollectionNamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteEventsV1CollectionNamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1/namespaces/{namespace}/events: unexpected response type: %T`, response)
	}
}

func encodeDeleteEventsV1NamespacedEventResponse(response DeleteEventsV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteEventsV1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteEventsV1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteEventsV1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteEventsV1NamespacedEventApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteEventsV1NamespacedEventApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteEventsV1NamespacedEventApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteEventsV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteEventsV1beta1CollectionNamespacedEventResponse(response DeleteEventsV1beta1CollectionNamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteEventsV1beta1CollectionNamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteEventsV1beta1CollectionNamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteEventsV1beta1CollectionNamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteEventsV1beta1CollectionNamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events: unexpected response type: %T`, response)
	}
}

func encodeDeleteEventsV1beta1NamespacedEventResponse(response DeleteEventsV1beta1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteEventsV1beta1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteEventsV1beta1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteEventsV1beta1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteEventsV1beta1NamespacedEventApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteEventsV1beta1NamespacedEventApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteEventsV1beta1NamespacedEventApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteEventsV1beta1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaResponse(response DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas: unexpected response type: %T`, response)
	}
}

func encodeDeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationResponse(response DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations: unexpected response type: %T`, response)
	}
}

func encodeDeleteFlowcontrolApiserverV1beta1FlowSchemaResponse(response DeleteFlowcontrolApiserverV1beta1FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta1FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(response DeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaResponse(response DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas: unexpected response type: %T`, response)
	}
}

func encodeDeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationResponse(response DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations: unexpected response type: %T`, response)
	}
}

func encodeDeleteFlowcontrolApiserverV1beta2FlowSchemaResponse(response DeleteFlowcontrolApiserverV1beta2FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta2FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(response DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteInternalApiserverV1alpha1CollectionStorageVersionResponse(response DeleteInternalApiserverV1alpha1CollectionStorageVersionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteInternalApiserverV1alpha1CollectionStorageVersionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/internal.apiserver.k8s.io/v1alpha1/storageversions: unexpected response type: %T`, response)
	}
}

func encodeDeleteInternalApiserverV1alpha1StorageVersionResponse(response DeleteInternalApiserverV1alpha1StorageVersionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteInternalApiserverV1alpha1StorageVersionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteInternalApiserverV1alpha1StorageVersionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteInternalApiserverV1alpha1StorageVersionApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteInternalApiserverV1alpha1StorageVersionApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteInternalApiserverV1alpha1StorageVersionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteNetworkingV1CollectionIngressClassResponse(response DeleteNetworkingV1CollectionIngressClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteNetworkingV1CollectionIngressClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNetworkingV1CollectionIngressClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNetworkingV1CollectionIngressClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNetworkingV1CollectionIngressClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/ingressclasses: unexpected response type: %T`, response)
	}
}

func encodeDeleteNetworkingV1CollectionNamespacedIngressResponse(response DeleteNetworkingV1CollectionNamespacedIngressRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteNetworkingV1CollectionNamespacedIngressApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNetworkingV1CollectionNamespacedIngressApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNetworkingV1CollectionNamespacedIngressApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNetworkingV1CollectionNamespacedIngressUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses: unexpected response type: %T`, response)
	}
}

func encodeDeleteNetworkingV1CollectionNamespacedNetworkPolicyResponse(response DeleteNetworkingV1CollectionNamespacedNetworkPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteNetworkingV1CollectionNamespacedNetworkPolicyApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNetworkingV1CollectionNamespacedNetworkPolicyApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNetworkingV1CollectionNamespacedNetworkPolicyApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNetworkingV1CollectionNamespacedNetworkPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies: unexpected response type: %T`, response)
	}
}

func encodeDeleteNetworkingV1IngressClassResponse(response DeleteNetworkingV1IngressClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteNetworkingV1IngressClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNetworkingV1IngressClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNetworkingV1IngressClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNetworkingV1IngressClassApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNetworkingV1IngressClassApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNetworkingV1IngressClassApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNetworkingV1IngressClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/ingressclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteNetworkingV1NamespacedIngressResponse(response DeleteNetworkingV1NamespacedIngressRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteNetworkingV1NamespacedIngressApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNetworkingV1NamespacedIngressApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNetworkingV1NamespacedIngressApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNetworkingV1NamespacedIngressApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNetworkingV1NamespacedIngressApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNetworkingV1NamespacedIngressApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNetworkingV1NamespacedIngressUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteNetworkingV1NamespacedNetworkPolicyResponse(response DeleteNetworkingV1NamespacedNetworkPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteNetworkingV1NamespacedNetworkPolicyApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNetworkingV1NamespacedNetworkPolicyApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNetworkingV1NamespacedNetworkPolicyApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNetworkingV1NamespacedNetworkPolicyApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNetworkingV1NamespacedNetworkPolicyApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNetworkingV1NamespacedNetworkPolicyApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNetworkingV1NamespacedNetworkPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteNodeV1CollectionRuntimeClassResponse(response DeleteNodeV1CollectionRuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteNodeV1CollectionRuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNodeV1CollectionRuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNodeV1CollectionRuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNodeV1CollectionRuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1/runtimeclasses: unexpected response type: %T`, response)
	}
}

func encodeDeleteNodeV1RuntimeClassResponse(response DeleteNodeV1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteNodeV1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNodeV1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNodeV1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNodeV1RuntimeClassApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNodeV1RuntimeClassApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNodeV1RuntimeClassApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNodeV1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1/runtimeclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteNodeV1alpha1CollectionRuntimeClassResponse(response DeleteNodeV1alpha1CollectionRuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteNodeV1alpha1CollectionRuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNodeV1alpha1CollectionRuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNodeV1alpha1CollectionRuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNodeV1alpha1CollectionRuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1alpha1/runtimeclasses: unexpected response type: %T`, response)
	}
}

func encodeDeleteNodeV1alpha1RuntimeClassResponse(response DeleteNodeV1alpha1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteNodeV1alpha1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNodeV1alpha1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNodeV1alpha1RuntimeClassApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNodeV1alpha1RuntimeClassApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNodeV1alpha1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1alpha1/runtimeclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteNodeV1beta1CollectionRuntimeClassResponse(response DeleteNodeV1beta1CollectionRuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteNodeV1beta1CollectionRuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNodeV1beta1CollectionRuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNodeV1beta1CollectionRuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNodeV1beta1CollectionRuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1beta1/runtimeclasses: unexpected response type: %T`, response)
	}
}

func encodeDeleteNodeV1beta1RuntimeClassResponse(response DeleteNodeV1beta1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteNodeV1beta1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNodeV1beta1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNodeV1beta1RuntimeClassApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteNodeV1beta1RuntimeClassApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteNodeV1beta1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1beta1/runtimeclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeletePolicyV1CollectionNamespacedPodDisruptionBudgetResponse(response DeletePolicyV1CollectionNamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeletePolicyV1CollectionNamespacedPodDisruptionBudgetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeletePolicyV1CollectionNamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeletePolicyV1CollectionNamespacedPodDisruptionBudgetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeletePolicyV1CollectionNamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets: unexpected response type: %T`, response)
	}
}

func encodeDeletePolicyV1NamespacedPodDisruptionBudgetResponse(response DeletePolicyV1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeletePolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeletePolicyV1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeletePolicyV1NamespacedPodDisruptionBudgetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeletePolicyV1NamespacedPodDisruptionBudgetApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeletePolicyV1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeletePolicyV1NamespacedPodDisruptionBudgetApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeletePolicyV1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetResponse(response DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets: unexpected response type: %T`, response)
	}
}

func encodeDeletePolicyV1beta1CollectionPodSecurityPolicyResponse(response DeletePolicyV1beta1CollectionPodSecurityPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeletePolicyV1beta1CollectionPodSecurityPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/podsecuritypolicies: unexpected response type: %T`, response)
	}
}

func encodeDeletePolicyV1beta1NamespacedPodDisruptionBudgetResponse(response DeletePolicyV1beta1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeletePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeletePolicyV1beta1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeletePolicyV1beta1NamespacedPodDisruptionBudgetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeletePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeletePolicyV1beta1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeletePolicyV1beta1NamespacedPodDisruptionBudgetApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeletePolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeletePolicyV1beta1PodSecurityPolicyResponse(response DeletePolicyV1beta1PodSecurityPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeletePolicyV1beta1PodSecurityPolicyApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeletePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeletePolicyV1beta1PodSecurityPolicyApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeletePolicyV1beta1PodSecurityPolicyApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeletePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeletePolicyV1beta1PodSecurityPolicyApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeletePolicyV1beta1PodSecurityPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/podsecuritypolicies/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteRbacAuthorizationV1ClusterRoleResponse(response DeleteRbacAuthorizationV1ClusterRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteRbacAuthorizationV1ClusterRoleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteRbacAuthorizationV1ClusterRoleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteRbacAuthorizationV1ClusterRoleApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteRbacAuthorizationV1ClusterRoleApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteRbacAuthorizationV1ClusterRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteRbacAuthorizationV1ClusterRoleBindingResponse(response DeleteRbacAuthorizationV1ClusterRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteRbacAuthorizationV1ClusterRoleBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteRbacAuthorizationV1ClusterRoleBindingApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteRbacAuthorizationV1ClusterRoleBindingApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteRbacAuthorizationV1ClusterRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteRbacAuthorizationV1CollectionClusterRoleResponse(response DeleteRbacAuthorizationV1CollectionClusterRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteRbacAuthorizationV1CollectionClusterRoleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteRbacAuthorizationV1CollectionClusterRoleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteRbacAuthorizationV1CollectionClusterRoleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteRbacAuthorizationV1CollectionClusterRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/clusterroles: unexpected response type: %T`, response)
	}
}

func encodeDeleteRbacAuthorizationV1CollectionClusterRoleBindingResponse(response DeleteRbacAuthorizationV1CollectionClusterRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteRbacAuthorizationV1CollectionClusterRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/clusterrolebindings: unexpected response type: %T`, response)
	}
}

func encodeDeleteRbacAuthorizationV1CollectionNamespacedRoleResponse(response DeleteRbacAuthorizationV1CollectionNamespacedRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteRbacAuthorizationV1CollectionNamespacedRoleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteRbacAuthorizationV1CollectionNamespacedRoleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteRbacAuthorizationV1CollectionNamespacedRoleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteRbacAuthorizationV1CollectionNamespacedRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles: unexpected response type: %T`, response)
	}
}

func encodeDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingResponse(response DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings: unexpected response type: %T`, response)
	}
}

func encodeDeleteRbacAuthorizationV1NamespacedRoleResponse(response DeleteRbacAuthorizationV1NamespacedRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteRbacAuthorizationV1NamespacedRoleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteRbacAuthorizationV1NamespacedRoleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteRbacAuthorizationV1NamespacedRoleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteRbacAuthorizationV1NamespacedRoleApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteRbacAuthorizationV1NamespacedRoleApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteRbacAuthorizationV1NamespacedRoleApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteRbacAuthorizationV1NamespacedRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteRbacAuthorizationV1NamespacedRoleBindingResponse(response DeleteRbacAuthorizationV1NamespacedRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteRbacAuthorizationV1NamespacedRoleBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteRbacAuthorizationV1NamespacedRoleBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteRbacAuthorizationV1NamespacedRoleBindingApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteRbacAuthorizationV1NamespacedRoleBindingApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteRbacAuthorizationV1NamespacedRoleBindingApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteRbacAuthorizationV1NamespacedRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteSchedulingV1CollectionPriorityClassResponse(response DeleteSchedulingV1CollectionPriorityClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteSchedulingV1CollectionPriorityClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteSchedulingV1CollectionPriorityClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteSchedulingV1CollectionPriorityClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteSchedulingV1CollectionPriorityClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/scheduling.k8s.io/v1/priorityclasses: unexpected response type: %T`, response)
	}
}

func encodeDeleteSchedulingV1PriorityClassResponse(response DeleteSchedulingV1PriorityClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteSchedulingV1PriorityClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteSchedulingV1PriorityClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteSchedulingV1PriorityClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteSchedulingV1PriorityClassApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteSchedulingV1PriorityClassApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteSchedulingV1PriorityClassApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteSchedulingV1PriorityClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/scheduling.k8s.io/v1/priorityclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteStorageV1CSIDriverResponse(response DeleteStorageV1CSIDriverRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteStorageV1CSIDriverApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1CSIDriverApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1CSIDriverApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1CSIDriverApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1CSIDriverApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1CSIDriverApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1CSIDriverUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/csidrivers/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteStorageV1CSINodeResponse(response DeleteStorageV1CSINodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteStorageV1CSINodeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1CSINodeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1CSINodeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1CSINodeApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1CSINodeApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1CSINodeApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1CSINodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/csinodes/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteStorageV1CollectionCSIDriverResponse(response DeleteStorageV1CollectionCSIDriverRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteStorageV1CollectionCSIDriverApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1CollectionCSIDriverApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1CollectionCSIDriverApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1CollectionCSIDriverUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/csidrivers: unexpected response type: %T`, response)
	}
}

func encodeDeleteStorageV1CollectionCSINodeResponse(response DeleteStorageV1CollectionCSINodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteStorageV1CollectionCSINodeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1CollectionCSINodeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1CollectionCSINodeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1CollectionCSINodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/csinodes: unexpected response type: %T`, response)
	}
}

func encodeDeleteStorageV1CollectionStorageClassResponse(response DeleteStorageV1CollectionStorageClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteStorageV1CollectionStorageClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1CollectionStorageClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1CollectionStorageClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1CollectionStorageClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/storageclasses: unexpected response type: %T`, response)
	}
}

func encodeDeleteStorageV1CollectionVolumeAttachmentResponse(response DeleteStorageV1CollectionVolumeAttachmentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteStorageV1CollectionVolumeAttachmentApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1CollectionVolumeAttachmentApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1CollectionVolumeAttachmentApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1CollectionVolumeAttachmentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/volumeattachments: unexpected response type: %T`, response)
	}
}

func encodeDeleteStorageV1StorageClassResponse(response DeleteStorageV1StorageClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteStorageV1StorageClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1StorageClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1StorageClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1StorageClassApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1StorageClassApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1StorageClassApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1StorageClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/storageclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteStorageV1VolumeAttachmentResponse(response DeleteStorageV1VolumeAttachmentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteStorageV1VolumeAttachmentApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1VolumeAttachmentApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1VolumeAttachmentApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1VolumeAttachmentApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1VolumeAttachmentApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1VolumeAttachmentApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1VolumeAttachmentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/volumeattachments/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteStorageV1alpha1CollectionNamespacedCSIStorageCapacityResponse(response DeleteStorageV1alpha1CollectionNamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteStorageV1alpha1CollectionNamespacedCSIStorageCapacityApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1alpha1CollectionNamespacedCSIStorageCapacityApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1alpha1CollectionNamespacedCSIStorageCapacityApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1alpha1CollectionNamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities: unexpected response type: %T`, response)
	}
}

func encodeDeleteStorageV1alpha1NamespacedCSIStorageCapacityResponse(response DeleteStorageV1alpha1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1alpha1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1alpha1NamespacedCSIStorageCapacityApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1alpha1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1alpha1NamespacedCSIStorageCapacityApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities/{name}: unexpected response type: %T`, response)
	}
}

func encodeDeleteStorageV1beta1CollectionNamespacedCSIStorageCapacityResponse(response DeleteStorageV1beta1CollectionNamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteStorageV1beta1CollectionNamespacedCSIStorageCapacityApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1beta1CollectionNamespacedCSIStorageCapacityApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1beta1CollectionNamespacedCSIStorageCapacityApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1beta1CollectionNamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities: unexpected response type: %T`, response)
	}
}

func encodeDeleteStorageV1beta1NamespacedCSIStorageCapacityResponse(response DeleteStorageV1beta1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1beta1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1beta1NamespacedCSIStorageCapacityApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *DeleteStorageV1beta1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufAccepted:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(202)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *DeleteStorageV1beta1NamespacedCSIStorageCapacityApplicationYamlAccepted:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(202)
		return errors.New(`application/yaml encoder not implemented`)
	case *DeleteStorageV1beta1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities/{name}: unexpected response type: %T`, response)
	}
}

func encodeGetAPIVersionsResponse(response GetAPIVersionsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetAPIVersionsApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAPIVersionsApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetAPIVersionsApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetAPIVersionsUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/: unexpected response type: %T`, response)
	}
}

func encodeGetAdmissionregistrationAPIGroupResponse(response GetAdmissionregistrationAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetAdmissionregistrationAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAdmissionregistrationAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetAdmissionregistrationAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetAdmissionregistrationAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/: unexpected response type: %T`, response)
	}
}

func encodeGetAdmissionregistrationV1APIResourcesResponse(response GetAdmissionregistrationV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetAdmissionregistrationV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAdmissionregistrationV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetAdmissionregistrationV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetAdmissionregistrationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetApiextensionsAPIGroupResponse(response GetApiextensionsAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetApiextensionsAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetApiextensionsAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetApiextensionsAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetApiextensionsAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiextensions.k8s.io/: unexpected response type: %T`, response)
	}
}

func encodeGetApiextensionsV1APIResourcesResponse(response GetApiextensionsV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetApiextensionsV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetApiextensionsV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetApiextensionsV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetApiextensionsV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiextensions.k8s.io/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetApiregistrationAPIGroupResponse(response GetApiregistrationAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetApiregistrationAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetApiregistrationAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetApiregistrationAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetApiregistrationAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiregistration.k8s.io/: unexpected response type: %T`, response)
	}
}

func encodeGetApiregistrationV1APIResourcesResponse(response GetApiregistrationV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetApiregistrationV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetApiregistrationV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetApiregistrationV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetApiregistrationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiregistration.k8s.io/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetAppsAPIGroupResponse(response GetAppsAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetAppsAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAppsAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetAppsAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetAppsAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/: unexpected response type: %T`, response)
	}
}

func encodeGetAppsV1APIResourcesResponse(response GetAppsV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetAppsV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAppsV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetAppsV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetAppsV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetAuthenticationAPIGroupResponse(response GetAuthenticationAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetAuthenticationAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAuthenticationAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetAuthenticationAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetAuthenticationAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/authentication.k8s.io/: unexpected response type: %T`, response)
	}
}

func encodeGetAuthenticationV1APIResourcesResponse(response GetAuthenticationV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetAuthenticationV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAuthenticationV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetAuthenticationV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetAuthenticationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/authentication.k8s.io/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetAuthorizationAPIGroupResponse(response GetAuthorizationAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetAuthorizationAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAuthorizationAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetAuthorizationAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetAuthorizationAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/authorization.k8s.io/: unexpected response type: %T`, response)
	}
}

func encodeGetAuthorizationV1APIResourcesResponse(response GetAuthorizationV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetAuthorizationV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAuthorizationV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetAuthorizationV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetAuthorizationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/authorization.k8s.io/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetAutoscalingAPIGroupResponse(response GetAutoscalingAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetAutoscalingAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAutoscalingAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetAutoscalingAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetAutoscalingAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/: unexpected response type: %T`, response)
	}
}

func encodeGetAutoscalingV1APIResourcesResponse(response GetAutoscalingV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetAutoscalingV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAutoscalingV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetAutoscalingV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetAutoscalingV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetAutoscalingV2beta1APIResourcesResponse(response GetAutoscalingV2beta1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetAutoscalingV2beta1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAutoscalingV2beta1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetAutoscalingV2beta1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetAutoscalingV2beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta1/: unexpected response type: %T`, response)
	}
}

func encodeGetAutoscalingV2beta2APIResourcesResponse(response GetAutoscalingV2beta2APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetAutoscalingV2beta2APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAutoscalingV2beta2APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetAutoscalingV2beta2APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetAutoscalingV2beta2APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta2/: unexpected response type: %T`, response)
	}
}

func encodeGetBatchAPIGroupResponse(response GetBatchAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetBatchAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetBatchAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetBatchAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetBatchAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/: unexpected response type: %T`, response)
	}
}

func encodeGetBatchV1APIResourcesResponse(response GetBatchV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetBatchV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetBatchV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetBatchV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetBatchV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetBatchV1beta1APIResourcesResponse(response GetBatchV1beta1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetBatchV1beta1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetBatchV1beta1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetBatchV1beta1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetBatchV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1beta1/: unexpected response type: %T`, response)
	}
}

func encodeGetCertificatesAPIGroupResponse(response GetCertificatesAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetCertificatesAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetCertificatesAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetCertificatesAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetCertificatesAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/certificates.k8s.io/: unexpected response type: %T`, response)
	}
}

func encodeGetCertificatesV1APIResourcesResponse(response GetCertificatesV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetCertificatesV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetCertificatesV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetCertificatesV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetCertificatesV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/certificates.k8s.io/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetCodeVersionResponse(response GetCodeVersionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgVersionInfo:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetCodeVersionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/version/: unexpected response type: %T`, response)
	}
}

func encodeGetCoordinationAPIGroupResponse(response GetCoordinationAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetCoordinationAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetCoordinationAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetCoordinationAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetCoordinationAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/coordination.k8s.io/: unexpected response type: %T`, response)
	}
}

func encodeGetCoordinationV1APIResourcesResponse(response GetCoordinationV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetCoordinationV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetCoordinationV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetCoordinationV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetCoordinationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/coordination.k8s.io/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetCoreAPIVersionsResponse(response GetCoreAPIVersionsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetCoreAPIVersionsApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetCoreAPIVersionsApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetCoreAPIVersionsApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetCoreAPIVersionsUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/: unexpected response type: %T`, response)
	}
}

func encodeGetCoreV1APIResourcesResponse(response GetCoreV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetCoreV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetCoreV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetCoreV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetCoreV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetDiscoveryAPIGroupResponse(response GetDiscoveryAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetDiscoveryAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetDiscoveryAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetDiscoveryAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetDiscoveryAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/: unexpected response type: %T`, response)
	}
}

func encodeGetDiscoveryV1APIResourcesResponse(response GetDiscoveryV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetDiscoveryV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetDiscoveryV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetDiscoveryV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetDiscoveryV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetDiscoveryV1beta1APIResourcesResponse(response GetDiscoveryV1beta1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetDiscoveryV1beta1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetDiscoveryV1beta1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetDiscoveryV1beta1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetDiscoveryV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1beta1/: unexpected response type: %T`, response)
	}
}

func encodeGetEventsAPIGroupResponse(response GetEventsAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetEventsAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetEventsAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetEventsAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetEventsAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/: unexpected response type: %T`, response)
	}
}

func encodeGetEventsV1APIResourcesResponse(response GetEventsV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetEventsV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetEventsV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetEventsV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetEventsV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetEventsV1beta1APIResourcesResponse(response GetEventsV1beta1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetEventsV1beta1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetEventsV1beta1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetEventsV1beta1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetEventsV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1beta1/: unexpected response type: %T`, response)
	}
}

func encodeGetFlowcontrolApiserverAPIGroupResponse(response GetFlowcontrolApiserverAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetFlowcontrolApiserverAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetFlowcontrolApiserverAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetFlowcontrolApiserverAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetFlowcontrolApiserverAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/: unexpected response type: %T`, response)
	}
}

func encodeGetFlowcontrolApiserverV1beta1APIResourcesResponse(response GetFlowcontrolApiserverV1beta1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetFlowcontrolApiserverV1beta1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetFlowcontrolApiserverV1beta1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetFlowcontrolApiserverV1beta1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetFlowcontrolApiserverV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/: unexpected response type: %T`, response)
	}
}

func encodeGetFlowcontrolApiserverV1beta2APIResourcesResponse(response GetFlowcontrolApiserverV1beta2APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetFlowcontrolApiserverV1beta2APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetFlowcontrolApiserverV1beta2APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetFlowcontrolApiserverV1beta2APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetFlowcontrolApiserverV1beta2APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/: unexpected response type: %T`, response)
	}
}

func encodeGetInternalApiserverAPIGroupResponse(response GetInternalApiserverAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetInternalApiserverAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetInternalApiserverAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetInternalApiserverAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetInternalApiserverAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/internal.apiserver.k8s.io/: unexpected response type: %T`, response)
	}
}

func encodeGetInternalApiserverV1alpha1APIResourcesResponse(response GetInternalApiserverV1alpha1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetInternalApiserverV1alpha1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetInternalApiserverV1alpha1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetInternalApiserverV1alpha1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetInternalApiserverV1alpha1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/internal.apiserver.k8s.io/v1alpha1/: unexpected response type: %T`, response)
	}
}

func encodeGetNetworkingAPIGroupResponse(response GetNetworkingAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetNetworkingAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetNetworkingAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetNetworkingAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetNetworkingAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/: unexpected response type: %T`, response)
	}
}

func encodeGetNetworkingV1APIResourcesResponse(response GetNetworkingV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetNetworkingV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetNetworkingV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetNetworkingV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetNetworkingV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetNodeAPIGroupResponse(response GetNodeAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetNodeAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetNodeAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetNodeAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetNodeAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/: unexpected response type: %T`, response)
	}
}

func encodeGetNodeV1APIResourcesResponse(response GetNodeV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetNodeV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetNodeV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetNodeV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetNodeV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetNodeV1alpha1APIResourcesResponse(response GetNodeV1alpha1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetNodeV1alpha1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetNodeV1alpha1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetNodeV1alpha1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetNodeV1alpha1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1alpha1/: unexpected response type: %T`, response)
	}
}

func encodeGetNodeV1beta1APIResourcesResponse(response GetNodeV1beta1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetNodeV1beta1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetNodeV1beta1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetNodeV1beta1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetNodeV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1beta1/: unexpected response type: %T`, response)
	}
}

func encodeGetPolicyAPIGroupResponse(response GetPolicyAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetPolicyAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetPolicyAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetPolicyAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetPolicyAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/: unexpected response type: %T`, response)
	}
}

func encodeGetPolicyV1APIResourcesResponse(response GetPolicyV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetPolicyV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetPolicyV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetPolicyV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetPolicyV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetPolicyV1beta1APIResourcesResponse(response GetPolicyV1beta1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetPolicyV1beta1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetPolicyV1beta1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetPolicyV1beta1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetPolicyV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/: unexpected response type: %T`, response)
	}
}

func encodeGetRbacAuthorizationAPIGroupResponse(response GetRbacAuthorizationAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetRbacAuthorizationAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetRbacAuthorizationAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetRbacAuthorizationAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetRbacAuthorizationAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/: unexpected response type: %T`, response)
	}
}

func encodeGetRbacAuthorizationV1APIResourcesResponse(response GetRbacAuthorizationV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetRbacAuthorizationV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetRbacAuthorizationV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetRbacAuthorizationV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetRbacAuthorizationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetSchedulingAPIGroupResponse(response GetSchedulingAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetSchedulingAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetSchedulingAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetSchedulingAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetSchedulingAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/scheduling.k8s.io/: unexpected response type: %T`, response)
	}
}

func encodeGetSchedulingV1APIResourcesResponse(response GetSchedulingV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetSchedulingV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetSchedulingV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetSchedulingV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetSchedulingV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/scheduling.k8s.io/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetServiceAccountIssuerOpenIDConfigurationResponse(response GetServiceAccountIssuerOpenIDConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetServiceAccountIssuerOpenIDConfigurationOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetServiceAccountIssuerOpenIDConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/.well-known/openid-configuration/: unexpected response type: %T`, response)
	}
}

func encodeGetServiceAccountIssuerOpenIDKeysetResponse(response GetServiceAccountIssuerOpenIDKeysetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetServiceAccountIssuerOpenIDKeysetOKApplicationJwkSetJSON:
		w.Header().Set("Content-Type", "application/jwk-set+json")
		w.WriteHeader(200)
		return errors.New(`application/jwk-set+json encoder not implemented`)
	case *GetServiceAccountIssuerOpenIDKeysetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/openid/v1/jwks/: unexpected response type: %T`, response)
	}
}

func encodeGetStorageAPIGroupResponse(response GetStorageAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetStorageAPIGroupApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetStorageAPIGroupApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetStorageAPIGroupApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetStorageAPIGroupUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/: unexpected response type: %T`, response)
	}
}

func encodeGetStorageV1APIResourcesResponse(response GetStorageV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetStorageV1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetStorageV1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetStorageV1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetStorageV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/: unexpected response type: %T`, response)
	}
}

func encodeGetStorageV1alpha1APIResourcesResponse(response GetStorageV1alpha1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetStorageV1alpha1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetStorageV1alpha1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetStorageV1alpha1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetStorageV1alpha1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1alpha1/: unexpected response type: %T`, response)
	}
}

func encodeGetStorageV1beta1APIResourcesResponse(response GetStorageV1beta1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetStorageV1beta1APIResourcesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetStorageV1beta1APIResourcesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *GetStorageV1beta1APIResourcesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *GetStorageV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1beta1/: unexpected response type: %T`, response)
	}
}

func encodeListAdmissionregistrationV1MutatingWebhookConfigurationResponse(response ListAdmissionregistrationV1MutatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations: unexpected response type: %T`, response)
	}
}

func encodeListAdmissionregistrationV1ValidatingWebhookConfigurationResponse(response ListAdmissionregistrationV1ValidatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations: unexpected response type: %T`, response)
	}
}

func encodeListApiextensionsV1CustomResourceDefinitionResponse(response ListApiextensionsV1CustomResourceDefinitionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListApiextensionsV1CustomResourceDefinitionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListApiextensionsV1CustomResourceDefinitionApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListApiextensionsV1CustomResourceDefinitionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListApiextensionsV1CustomResourceDefinitionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiextensions.k8s.io/v1/customresourcedefinitions: unexpected response type: %T`, response)
	}
}

func encodeListApiregistrationV1APIServiceResponse(response ListApiregistrationV1APIServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListApiregistrationV1APIServiceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListApiregistrationV1APIServiceApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListApiregistrationV1APIServiceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListApiregistrationV1APIServiceApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListApiregistrationV1APIServiceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListApiregistrationV1APIServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiregistration.k8s.io/v1/apiservices: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1ControllerRevisionForAllNamespacesResponse(response ListAppsV1ControllerRevisionForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAppsV1ControllerRevisionForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1ControllerRevisionForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAppsV1ControllerRevisionForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAppsV1ControllerRevisionForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAppsV1ControllerRevisionForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAppsV1ControllerRevisionForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/controllerrevisions: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1DaemonSetForAllNamespacesResponse(response ListAppsV1DaemonSetForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAppsV1DaemonSetForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1DaemonSetForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAppsV1DaemonSetForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAppsV1DaemonSetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAppsV1DaemonSetForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAppsV1DaemonSetForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/daemonsets: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1DeploymentForAllNamespacesResponse(response ListAppsV1DeploymentForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAppsV1DeploymentForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1DeploymentForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAppsV1DeploymentForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAppsV1DeploymentForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAppsV1DeploymentForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAppsV1DeploymentForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/deployments: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1NamespacedControllerRevisionResponse(response ListAppsV1NamespacedControllerRevisionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAppsV1NamespacedControllerRevisionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1NamespacedControllerRevisionApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAppsV1NamespacedControllerRevisionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAppsV1NamespacedControllerRevisionApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAppsV1NamespacedControllerRevisionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAppsV1NamespacedControllerRevisionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/controllerrevisions: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1NamespacedDaemonSetResponse(response ListAppsV1NamespacedDaemonSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAppsV1NamespacedDaemonSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1NamespacedDaemonSetApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAppsV1NamespacedDaemonSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAppsV1NamespacedDaemonSetApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAppsV1NamespacedDaemonSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAppsV1NamespacedDaemonSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/daemonsets: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1NamespacedDeploymentResponse(response ListAppsV1NamespacedDeploymentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAppsV1NamespacedDeploymentApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1NamespacedDeploymentApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAppsV1NamespacedDeploymentApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAppsV1NamespacedDeploymentApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAppsV1NamespacedDeploymentApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAppsV1NamespacedDeploymentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/deployments: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1NamespacedReplicaSetResponse(response ListAppsV1NamespacedReplicaSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAppsV1NamespacedReplicaSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1NamespacedReplicaSetApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAppsV1NamespacedReplicaSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAppsV1NamespacedReplicaSetApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAppsV1NamespacedReplicaSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAppsV1NamespacedReplicaSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/replicasets: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1NamespacedStatefulSetResponse(response ListAppsV1NamespacedStatefulSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAppsV1NamespacedStatefulSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1NamespacedStatefulSetApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAppsV1NamespacedStatefulSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAppsV1NamespacedStatefulSetApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAppsV1NamespacedStatefulSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAppsV1NamespacedStatefulSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/statefulsets: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1ReplicaSetForAllNamespacesResponse(response ListAppsV1ReplicaSetForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAppsV1ReplicaSetForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1ReplicaSetForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAppsV1ReplicaSetForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAppsV1ReplicaSetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAppsV1ReplicaSetForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAppsV1ReplicaSetForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/replicasets: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1StatefulSetForAllNamespacesResponse(response ListAppsV1StatefulSetForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAppsV1StatefulSetForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1StatefulSetForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAppsV1StatefulSetForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAppsV1StatefulSetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAppsV1StatefulSetForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAppsV1StatefulSetForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/statefulsets: unexpected response type: %T`, response)
	}
}

func encodeListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesResponse(response ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v1/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeListAutoscalingV1NamespacedHorizontalPodAutoscalerResponse(response ListAutoscalingV1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesResponse(response ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta1/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse(response ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesResponse(response ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta2/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerResponse(response ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeListBatchV1CronJobForAllNamespacesResponse(response ListBatchV1CronJobForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListBatchV1CronJobForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListBatchV1CronJobForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListBatchV1CronJobForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListBatchV1CronJobForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListBatchV1CronJobForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListBatchV1CronJobForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/cronjobs: unexpected response type: %T`, response)
	}
}

func encodeListBatchV1JobForAllNamespacesResponse(response ListBatchV1JobForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListBatchV1JobForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListBatchV1JobForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListBatchV1JobForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListBatchV1JobForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListBatchV1JobForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListBatchV1JobForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/jobs: unexpected response type: %T`, response)
	}
}

func encodeListBatchV1NamespacedCronJobResponse(response ListBatchV1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListBatchV1NamespacedCronJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListBatchV1NamespacedCronJobApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListBatchV1NamespacedCronJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListBatchV1NamespacedCronJobApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListBatchV1NamespacedCronJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListBatchV1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/cronjobs: unexpected response type: %T`, response)
	}
}

func encodeListBatchV1NamespacedJobResponse(response ListBatchV1NamespacedJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListBatchV1NamespacedJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListBatchV1NamespacedJobApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListBatchV1NamespacedJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListBatchV1NamespacedJobApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListBatchV1NamespacedJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListBatchV1NamespacedJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/jobs: unexpected response type: %T`, response)
	}
}

func encodeListBatchV1beta1CronJobForAllNamespacesResponse(response ListBatchV1beta1CronJobForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListBatchV1beta1CronJobForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListBatchV1beta1CronJobForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListBatchV1beta1CronJobForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListBatchV1beta1CronJobForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListBatchV1beta1CronJobForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListBatchV1beta1CronJobForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1beta1/cronjobs: unexpected response type: %T`, response)
	}
}

func encodeListBatchV1beta1NamespacedCronJobResponse(response ListBatchV1beta1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListBatchV1beta1NamespacedCronJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListBatchV1beta1NamespacedCronJobApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListBatchV1beta1NamespacedCronJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListBatchV1beta1NamespacedCronJobApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListBatchV1beta1NamespacedCronJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListBatchV1beta1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1beta1/namespaces/{namespace}/cronjobs: unexpected response type: %T`, response)
	}
}

func encodeListCertificatesV1CertificateSigningRequestResponse(response ListCertificatesV1CertificateSigningRequestRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCertificatesV1CertificateSigningRequestApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCertificatesV1CertificateSigningRequestApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCertificatesV1CertificateSigningRequestApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCertificatesV1CertificateSigningRequestUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/certificates.k8s.io/v1/certificatesigningrequests: unexpected response type: %T`, response)
	}
}

func encodeListCoordinationV1LeaseForAllNamespacesResponse(response ListCoordinationV1LeaseForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoordinationV1LeaseForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoordinationV1LeaseForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoordinationV1LeaseForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoordinationV1LeaseForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoordinationV1LeaseForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoordinationV1LeaseForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/coordination.k8s.io/v1/leases: unexpected response type: %T`, response)
	}
}

func encodeListCoordinationV1NamespacedLeaseResponse(response ListCoordinationV1NamespacedLeaseRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoordinationV1NamespacedLeaseApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoordinationV1NamespacedLeaseApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoordinationV1NamespacedLeaseApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoordinationV1NamespacedLeaseApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoordinationV1NamespacedLeaseApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoordinationV1NamespacedLeaseUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1ComponentStatusResponse(response ListCoreV1ComponentStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1ComponentStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1ComponentStatusApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1ComponentStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1ComponentStatusApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1ComponentStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1ComponentStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/componentstatuses: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1ConfigMapForAllNamespacesResponse(response ListCoreV1ConfigMapForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1ConfigMapForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1ConfigMapForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1ConfigMapForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1ConfigMapForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1ConfigMapForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1ConfigMapForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/configmaps: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1EndpointsForAllNamespacesResponse(response ListCoreV1EndpointsForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1EndpointsForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1EndpointsForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1EndpointsForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1EndpointsForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1EndpointsForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1EndpointsForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/endpoints: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1EventForAllNamespacesResponse(response ListCoreV1EventForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1EventForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1EventForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1EventForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1EventForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1EventForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1EventForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/events: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1LimitRangeForAllNamespacesResponse(response ListCoreV1LimitRangeForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1LimitRangeForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1LimitRangeForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1LimitRangeForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1LimitRangeForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1LimitRangeForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1LimitRangeForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/limitranges: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespaceResponse(response ListCoreV1NamespaceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1NamespaceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespaceApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1NamespaceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1NamespaceApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1NamespaceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1NamespaceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedConfigMapResponse(response ListCoreV1NamespacedConfigMapRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1NamespacedConfigMapApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedConfigMapApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedConfigMapApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1NamespacedConfigMapApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedConfigMapApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1NamespacedConfigMapUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/configmaps: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedEndpointsResponse(response ListCoreV1NamespacedEndpointsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1NamespacedEndpointsApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedEndpointsApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedEndpointsApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1NamespacedEndpointsApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedEndpointsApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1NamespacedEndpointsUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/endpoints: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedEventResponse(response ListCoreV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedEventApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1NamespacedEventApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/events: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedLimitRangeResponse(response ListCoreV1NamespacedLimitRangeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1NamespacedLimitRangeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedLimitRangeApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedLimitRangeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1NamespacedLimitRangeApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedLimitRangeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1NamespacedLimitRangeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/limitranges: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedPersistentVolumeClaimResponse(response ListCoreV1NamespacedPersistentVolumeClaimRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedPersistentVolumeClaimApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedPersistentVolumeClaimApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1NamespacedPersistentVolumeClaimApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedPersistentVolumeClaimApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1NamespacedPersistentVolumeClaimUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/persistentvolumeclaims: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedPodResponse(response ListCoreV1NamespacedPodRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1NamespacedPodApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedPodApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedPodApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1NamespacedPodApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedPodApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1NamespacedPodUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedPodTemplateResponse(response ListCoreV1NamespacedPodTemplateRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1NamespacedPodTemplateApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedPodTemplateApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedPodTemplateApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1NamespacedPodTemplateApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedPodTemplateApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1NamespacedPodTemplateUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/podtemplates: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedReplicationControllerResponse(response ListCoreV1NamespacedReplicationControllerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1NamespacedReplicationControllerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedReplicationControllerApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedReplicationControllerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1NamespacedReplicationControllerApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedReplicationControllerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1NamespacedReplicationControllerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/replicationcontrollers: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedResourceQuotaResponse(response ListCoreV1NamespacedResourceQuotaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1NamespacedResourceQuotaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedResourceQuotaApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedResourceQuotaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1NamespacedResourceQuotaApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedResourceQuotaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1NamespacedResourceQuotaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/resourcequotas: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedSecretResponse(response ListCoreV1NamespacedSecretRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1NamespacedSecretApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedSecretApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedSecretApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1NamespacedSecretApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedSecretApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1NamespacedSecretUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/secrets: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedServiceResponse(response ListCoreV1NamespacedServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1NamespacedServiceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedServiceApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedServiceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1NamespacedServiceApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedServiceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1NamespacedServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedServiceAccountResponse(response ListCoreV1NamespacedServiceAccountRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1NamespacedServiceAccountApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedServiceAccountApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedServiceAccountApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1NamespacedServiceAccountApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1NamespacedServiceAccountApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1NamespacedServiceAccountUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/serviceaccounts: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NodeResponse(response ListCoreV1NodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1NodeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NodeApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1NodeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1NodeApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1NodeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1NodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1PersistentVolumeResponse(response ListCoreV1PersistentVolumeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1PersistentVolumeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1PersistentVolumeApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1PersistentVolumeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1PersistentVolumeApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1PersistentVolumeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1PersistentVolumeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/persistentvolumes: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1PersistentVolumeClaimForAllNamespacesResponse(response ListCoreV1PersistentVolumeClaimForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1PersistentVolumeClaimForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/persistentvolumeclaims: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1PodForAllNamespacesResponse(response ListCoreV1PodForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1PodForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1PodForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1PodForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1PodForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1PodForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1PodForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/pods: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1PodTemplateForAllNamespacesResponse(response ListCoreV1PodTemplateForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1PodTemplateForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1PodTemplateForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1PodTemplateForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1PodTemplateForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1PodTemplateForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1PodTemplateForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/podtemplates: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1ReplicationControllerForAllNamespacesResponse(response ListCoreV1ReplicationControllerForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1ReplicationControllerForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1ReplicationControllerForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1ReplicationControllerForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1ReplicationControllerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1ReplicationControllerForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1ReplicationControllerForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/replicationcontrollers: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1ResourceQuotaForAllNamespacesResponse(response ListCoreV1ResourceQuotaForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1ResourceQuotaForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1ResourceQuotaForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1ResourceQuotaForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1ResourceQuotaForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1ResourceQuotaForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1ResourceQuotaForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/resourcequotas: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1SecretForAllNamespacesResponse(response ListCoreV1SecretForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1SecretForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1SecretForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1SecretForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1SecretForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1SecretForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1SecretForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/secrets: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1ServiceAccountForAllNamespacesResponse(response ListCoreV1ServiceAccountForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1ServiceAccountForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1ServiceAccountForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1ServiceAccountForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1ServiceAccountForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1ServiceAccountForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1ServiceAccountForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/serviceaccounts: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1ServiceForAllNamespacesResponse(response ListCoreV1ServiceForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCoreV1ServiceForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1ServiceForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListCoreV1ServiceForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListCoreV1ServiceForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListCoreV1ServiceForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListCoreV1ServiceForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/services: unexpected response type: %T`, response)
	}
}

func encodeListDiscoveryV1EndpointSliceForAllNamespacesResponse(response ListDiscoveryV1EndpointSliceForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListDiscoveryV1EndpointSliceForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListDiscoveryV1EndpointSliceForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListDiscoveryV1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListDiscoveryV1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListDiscoveryV1EndpointSliceForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListDiscoveryV1EndpointSliceForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1/endpointslices: unexpected response type: %T`, response)
	}
}

func encodeListDiscoveryV1NamespacedEndpointSliceResponse(response ListDiscoveryV1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListDiscoveryV1NamespacedEndpointSliceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListDiscoveryV1NamespacedEndpointSliceApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListDiscoveryV1NamespacedEndpointSliceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListDiscoveryV1NamespacedEndpointSliceApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListDiscoveryV1NamespacedEndpointSliceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListDiscoveryV1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices: unexpected response type: %T`, response)
	}
}

func encodeListDiscoveryV1beta1EndpointSliceForAllNamespacesResponse(response ListDiscoveryV1beta1EndpointSliceForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListDiscoveryV1beta1EndpointSliceForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1beta1/endpointslices: unexpected response type: %T`, response)
	}
}

func encodeListDiscoveryV1beta1NamespacedEndpointSliceResponse(response ListDiscoveryV1beta1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListDiscoveryV1beta1NamespacedEndpointSliceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListDiscoveryV1beta1NamespacedEndpointSliceApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListDiscoveryV1beta1NamespacedEndpointSliceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListDiscoveryV1beta1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices: unexpected response type: %T`, response)
	}
}

func encodeListEventsV1EventForAllNamespacesResponse(response ListEventsV1EventForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListEventsV1EventForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListEventsV1EventForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListEventsV1EventForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListEventsV1EventForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListEventsV1EventForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListEventsV1EventForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1/events: unexpected response type: %T`, response)
	}
}

func encodeListEventsV1NamespacedEventResponse(response ListEventsV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListEventsV1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListEventsV1NamespacedEventApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListEventsV1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListEventsV1NamespacedEventApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListEventsV1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListEventsV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1/namespaces/{namespace}/events: unexpected response type: %T`, response)
	}
}

func encodeListEventsV1beta1EventForAllNamespacesResponse(response ListEventsV1beta1EventForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListEventsV1beta1EventForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListEventsV1beta1EventForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListEventsV1beta1EventForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListEventsV1beta1EventForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListEventsV1beta1EventForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListEventsV1beta1EventForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1beta1/events: unexpected response type: %T`, response)
	}
}

func encodeListEventsV1beta1NamespacedEventResponse(response ListEventsV1beta1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListEventsV1beta1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListEventsV1beta1NamespacedEventApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListEventsV1beta1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListEventsV1beta1NamespacedEventApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListEventsV1beta1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListEventsV1beta1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events: unexpected response type: %T`, response)
	}
}

func encodeListFlowcontrolApiserverV1beta1FlowSchemaResponse(response ListFlowcontrolApiserverV1beta1FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListFlowcontrolApiserverV1beta1FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas: unexpected response type: %T`, response)
	}
}

func encodeListFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(response ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations: unexpected response type: %T`, response)
	}
}

func encodeListFlowcontrolApiserverV1beta2FlowSchemaResponse(response ListFlowcontrolApiserverV1beta2FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListFlowcontrolApiserverV1beta2FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas: unexpected response type: %T`, response)
	}
}

func encodeListFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(response ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations: unexpected response type: %T`, response)
	}
}

func encodeListInternalApiserverV1alpha1StorageVersionResponse(response ListInternalApiserverV1alpha1StorageVersionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListInternalApiserverV1alpha1StorageVersionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListInternalApiserverV1alpha1StorageVersionApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListInternalApiserverV1alpha1StorageVersionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListInternalApiserverV1alpha1StorageVersionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/internal.apiserver.k8s.io/v1alpha1/storageversions: unexpected response type: %T`, response)
	}
}

func encodeListNetworkingV1IngressClassResponse(response ListNetworkingV1IngressClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListNetworkingV1IngressClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListNetworkingV1IngressClassApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListNetworkingV1IngressClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListNetworkingV1IngressClassApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListNetworkingV1IngressClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListNetworkingV1IngressClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/ingressclasses: unexpected response type: %T`, response)
	}
}

func encodeListNetworkingV1IngressForAllNamespacesResponse(response ListNetworkingV1IngressForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListNetworkingV1IngressForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListNetworkingV1IngressForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListNetworkingV1IngressForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListNetworkingV1IngressForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListNetworkingV1IngressForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListNetworkingV1IngressForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/ingresses: unexpected response type: %T`, response)
	}
}

func encodeListNetworkingV1NamespacedIngressResponse(response ListNetworkingV1NamespacedIngressRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListNetworkingV1NamespacedIngressApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListNetworkingV1NamespacedIngressApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListNetworkingV1NamespacedIngressApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListNetworkingV1NamespacedIngressApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListNetworkingV1NamespacedIngressApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListNetworkingV1NamespacedIngressUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses: unexpected response type: %T`, response)
	}
}

func encodeListNetworkingV1NamespacedNetworkPolicyResponse(response ListNetworkingV1NamespacedNetworkPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListNetworkingV1NamespacedNetworkPolicyApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListNetworkingV1NamespacedNetworkPolicyApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListNetworkingV1NamespacedNetworkPolicyApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListNetworkingV1NamespacedNetworkPolicyApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListNetworkingV1NamespacedNetworkPolicyApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListNetworkingV1NamespacedNetworkPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies: unexpected response type: %T`, response)
	}
}

func encodeListNetworkingV1NetworkPolicyForAllNamespacesResponse(response ListNetworkingV1NetworkPolicyForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListNetworkingV1NetworkPolicyForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListNetworkingV1NetworkPolicyForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListNetworkingV1NetworkPolicyForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListNetworkingV1NetworkPolicyForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListNetworkingV1NetworkPolicyForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListNetworkingV1NetworkPolicyForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/networkpolicies: unexpected response type: %T`, response)
	}
}

func encodeListNodeV1RuntimeClassResponse(response ListNodeV1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListNodeV1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListNodeV1RuntimeClassApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListNodeV1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListNodeV1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListNodeV1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListNodeV1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1/runtimeclasses: unexpected response type: %T`, response)
	}
}

func encodeListNodeV1alpha1RuntimeClassResponse(response ListNodeV1alpha1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListNodeV1alpha1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListNodeV1alpha1RuntimeClassApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListNodeV1alpha1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListNodeV1alpha1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1alpha1/runtimeclasses: unexpected response type: %T`, response)
	}
}

func encodeListNodeV1beta1RuntimeClassResponse(response ListNodeV1beta1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListNodeV1beta1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListNodeV1beta1RuntimeClassApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListNodeV1beta1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListNodeV1beta1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1beta1/runtimeclasses: unexpected response type: %T`, response)
	}
}

func encodeListPolicyV1NamespacedPodDisruptionBudgetResponse(response ListPolicyV1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListPolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListPolicyV1NamespacedPodDisruptionBudgetApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListPolicyV1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListPolicyV1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListPolicyV1NamespacedPodDisruptionBudgetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListPolicyV1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets: unexpected response type: %T`, response)
	}
}

func encodeListPolicyV1PodDisruptionBudgetForAllNamespacesResponse(response ListPolicyV1PodDisruptionBudgetForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListPolicyV1PodDisruptionBudgetForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1/poddisruptionbudgets: unexpected response type: %T`, response)
	}
}

func encodeListPolicyV1beta1NamespacedPodDisruptionBudgetResponse(response ListPolicyV1beta1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListPolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListPolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListPolicyV1beta1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListPolicyV1beta1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListPolicyV1beta1NamespacedPodDisruptionBudgetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets: unexpected response type: %T`, response)
	}
}

func encodeListPolicyV1beta1PodDisruptionBudgetForAllNamespacesResponse(response ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/poddisruptionbudgets: unexpected response type: %T`, response)
	}
}

func encodeListPolicyV1beta1PodSecurityPolicyResponse(response ListPolicyV1beta1PodSecurityPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListPolicyV1beta1PodSecurityPolicyApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListPolicyV1beta1PodSecurityPolicyApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListPolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListPolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListPolicyV1beta1PodSecurityPolicyApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListPolicyV1beta1PodSecurityPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/podsecuritypolicies: unexpected response type: %T`, response)
	}
}

func encodeListRbacAuthorizationV1ClusterRoleResponse(response ListRbacAuthorizationV1ClusterRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListRbacAuthorizationV1ClusterRoleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListRbacAuthorizationV1ClusterRoleApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListRbacAuthorizationV1ClusterRoleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListRbacAuthorizationV1ClusterRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/clusterroles: unexpected response type: %T`, response)
	}
}

func encodeListRbacAuthorizationV1ClusterRoleBindingResponse(response ListRbacAuthorizationV1ClusterRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListRbacAuthorizationV1ClusterRoleBindingApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListRbacAuthorizationV1ClusterRoleBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListRbacAuthorizationV1ClusterRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/clusterrolebindings: unexpected response type: %T`, response)
	}
}

func encodeListRbacAuthorizationV1NamespacedRoleResponse(response ListRbacAuthorizationV1NamespacedRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListRbacAuthorizationV1NamespacedRoleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListRbacAuthorizationV1NamespacedRoleApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListRbacAuthorizationV1NamespacedRoleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListRbacAuthorizationV1NamespacedRoleApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListRbacAuthorizationV1NamespacedRoleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListRbacAuthorizationV1NamespacedRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles: unexpected response type: %T`, response)
	}
}

func encodeListRbacAuthorizationV1NamespacedRoleBindingResponse(response ListRbacAuthorizationV1NamespacedRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListRbacAuthorizationV1NamespacedRoleBindingApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListRbacAuthorizationV1NamespacedRoleBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListRbacAuthorizationV1NamespacedRoleBindingApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListRbacAuthorizationV1NamespacedRoleBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListRbacAuthorizationV1NamespacedRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings: unexpected response type: %T`, response)
	}
}

func encodeListRbacAuthorizationV1RoleBindingForAllNamespacesResponse(response ListRbacAuthorizationV1RoleBindingForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListRbacAuthorizationV1RoleBindingForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/rolebindings: unexpected response type: %T`, response)
	}
}

func encodeListRbacAuthorizationV1RoleForAllNamespacesResponse(response ListRbacAuthorizationV1RoleForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListRbacAuthorizationV1RoleForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListRbacAuthorizationV1RoleForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListRbacAuthorizationV1RoleForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListRbacAuthorizationV1RoleForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListRbacAuthorizationV1RoleForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListRbacAuthorizationV1RoleForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/roles: unexpected response type: %T`, response)
	}
}

func encodeListSchedulingV1PriorityClassResponse(response ListSchedulingV1PriorityClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListSchedulingV1PriorityClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListSchedulingV1PriorityClassApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListSchedulingV1PriorityClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListSchedulingV1PriorityClassApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListSchedulingV1PriorityClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListSchedulingV1PriorityClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/scheduling.k8s.io/v1/priorityclasses: unexpected response type: %T`, response)
	}
}

func encodeListStorageV1CSIDriverResponse(response ListStorageV1CSIDriverRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListStorageV1CSIDriverApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListStorageV1CSIDriverApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListStorageV1CSIDriverApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListStorageV1CSIDriverApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListStorageV1CSIDriverApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListStorageV1CSIDriverUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/csidrivers: unexpected response type: %T`, response)
	}
}

func encodeListStorageV1CSINodeResponse(response ListStorageV1CSINodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListStorageV1CSINodeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListStorageV1CSINodeApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListStorageV1CSINodeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListStorageV1CSINodeApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListStorageV1CSINodeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListStorageV1CSINodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/csinodes: unexpected response type: %T`, response)
	}
}

func encodeListStorageV1StorageClassResponse(response ListStorageV1StorageClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListStorageV1StorageClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListStorageV1StorageClassApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListStorageV1StorageClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListStorageV1StorageClassApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListStorageV1StorageClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListStorageV1StorageClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/storageclasses: unexpected response type: %T`, response)
	}
}

func encodeListStorageV1VolumeAttachmentResponse(response ListStorageV1VolumeAttachmentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListStorageV1VolumeAttachmentApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListStorageV1VolumeAttachmentApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListStorageV1VolumeAttachmentApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListStorageV1VolumeAttachmentApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListStorageV1VolumeAttachmentApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListStorageV1VolumeAttachmentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/volumeattachments: unexpected response type: %T`, response)
	}
}

func encodeListStorageV1alpha1CSIStorageCapacityForAllNamespacesResponse(response ListStorageV1alpha1CSIStorageCapacityForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListStorageV1alpha1CSIStorageCapacityForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1alpha1/csistoragecapacities: unexpected response type: %T`, response)
	}
}

func encodeListStorageV1alpha1NamespacedCSIStorageCapacityResponse(response ListStorageV1alpha1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListStorageV1alpha1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListStorageV1alpha1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListStorageV1alpha1NamespacedCSIStorageCapacityApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities: unexpected response type: %T`, response)
	}
}

func encodeListStorageV1beta1CSIStorageCapacityForAllNamespacesResponse(response ListStorageV1beta1CSIStorageCapacityForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListStorageV1beta1CSIStorageCapacityForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1beta1/csistoragecapacities: unexpected response type: %T`, response)
	}
}

func encodeListStorageV1beta1NamespacedCSIStorageCapacityResponse(response ListStorageV1beta1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *ListStorageV1beta1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ListStorageV1beta1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *ListStorageV1beta1NamespacedCSIStorageCapacityApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ListStorageV1beta1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities: unexpected response type: %T`, response)
	}
}

func encodeLogFileHandlerResponse(response LogFileHandlerUnauthorized, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(401)
	return nil
}

func encodeLogFileListHandlerResponse(response LogFileListHandlerUnauthorized, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(401)
	return nil
}

func encodePatchAdmissionregistrationV1MutatingWebhookConfigurationResponse(response PatchAdmissionregistrationV1MutatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchAdmissionregistrationV1ValidatingWebhookConfigurationResponse(response PatchAdmissionregistrationV1ValidatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchApiextensionsV1CustomResourceDefinitionResponse(response PatchApiextensionsV1CustomResourceDefinitionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchApiextensionsV1CustomResourceDefinitionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchApiextensionsV1CustomResourceDefinitionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchApiextensionsV1CustomResourceDefinitionApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchApiextensionsV1CustomResourceDefinitionApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchApiextensionsV1CustomResourceDefinitionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchApiextensionsV1CustomResourceDefinitionStatusResponse(response PatchApiextensionsV1CustomResourceDefinitionStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchApiextensionsV1CustomResourceDefinitionStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchApiextensionsV1CustomResourceDefinitionStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchApiextensionsV1CustomResourceDefinitionStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchApiextensionsV1CustomResourceDefinitionStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchApiextensionsV1CustomResourceDefinitionStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchApiextensionsV1CustomResourceDefinitionStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchApiextensionsV1CustomResourceDefinitionStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchApiregistrationV1APIServiceResponse(response PatchApiregistrationV1APIServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchApiregistrationV1APIServiceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchApiregistrationV1APIServiceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchApiregistrationV1APIServiceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchApiregistrationV1APIServiceApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchApiregistrationV1APIServiceApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchApiregistrationV1APIServiceApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchApiregistrationV1APIServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiregistration.k8s.io/v1/apiservices/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchApiregistrationV1APIServiceStatusResponse(response PatchApiregistrationV1APIServiceStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchApiregistrationV1APIServiceStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchApiregistrationV1APIServiceStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchApiregistrationV1APIServiceStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchApiregistrationV1APIServiceStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchApiregistrationV1APIServiceStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchApiregistrationV1APIServiceStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchApiregistrationV1APIServiceStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiregistration.k8s.io/v1/apiservices/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchAppsV1NamespacedControllerRevisionResponse(response PatchAppsV1NamespacedControllerRevisionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAppsV1NamespacedControllerRevisionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedControllerRevisionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedControllerRevisionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedControllerRevisionApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedControllerRevisionApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedControllerRevisionApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedControllerRevisionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchAppsV1NamespacedDaemonSetResponse(response PatchAppsV1NamespacedDaemonSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAppsV1NamespacedDaemonSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedDaemonSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedDaemonSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedDaemonSetApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedDaemonSetApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedDaemonSetApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedDaemonSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchAppsV1NamespacedDaemonSetStatusResponse(response PatchAppsV1NamespacedDaemonSetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAppsV1NamespacedDaemonSetStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedDaemonSetStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedDaemonSetStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedDaemonSetStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedDaemonSetStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedDaemonSetStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedDaemonSetStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchAppsV1NamespacedDeploymentResponse(response PatchAppsV1NamespacedDeploymentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAppsV1NamespacedDeploymentApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedDeploymentApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedDeploymentApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedDeploymentApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedDeploymentApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedDeploymentApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedDeploymentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/deployments/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchAppsV1NamespacedDeploymentScaleResponse(response PatchAppsV1NamespacedDeploymentScaleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAppsV1NamespacedDeploymentScaleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedDeploymentScaleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedDeploymentScaleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedDeploymentScaleApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedDeploymentScaleApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedDeploymentScaleApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedDeploymentScaleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale: unexpected response type: %T`, response)
	}
}

func encodePatchAppsV1NamespacedDeploymentStatusResponse(response PatchAppsV1NamespacedDeploymentStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAppsV1NamespacedDeploymentStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedDeploymentStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedDeploymentStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedDeploymentStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedDeploymentStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedDeploymentStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedDeploymentStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchAppsV1NamespacedReplicaSetResponse(response PatchAppsV1NamespacedReplicaSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAppsV1NamespacedReplicaSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedReplicaSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedReplicaSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedReplicaSetApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedReplicaSetApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedReplicaSetApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedReplicaSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/replicasets/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchAppsV1NamespacedReplicaSetScaleResponse(response PatchAppsV1NamespacedReplicaSetScaleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAppsV1NamespacedReplicaSetScaleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedReplicaSetScaleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedReplicaSetScaleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedReplicaSetScaleApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedReplicaSetScaleApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedReplicaSetScaleApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedReplicaSetScaleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale: unexpected response type: %T`, response)
	}
}

func encodePatchAppsV1NamespacedReplicaSetStatusResponse(response PatchAppsV1NamespacedReplicaSetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAppsV1NamespacedReplicaSetStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedReplicaSetStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedReplicaSetStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedReplicaSetStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedReplicaSetStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedReplicaSetStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedReplicaSetStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchAppsV1NamespacedStatefulSetResponse(response PatchAppsV1NamespacedStatefulSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAppsV1NamespacedStatefulSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedStatefulSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedStatefulSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedStatefulSetApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedStatefulSetApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedStatefulSetApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedStatefulSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchAppsV1NamespacedStatefulSetScaleResponse(response PatchAppsV1NamespacedStatefulSetScaleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAppsV1NamespacedStatefulSetScaleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedStatefulSetScaleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedStatefulSetScaleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedStatefulSetScaleApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedStatefulSetScaleApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedStatefulSetScaleApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedStatefulSetScaleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale: unexpected response type: %T`, response)
	}
}

func encodePatchAppsV1NamespacedStatefulSetStatusResponse(response PatchAppsV1NamespacedStatefulSetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAppsV1NamespacedStatefulSetStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedStatefulSetStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedStatefulSetStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedStatefulSetStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAppsV1NamespacedStatefulSetStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAppsV1NamespacedStatefulSetStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAppsV1NamespacedStatefulSetStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchAutoscalingV1NamespacedHorizontalPodAutoscalerResponse(response PatchAutoscalingV1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse(response PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse(response PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse(response PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerResponse(response PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusResponse(response PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchBatchV1NamespacedCronJobResponse(response PatchBatchV1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchBatchV1NamespacedCronJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchBatchV1NamespacedCronJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchBatchV1NamespacedCronJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchBatchV1NamespacedCronJobApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchBatchV1NamespacedCronJobApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchBatchV1NamespacedCronJobApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchBatchV1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchBatchV1NamespacedCronJobStatusResponse(response PatchBatchV1NamespacedCronJobStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchBatchV1NamespacedCronJobStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchBatchV1NamespacedCronJobStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchBatchV1NamespacedCronJobStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchBatchV1NamespacedCronJobStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchBatchV1NamespacedCronJobStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchBatchV1NamespacedCronJobStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchBatchV1NamespacedCronJobStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchBatchV1NamespacedJobResponse(response PatchBatchV1NamespacedJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchBatchV1NamespacedJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchBatchV1NamespacedJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchBatchV1NamespacedJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchBatchV1NamespacedJobApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchBatchV1NamespacedJobApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchBatchV1NamespacedJobApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchBatchV1NamespacedJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/jobs/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchBatchV1NamespacedJobStatusResponse(response PatchBatchV1NamespacedJobStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchBatchV1NamespacedJobStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchBatchV1NamespacedJobStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchBatchV1NamespacedJobStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchBatchV1NamespacedJobStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchBatchV1NamespacedJobStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchBatchV1NamespacedJobStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchBatchV1NamespacedJobStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchBatchV1beta1NamespacedCronJobResponse(response PatchBatchV1beta1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchBatchV1beta1NamespacedCronJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchBatchV1beta1NamespacedCronJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchBatchV1beta1NamespacedCronJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchBatchV1beta1NamespacedCronJobApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchBatchV1beta1NamespacedCronJobApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchBatchV1beta1NamespacedCronJobApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchBatchV1beta1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchBatchV1beta1NamespacedCronJobStatusResponse(response PatchBatchV1beta1NamespacedCronJobStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchBatchV1beta1NamespacedCronJobStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchBatchV1beta1NamespacedCronJobStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchBatchV1beta1NamespacedCronJobStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchBatchV1beta1NamespacedCronJobStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchBatchV1beta1NamespacedCronJobStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchBatchV1beta1NamespacedCronJobStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchBatchV1beta1NamespacedCronJobStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchCertificatesV1CertificateSigningRequestResponse(response PatchCertificatesV1CertificateSigningRequestRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCertificatesV1CertificateSigningRequestApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCertificatesV1CertificateSigningRequestApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCertificatesV1CertificateSigningRequestApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCertificatesV1CertificateSigningRequestApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCertificatesV1CertificateSigningRequestUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchCertificatesV1CertificateSigningRequestApprovalResponse(response PatchCertificatesV1CertificateSigningRequestApprovalRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCertificatesV1CertificateSigningRequestApprovalApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCertificatesV1CertificateSigningRequestApprovalApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCertificatesV1CertificateSigningRequestApprovalApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCertificatesV1CertificateSigningRequestApprovalApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCertificatesV1CertificateSigningRequestApprovalApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCertificatesV1CertificateSigningRequestApprovalApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCertificatesV1CertificateSigningRequestApprovalUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval: unexpected response type: %T`, response)
	}
}

func encodePatchCertificatesV1CertificateSigningRequestStatusResponse(response PatchCertificatesV1CertificateSigningRequestStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCertificatesV1CertificateSigningRequestStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCertificatesV1CertificateSigningRequestStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCertificatesV1CertificateSigningRequestStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCertificatesV1CertificateSigningRequestStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCertificatesV1CertificateSigningRequestStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCertificatesV1CertificateSigningRequestStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCertificatesV1CertificateSigningRequestStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchCoordinationV1NamespacedLeaseResponse(response PatchCoordinationV1NamespacedLeaseRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoordinationV1NamespacedLeaseApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoordinationV1NamespacedLeaseApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoordinationV1NamespacedLeaseApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoordinationV1NamespacedLeaseApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoordinationV1NamespacedLeaseApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoordinationV1NamespacedLeaseApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoordinationV1NamespacedLeaseUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespaceResponse(response PatchCoreV1NamespaceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespaceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespaceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespaceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespaceApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespaceApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespaceApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespaceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespaceStatusResponse(response PatchCoreV1NamespaceStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespaceStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespaceStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespaceStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespaceStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespaceStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespaceStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespaceStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedConfigMapResponse(response PatchCoreV1NamespacedConfigMapRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedConfigMapApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedConfigMapApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedConfigMapApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedConfigMapApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedConfigMapApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedConfigMapApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedConfigMapUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/configmaps/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedEndpointsResponse(response PatchCoreV1NamespacedEndpointsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedEndpointsApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedEndpointsApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedEndpointsApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedEndpointsApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedEndpointsApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedEndpointsApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedEndpointsUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/endpoints/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedEventResponse(response PatchCoreV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedEventApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedEventApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedEventApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/events/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedLimitRangeResponse(response PatchCoreV1NamespacedLimitRangeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedLimitRangeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedLimitRangeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedLimitRangeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedLimitRangeApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedLimitRangeApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedLimitRangeApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedLimitRangeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/limitranges/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedPersistentVolumeClaimResponse(response PatchCoreV1NamespacedPersistentVolumeClaimRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedPersistentVolumeClaimApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedPersistentVolumeClaimApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedPersistentVolumeClaimApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedPersistentVolumeClaimApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedPersistentVolumeClaimApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedPersistentVolumeClaimUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedPersistentVolumeClaimStatusResponse(response PatchCoreV1NamespacedPersistentVolumeClaimStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedPersistentVolumeClaimStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedPersistentVolumeClaimStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedPersistentVolumeClaimStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedPersistentVolumeClaimStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedPersistentVolumeClaimStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedPersistentVolumeClaimStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedPersistentVolumeClaimStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedPodResponse(response PatchCoreV1NamespacedPodRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedPodApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedPodApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedPodApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedPodApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedPodApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedPodApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedPodUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedPodEphemeralcontainersResponse(response PatchCoreV1NamespacedPodEphemeralcontainersRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedPodEphemeralcontainersApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedPodEphemeralcontainersApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedPodEphemeralcontainersApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedPodEphemeralcontainersApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedPodEphemeralcontainersApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedPodEphemeralcontainersApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedPodEphemeralcontainersUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedPodStatusResponse(response PatchCoreV1NamespacedPodStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedPodStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedPodStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedPodStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedPodStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedPodStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedPodStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedPodStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedPodTemplateResponse(response PatchCoreV1NamespacedPodTemplateRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedPodTemplateApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedPodTemplateApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedPodTemplateApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedPodTemplateApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedPodTemplateApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedPodTemplateApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedPodTemplateUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/podtemplates/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedReplicationControllerResponse(response PatchCoreV1NamespacedReplicationControllerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedReplicationControllerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedReplicationControllerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedReplicationControllerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedReplicationControllerApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedReplicationControllerApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedReplicationControllerApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedReplicationControllerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/replicationcontrollers/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedReplicationControllerScaleResponse(response PatchCoreV1NamespacedReplicationControllerScaleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedReplicationControllerScaleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedReplicationControllerScaleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedReplicationControllerScaleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedReplicationControllerScaleApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedReplicationControllerScaleApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedReplicationControllerScaleApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedReplicationControllerScaleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedReplicationControllerStatusResponse(response PatchCoreV1NamespacedReplicationControllerStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedReplicationControllerStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedReplicationControllerStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedReplicationControllerStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedReplicationControllerStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedReplicationControllerStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedReplicationControllerStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedReplicationControllerStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedResourceQuotaResponse(response PatchCoreV1NamespacedResourceQuotaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedResourceQuotaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedResourceQuotaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedResourceQuotaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedResourceQuotaApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedResourceQuotaApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedResourceQuotaApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedResourceQuotaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/resourcequotas/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedResourceQuotaStatusResponse(response PatchCoreV1NamespacedResourceQuotaStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedResourceQuotaStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedResourceQuotaStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedResourceQuotaStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedResourceQuotaStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedResourceQuotaStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedResourceQuotaStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedResourceQuotaStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/resourcequotas/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedSecretResponse(response PatchCoreV1NamespacedSecretRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedSecretApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedSecretApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedSecretApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedSecretApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedSecretApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedSecretApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedSecretUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/secrets/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedServiceResponse(response PatchCoreV1NamespacedServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedServiceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedServiceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedServiceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedServiceApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedServiceApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedServiceApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedServiceAccountResponse(response PatchCoreV1NamespacedServiceAccountRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedServiceAccountApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedServiceAccountApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedServiceAccountApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedServiceAccountApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedServiceAccountApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedServiceAccountApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedServiceAccountUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/serviceaccounts/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NamespacedServiceStatusResponse(response PatchCoreV1NamespacedServiceStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NamespacedServiceStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedServiceStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedServiceStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedServiceStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NamespacedServiceStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NamespacedServiceStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NamespacedServiceStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NodeResponse(response PatchCoreV1NodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NodeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NodeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NodeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NodeApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NodeApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NodeApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1NodeStatusResponse(response PatchCoreV1NodeStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1NodeStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NodeStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NodeStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NodeStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1NodeStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1NodeStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1NodeStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1PersistentVolumeResponse(response PatchCoreV1PersistentVolumeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1PersistentVolumeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1PersistentVolumeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1PersistentVolumeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1PersistentVolumeApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1PersistentVolumeApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1PersistentVolumeApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1PersistentVolumeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/persistentvolumes/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchCoreV1PersistentVolumeStatusResponse(response PatchCoreV1PersistentVolumeStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchCoreV1PersistentVolumeStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1PersistentVolumeStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1PersistentVolumeStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1PersistentVolumeStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchCoreV1PersistentVolumeStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchCoreV1PersistentVolumeStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchCoreV1PersistentVolumeStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/persistentvolumes/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchDiscoveryV1NamespacedEndpointSliceResponse(response PatchDiscoveryV1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchDiscoveryV1NamespacedEndpointSliceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchDiscoveryV1NamespacedEndpointSliceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchDiscoveryV1NamespacedEndpointSliceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchDiscoveryV1NamespacedEndpointSliceApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchDiscoveryV1NamespacedEndpointSliceApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchDiscoveryV1NamespacedEndpointSliceApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchDiscoveryV1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchDiscoveryV1beta1NamespacedEndpointSliceResponse(response PatchDiscoveryV1beta1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchDiscoveryV1beta1NamespacedEndpointSliceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchDiscoveryV1beta1NamespacedEndpointSliceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchDiscoveryV1beta1NamespacedEndpointSliceApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchDiscoveryV1beta1NamespacedEndpointSliceApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchDiscoveryV1beta1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchEventsV1NamespacedEventResponse(response PatchEventsV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchEventsV1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchEventsV1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchEventsV1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchEventsV1NamespacedEventApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchEventsV1NamespacedEventApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchEventsV1NamespacedEventApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchEventsV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchEventsV1beta1NamespacedEventResponse(response PatchEventsV1beta1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchEventsV1beta1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchEventsV1beta1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchEventsV1beta1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchEventsV1beta1NamespacedEventApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchEventsV1beta1NamespacedEventApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchEventsV1beta1NamespacedEventApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchEventsV1beta1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchFlowcontrolApiserverV1beta1FlowSchemaResponse(response PatchFlowcontrolApiserverV1beta1FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta1FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchFlowcontrolApiserverV1beta1FlowSchemaStatusResponse(response PatchFlowcontrolApiserverV1beta1FlowSchemaStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta1FlowSchemaStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(response PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusResponse(response PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchFlowcontrolApiserverV1beta2FlowSchemaResponse(response PatchFlowcontrolApiserverV1beta2FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta2FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchFlowcontrolApiserverV1beta2FlowSchemaStatusResponse(response PatchFlowcontrolApiserverV1beta2FlowSchemaStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta2FlowSchemaStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(response PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusResponse(response PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchInternalApiserverV1alpha1StorageVersionResponse(response PatchInternalApiserverV1alpha1StorageVersionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchInternalApiserverV1alpha1StorageVersionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchInternalApiserverV1alpha1StorageVersionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchInternalApiserverV1alpha1StorageVersionApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchInternalApiserverV1alpha1StorageVersionApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchInternalApiserverV1alpha1StorageVersionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchInternalApiserverV1alpha1StorageVersionStatusResponse(response PatchInternalApiserverV1alpha1StorageVersionStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchInternalApiserverV1alpha1StorageVersionStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchInternalApiserverV1alpha1StorageVersionStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchInternalApiserverV1alpha1StorageVersionStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchInternalApiserverV1alpha1StorageVersionStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchInternalApiserverV1alpha1StorageVersionStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchInternalApiserverV1alpha1StorageVersionStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchInternalApiserverV1alpha1StorageVersionStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchNetworkingV1IngressClassResponse(response PatchNetworkingV1IngressClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchNetworkingV1IngressClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchNetworkingV1IngressClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchNetworkingV1IngressClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchNetworkingV1IngressClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchNetworkingV1IngressClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchNetworkingV1IngressClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchNetworkingV1IngressClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/ingressclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchNetworkingV1NamespacedIngressResponse(response PatchNetworkingV1NamespacedIngressRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchNetworkingV1NamespacedIngressApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchNetworkingV1NamespacedIngressApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchNetworkingV1NamespacedIngressApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchNetworkingV1NamespacedIngressApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchNetworkingV1NamespacedIngressApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchNetworkingV1NamespacedIngressApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchNetworkingV1NamespacedIngressUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchNetworkingV1NamespacedIngressStatusResponse(response PatchNetworkingV1NamespacedIngressStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchNetworkingV1NamespacedIngressStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchNetworkingV1NamespacedIngressStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchNetworkingV1NamespacedIngressStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchNetworkingV1NamespacedIngressStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchNetworkingV1NamespacedIngressStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchNetworkingV1NamespacedIngressStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchNetworkingV1NamespacedIngressStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchNetworkingV1NamespacedNetworkPolicyResponse(response PatchNetworkingV1NamespacedNetworkPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchNetworkingV1NamespacedNetworkPolicyApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchNetworkingV1NamespacedNetworkPolicyApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchNetworkingV1NamespacedNetworkPolicyApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchNetworkingV1NamespacedNetworkPolicyApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchNetworkingV1NamespacedNetworkPolicyApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchNetworkingV1NamespacedNetworkPolicyApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchNetworkingV1NamespacedNetworkPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchNodeV1RuntimeClassResponse(response PatchNodeV1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchNodeV1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchNodeV1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchNodeV1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchNodeV1RuntimeClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchNodeV1RuntimeClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchNodeV1RuntimeClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchNodeV1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1/runtimeclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchNodeV1alpha1RuntimeClassResponse(response PatchNodeV1alpha1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchNodeV1alpha1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchNodeV1alpha1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchNodeV1alpha1RuntimeClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchNodeV1alpha1RuntimeClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchNodeV1alpha1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1alpha1/runtimeclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchNodeV1beta1RuntimeClassResponse(response PatchNodeV1beta1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchNodeV1beta1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchNodeV1beta1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchNodeV1beta1RuntimeClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchNodeV1beta1RuntimeClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchNodeV1beta1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1beta1/runtimeclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchPolicyV1NamespacedPodDisruptionBudgetResponse(response PatchPolicyV1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchPolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchPolicyV1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchPolicyV1NamespacedPodDisruptionBudgetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchPolicyV1NamespacedPodDisruptionBudgetApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchPolicyV1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchPolicyV1NamespacedPodDisruptionBudgetApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchPolicyV1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchPolicyV1NamespacedPodDisruptionBudgetStatusResponse(response PatchPolicyV1NamespacedPodDisruptionBudgetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchPolicyV1NamespacedPodDisruptionBudgetStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchPolicyV1NamespacedPodDisruptionBudgetStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchPolicyV1NamespacedPodDisruptionBudgetStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchPolicyV1NamespacedPodDisruptionBudgetStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchPolicyV1NamespacedPodDisruptionBudgetStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchPolicyV1NamespacedPodDisruptionBudgetStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchPolicyV1NamespacedPodDisruptionBudgetStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchPolicyV1beta1NamespacedPodDisruptionBudgetResponse(response PatchPolicyV1beta1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchPolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchPolicyV1beta1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchPolicyV1beta1NamespacedPodDisruptionBudgetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchPolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchPolicyV1beta1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchPolicyV1beta1NamespacedPodDisruptionBudgetApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse(response PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchPolicyV1beta1PodSecurityPolicyResponse(response PatchPolicyV1beta1PodSecurityPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchPolicyV1beta1PodSecurityPolicyApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchPolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchPolicyV1beta1PodSecurityPolicyApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchPolicyV1beta1PodSecurityPolicyApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchPolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchPolicyV1beta1PodSecurityPolicyApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchPolicyV1beta1PodSecurityPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/podsecuritypolicies/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchRbacAuthorizationV1ClusterRoleResponse(response PatchRbacAuthorizationV1ClusterRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchRbacAuthorizationV1ClusterRoleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchRbacAuthorizationV1ClusterRoleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchRbacAuthorizationV1ClusterRoleApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchRbacAuthorizationV1ClusterRoleApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchRbacAuthorizationV1ClusterRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchRbacAuthorizationV1ClusterRoleBindingResponse(response PatchRbacAuthorizationV1ClusterRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchRbacAuthorizationV1ClusterRoleBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchRbacAuthorizationV1ClusterRoleBindingApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchRbacAuthorizationV1ClusterRoleBindingApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchRbacAuthorizationV1ClusterRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchRbacAuthorizationV1NamespacedRoleResponse(response PatchRbacAuthorizationV1NamespacedRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchRbacAuthorizationV1NamespacedRoleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchRbacAuthorizationV1NamespacedRoleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchRbacAuthorizationV1NamespacedRoleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchRbacAuthorizationV1NamespacedRoleApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchRbacAuthorizationV1NamespacedRoleApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchRbacAuthorizationV1NamespacedRoleApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchRbacAuthorizationV1NamespacedRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchRbacAuthorizationV1NamespacedRoleBindingResponse(response PatchRbacAuthorizationV1NamespacedRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchRbacAuthorizationV1NamespacedRoleBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchRbacAuthorizationV1NamespacedRoleBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchRbacAuthorizationV1NamespacedRoleBindingApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchRbacAuthorizationV1NamespacedRoleBindingApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchRbacAuthorizationV1NamespacedRoleBindingApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchRbacAuthorizationV1NamespacedRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchSchedulingV1PriorityClassResponse(response PatchSchedulingV1PriorityClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchSchedulingV1PriorityClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchSchedulingV1PriorityClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchSchedulingV1PriorityClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchSchedulingV1PriorityClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchSchedulingV1PriorityClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchSchedulingV1PriorityClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchSchedulingV1PriorityClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/scheduling.k8s.io/v1/priorityclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchStorageV1CSIDriverResponse(response PatchStorageV1CSIDriverRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchStorageV1CSIDriverApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchStorageV1CSIDriverApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchStorageV1CSIDriverApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchStorageV1CSIDriverApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchStorageV1CSIDriverApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchStorageV1CSIDriverApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchStorageV1CSIDriverUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/csidrivers/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchStorageV1CSINodeResponse(response PatchStorageV1CSINodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchStorageV1CSINodeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchStorageV1CSINodeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchStorageV1CSINodeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchStorageV1CSINodeApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchStorageV1CSINodeApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchStorageV1CSINodeApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchStorageV1CSINodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/csinodes/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchStorageV1StorageClassResponse(response PatchStorageV1StorageClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchStorageV1StorageClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchStorageV1StorageClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchStorageV1StorageClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchStorageV1StorageClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchStorageV1StorageClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchStorageV1StorageClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchStorageV1StorageClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/storageclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchStorageV1VolumeAttachmentResponse(response PatchStorageV1VolumeAttachmentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchStorageV1VolumeAttachmentApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchStorageV1VolumeAttachmentApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchStorageV1VolumeAttachmentApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchStorageV1VolumeAttachmentApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchStorageV1VolumeAttachmentApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchStorageV1VolumeAttachmentApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchStorageV1VolumeAttachmentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/volumeattachments/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchStorageV1VolumeAttachmentStatusResponse(response PatchStorageV1VolumeAttachmentStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchStorageV1VolumeAttachmentStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchStorageV1VolumeAttachmentStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchStorageV1VolumeAttachmentStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchStorageV1VolumeAttachmentStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchStorageV1VolumeAttachmentStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchStorageV1VolumeAttachmentStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchStorageV1VolumeAttachmentStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/volumeattachments/{name}/status: unexpected response type: %T`, response)
	}
}

func encodePatchStorageV1alpha1NamespacedCSIStorageCapacityResponse(response PatchStorageV1alpha1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchStorageV1alpha1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchStorageV1alpha1NamespacedCSIStorageCapacityApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchStorageV1alpha1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchStorageV1alpha1NamespacedCSIStorageCapacityApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities/{name}: unexpected response type: %T`, response)
	}
}

func encodePatchStorageV1beta1NamespacedCSIStorageCapacityResponse(response PatchStorageV1beta1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PatchStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchStorageV1beta1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchStorageV1beta1NamespacedCSIStorageCapacityApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *PatchStorageV1beta1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *PatchStorageV1beta1NamespacedCSIStorageCapacityApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *PatchStorageV1beta1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadAdmissionregistrationV1MutatingWebhookConfigurationResponse(response ReadAdmissionregistrationV1MutatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadAdmissionregistrationV1ValidatingWebhookConfigurationResponse(response ReadAdmissionregistrationV1ValidatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadApiextensionsV1CustomResourceDefinitionResponse(response ReadApiextensionsV1CustomResourceDefinitionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadApiextensionsV1CustomResourceDefinitionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadApiextensionsV1CustomResourceDefinitionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadApiextensionsV1CustomResourceDefinitionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadApiextensionsV1CustomResourceDefinitionStatusResponse(response ReadApiextensionsV1CustomResourceDefinitionStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadApiextensionsV1CustomResourceDefinitionStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadApiextensionsV1CustomResourceDefinitionStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadApiextensionsV1CustomResourceDefinitionStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadApiextensionsV1CustomResourceDefinitionStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadApiregistrationV1APIServiceResponse(response ReadApiregistrationV1APIServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadApiregistrationV1APIServiceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadApiregistrationV1APIServiceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadApiregistrationV1APIServiceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadApiregistrationV1APIServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiregistration.k8s.io/v1/apiservices/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadApiregistrationV1APIServiceStatusResponse(response ReadApiregistrationV1APIServiceStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadApiregistrationV1APIServiceStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadApiregistrationV1APIServiceStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadApiregistrationV1APIServiceStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadApiregistrationV1APIServiceStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiregistration.k8s.io/v1/apiservices/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedControllerRevisionResponse(response ReadAppsV1NamespacedControllerRevisionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAppsV1NamespacedControllerRevisionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedControllerRevisionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAppsV1NamespacedControllerRevisionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAppsV1NamespacedControllerRevisionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedDaemonSetResponse(response ReadAppsV1NamespacedDaemonSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAppsV1NamespacedDaemonSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedDaemonSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAppsV1NamespacedDaemonSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAppsV1NamespacedDaemonSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedDaemonSetStatusResponse(response ReadAppsV1NamespacedDaemonSetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAppsV1NamespacedDaemonSetStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedDaemonSetStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAppsV1NamespacedDaemonSetStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAppsV1NamespacedDaemonSetStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedDeploymentResponse(response ReadAppsV1NamespacedDeploymentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAppsV1NamespacedDeploymentApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedDeploymentApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAppsV1NamespacedDeploymentApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAppsV1NamespacedDeploymentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/deployments/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedDeploymentScaleResponse(response ReadAppsV1NamespacedDeploymentScaleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAppsV1NamespacedDeploymentScaleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedDeploymentScaleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAppsV1NamespacedDeploymentScaleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAppsV1NamespacedDeploymentScaleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedDeploymentStatusResponse(response ReadAppsV1NamespacedDeploymentStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAppsV1NamespacedDeploymentStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedDeploymentStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAppsV1NamespacedDeploymentStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAppsV1NamespacedDeploymentStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedReplicaSetResponse(response ReadAppsV1NamespacedReplicaSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAppsV1NamespacedReplicaSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedReplicaSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAppsV1NamespacedReplicaSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAppsV1NamespacedReplicaSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/replicasets/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedReplicaSetScaleResponse(response ReadAppsV1NamespacedReplicaSetScaleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAppsV1NamespacedReplicaSetScaleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedReplicaSetScaleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAppsV1NamespacedReplicaSetScaleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAppsV1NamespacedReplicaSetScaleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedReplicaSetStatusResponse(response ReadAppsV1NamespacedReplicaSetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAppsV1NamespacedReplicaSetStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedReplicaSetStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAppsV1NamespacedReplicaSetStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAppsV1NamespacedReplicaSetStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedStatefulSetResponse(response ReadAppsV1NamespacedStatefulSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAppsV1NamespacedStatefulSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedStatefulSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAppsV1NamespacedStatefulSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAppsV1NamespacedStatefulSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedStatefulSetScaleResponse(response ReadAppsV1NamespacedStatefulSetScaleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAppsV1NamespacedStatefulSetScaleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedStatefulSetScaleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAppsV1NamespacedStatefulSetScaleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAppsV1NamespacedStatefulSetScaleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedStatefulSetStatusResponse(response ReadAppsV1NamespacedStatefulSetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAppsV1NamespacedStatefulSetStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedStatefulSetStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAppsV1NamespacedStatefulSetStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAppsV1NamespacedStatefulSetStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadAutoscalingV1NamespacedHorizontalPodAutoscalerResponse(response ReadAutoscalingV1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse(response ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse(response ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse(response ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerResponse(response ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusResponse(response ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadBatchV1NamespacedCronJobResponse(response ReadBatchV1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadBatchV1NamespacedCronJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadBatchV1NamespacedCronJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadBatchV1NamespacedCronJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadBatchV1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadBatchV1NamespacedCronJobStatusResponse(response ReadBatchV1NamespacedCronJobStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadBatchV1NamespacedCronJobStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadBatchV1NamespacedCronJobStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadBatchV1NamespacedCronJobStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadBatchV1NamespacedCronJobStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadBatchV1NamespacedJobResponse(response ReadBatchV1NamespacedJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadBatchV1NamespacedJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadBatchV1NamespacedJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadBatchV1NamespacedJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadBatchV1NamespacedJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/jobs/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadBatchV1NamespacedJobStatusResponse(response ReadBatchV1NamespacedJobStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadBatchV1NamespacedJobStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadBatchV1NamespacedJobStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadBatchV1NamespacedJobStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadBatchV1NamespacedJobStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadBatchV1beta1NamespacedCronJobResponse(response ReadBatchV1beta1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadBatchV1beta1NamespacedCronJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadBatchV1beta1NamespacedCronJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadBatchV1beta1NamespacedCronJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadBatchV1beta1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadBatchV1beta1NamespacedCronJobStatusResponse(response ReadBatchV1beta1NamespacedCronJobStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadBatchV1beta1NamespacedCronJobStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadBatchV1beta1NamespacedCronJobStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadBatchV1beta1NamespacedCronJobStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadBatchV1beta1NamespacedCronJobStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadCertificatesV1CertificateSigningRequestResponse(response ReadCertificatesV1CertificateSigningRequestRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCertificatesV1CertificateSigningRequestApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCertificatesV1CertificateSigningRequestApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCertificatesV1CertificateSigningRequestUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCertificatesV1CertificateSigningRequestApprovalResponse(response ReadCertificatesV1CertificateSigningRequestApprovalRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCertificatesV1CertificateSigningRequestApprovalApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCertificatesV1CertificateSigningRequestApprovalApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCertificatesV1CertificateSigningRequestApprovalApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCertificatesV1CertificateSigningRequestApprovalUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval: unexpected response type: %T`, response)
	}
}

func encodeReadCertificatesV1CertificateSigningRequestStatusResponse(response ReadCertificatesV1CertificateSigningRequestStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCertificatesV1CertificateSigningRequestStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCertificatesV1CertificateSigningRequestStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCertificatesV1CertificateSigningRequestStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCertificatesV1CertificateSigningRequestStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadCoordinationV1NamespacedLeaseResponse(response ReadCoordinationV1NamespacedLeaseRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoordinationV1NamespacedLeaseApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoordinationV1NamespacedLeaseApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoordinationV1NamespacedLeaseApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoordinationV1NamespacedLeaseUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1ComponentStatusResponse(response ReadCoreV1ComponentStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1ComponentStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1ComponentStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1ComponentStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1ComponentStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/componentstatuses/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespaceResponse(response ReadCoreV1NamespaceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespaceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespaceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespaceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespaceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespaceStatusResponse(response ReadCoreV1NamespaceStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespaceStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespaceStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespaceStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespaceStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedConfigMapResponse(response ReadCoreV1NamespacedConfigMapRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedConfigMapApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedConfigMapApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedConfigMapApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedConfigMapUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/configmaps/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedEndpointsResponse(response ReadCoreV1NamespacedEndpointsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedEndpointsApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedEndpointsApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedEndpointsApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedEndpointsUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/endpoints/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedEventResponse(response ReadCoreV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/events/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedLimitRangeResponse(response ReadCoreV1NamespacedLimitRangeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedLimitRangeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedLimitRangeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedLimitRangeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedLimitRangeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/limitranges/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedPersistentVolumeClaimResponse(response ReadCoreV1NamespacedPersistentVolumeClaimRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedPersistentVolumeClaimApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedPersistentVolumeClaimApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedPersistentVolumeClaimUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedPersistentVolumeClaimStatusResponse(response ReadCoreV1NamespacedPersistentVolumeClaimStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedPersistentVolumeClaimStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedPersistentVolumeClaimStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedPersistentVolumeClaimStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedPersistentVolumeClaimStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedPodResponse(response ReadCoreV1NamespacedPodRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedPodApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedPodApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedPodApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedPodUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedPodEphemeralcontainersResponse(response ReadCoreV1NamespacedPodEphemeralcontainersRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedPodEphemeralcontainersApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedPodEphemeralcontainersApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedPodEphemeralcontainersApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedPodEphemeralcontainersUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedPodLogResponse(response ReadCoreV1NamespacedPodLogRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedPodLogOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedPodLogOKApplicationVndKubernetesProtobuf:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedPodLogOKApplicationYaml:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedPodLogOKTextPlain:
		w.Header().Set("Content-Type", "text/plain")
		w.WriteHeader(200)
		return errors.New(`text/plain encoder not implemented`)
	case *ReadCoreV1NamespacedPodLogUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/log: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedPodStatusResponse(response ReadCoreV1NamespacedPodStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedPodStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedPodStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedPodStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedPodStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedPodTemplateResponse(response ReadCoreV1NamespacedPodTemplateRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedPodTemplateApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedPodTemplateApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedPodTemplateApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedPodTemplateUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/podtemplates/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedReplicationControllerResponse(response ReadCoreV1NamespacedReplicationControllerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedReplicationControllerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedReplicationControllerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedReplicationControllerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedReplicationControllerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/replicationcontrollers/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedReplicationControllerScaleResponse(response ReadCoreV1NamespacedReplicationControllerScaleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedReplicationControllerScaleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedReplicationControllerScaleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedReplicationControllerScaleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedReplicationControllerScaleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedReplicationControllerStatusResponse(response ReadCoreV1NamespacedReplicationControllerStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedReplicationControllerStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedReplicationControllerStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedReplicationControllerStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedReplicationControllerStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedResourceQuotaResponse(response ReadCoreV1NamespacedResourceQuotaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedResourceQuotaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedResourceQuotaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedResourceQuotaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedResourceQuotaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/resourcequotas/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedResourceQuotaStatusResponse(response ReadCoreV1NamespacedResourceQuotaStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedResourceQuotaStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedResourceQuotaStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedResourceQuotaStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedResourceQuotaStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/resourcequotas/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedSecretResponse(response ReadCoreV1NamespacedSecretRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedSecretApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedSecretApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedSecretApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedSecretUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/secrets/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedServiceResponse(response ReadCoreV1NamespacedServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedServiceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedServiceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedServiceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedServiceAccountResponse(response ReadCoreV1NamespacedServiceAccountRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedServiceAccountApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedServiceAccountApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedServiceAccountApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedServiceAccountUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/serviceaccounts/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedServiceStatusResponse(response ReadCoreV1NamespacedServiceStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedServiceStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedServiceStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NamespacedServiceStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NamespacedServiceStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NodeResponse(response ReadCoreV1NodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NodeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NodeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NodeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NodeStatusResponse(response ReadCoreV1NodeStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NodeStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NodeStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1NodeStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1NodeStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1PersistentVolumeResponse(response ReadCoreV1PersistentVolumeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1PersistentVolumeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1PersistentVolumeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1PersistentVolumeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1PersistentVolumeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/persistentvolumes/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1PersistentVolumeStatusResponse(response ReadCoreV1PersistentVolumeStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1PersistentVolumeStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1PersistentVolumeStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadCoreV1PersistentVolumeStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadCoreV1PersistentVolumeStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/persistentvolumes/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadDiscoveryV1NamespacedEndpointSliceResponse(response ReadDiscoveryV1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadDiscoveryV1NamespacedEndpointSliceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadDiscoveryV1NamespacedEndpointSliceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadDiscoveryV1NamespacedEndpointSliceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadDiscoveryV1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadDiscoveryV1beta1NamespacedEndpointSliceResponse(response ReadDiscoveryV1beta1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadDiscoveryV1beta1NamespacedEndpointSliceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadDiscoveryV1beta1NamespacedEndpointSliceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadDiscoveryV1beta1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadEventsV1NamespacedEventResponse(response ReadEventsV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadEventsV1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadEventsV1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadEventsV1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadEventsV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadEventsV1beta1NamespacedEventResponse(response ReadEventsV1beta1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadEventsV1beta1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadEventsV1beta1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadEventsV1beta1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadEventsV1beta1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadFlowcontrolApiserverV1beta1FlowSchemaResponse(response ReadFlowcontrolApiserverV1beta1FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadFlowcontrolApiserverV1beta1FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadFlowcontrolApiserverV1beta1FlowSchemaStatusResponse(response ReadFlowcontrolApiserverV1beta1FlowSchemaStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadFlowcontrolApiserverV1beta1FlowSchemaStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(response ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusResponse(response ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadFlowcontrolApiserverV1beta2FlowSchemaResponse(response ReadFlowcontrolApiserverV1beta2FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadFlowcontrolApiserverV1beta2FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadFlowcontrolApiserverV1beta2FlowSchemaStatusResponse(response ReadFlowcontrolApiserverV1beta2FlowSchemaStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadFlowcontrolApiserverV1beta2FlowSchemaStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(response ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusResponse(response ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadInternalApiserverV1alpha1StorageVersionResponse(response ReadInternalApiserverV1alpha1StorageVersionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadInternalApiserverV1alpha1StorageVersionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadInternalApiserverV1alpha1StorageVersionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadInternalApiserverV1alpha1StorageVersionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadInternalApiserverV1alpha1StorageVersionStatusResponse(response ReadInternalApiserverV1alpha1StorageVersionStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadInternalApiserverV1alpha1StorageVersionStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadInternalApiserverV1alpha1StorageVersionStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadInternalApiserverV1alpha1StorageVersionStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadInternalApiserverV1alpha1StorageVersionStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadNetworkingV1IngressClassResponse(response ReadNetworkingV1IngressClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadNetworkingV1IngressClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadNetworkingV1IngressClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadNetworkingV1IngressClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadNetworkingV1IngressClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/ingressclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadNetworkingV1NamespacedIngressResponse(response ReadNetworkingV1NamespacedIngressRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadNetworkingV1NamespacedIngressApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadNetworkingV1NamespacedIngressApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadNetworkingV1NamespacedIngressApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadNetworkingV1NamespacedIngressUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadNetworkingV1NamespacedIngressStatusResponse(response ReadNetworkingV1NamespacedIngressStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadNetworkingV1NamespacedIngressStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadNetworkingV1NamespacedIngressStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadNetworkingV1NamespacedIngressStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadNetworkingV1NamespacedIngressStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadNetworkingV1NamespacedNetworkPolicyResponse(response ReadNetworkingV1NamespacedNetworkPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadNetworkingV1NamespacedNetworkPolicyApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadNetworkingV1NamespacedNetworkPolicyApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadNetworkingV1NamespacedNetworkPolicyApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadNetworkingV1NamespacedNetworkPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadNodeV1RuntimeClassResponse(response ReadNodeV1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadNodeV1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadNodeV1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadNodeV1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadNodeV1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1/runtimeclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadNodeV1alpha1RuntimeClassResponse(response ReadNodeV1alpha1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadNodeV1alpha1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadNodeV1alpha1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadNodeV1alpha1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1alpha1/runtimeclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadNodeV1beta1RuntimeClassResponse(response ReadNodeV1beta1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadNodeV1beta1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadNodeV1beta1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadNodeV1beta1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1beta1/runtimeclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadPolicyV1NamespacedPodDisruptionBudgetResponse(response ReadPolicyV1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadPolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadPolicyV1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadPolicyV1NamespacedPodDisruptionBudgetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadPolicyV1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadPolicyV1NamespacedPodDisruptionBudgetStatusResponse(response ReadPolicyV1NamespacedPodDisruptionBudgetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadPolicyV1NamespacedPodDisruptionBudgetStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadPolicyV1NamespacedPodDisruptionBudgetStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadPolicyV1NamespacedPodDisruptionBudgetStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadPolicyV1NamespacedPodDisruptionBudgetStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadPolicyV1beta1NamespacedPodDisruptionBudgetResponse(response ReadPolicyV1beta1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadPolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadPolicyV1beta1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadPolicyV1beta1NamespacedPodDisruptionBudgetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse(response ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadPolicyV1beta1PodSecurityPolicyResponse(response ReadPolicyV1beta1PodSecurityPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadPolicyV1beta1PodSecurityPolicyApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadPolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadPolicyV1beta1PodSecurityPolicyApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadPolicyV1beta1PodSecurityPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/podsecuritypolicies/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadRbacAuthorizationV1ClusterRoleResponse(response ReadRbacAuthorizationV1ClusterRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadRbacAuthorizationV1ClusterRoleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadRbacAuthorizationV1ClusterRoleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadRbacAuthorizationV1ClusterRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadRbacAuthorizationV1ClusterRoleBindingResponse(response ReadRbacAuthorizationV1ClusterRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadRbacAuthorizationV1ClusterRoleBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadRbacAuthorizationV1ClusterRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadRbacAuthorizationV1NamespacedRoleResponse(response ReadRbacAuthorizationV1NamespacedRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadRbacAuthorizationV1NamespacedRoleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadRbacAuthorizationV1NamespacedRoleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadRbacAuthorizationV1NamespacedRoleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadRbacAuthorizationV1NamespacedRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadRbacAuthorizationV1NamespacedRoleBindingResponse(response ReadRbacAuthorizationV1NamespacedRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadRbacAuthorizationV1NamespacedRoleBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadRbacAuthorizationV1NamespacedRoleBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadRbacAuthorizationV1NamespacedRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadSchedulingV1PriorityClassResponse(response ReadSchedulingV1PriorityClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadSchedulingV1PriorityClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadSchedulingV1PriorityClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadSchedulingV1PriorityClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadSchedulingV1PriorityClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/scheduling.k8s.io/v1/priorityclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadStorageV1CSIDriverResponse(response ReadStorageV1CSIDriverRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadStorageV1CSIDriverApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadStorageV1CSIDriverApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadStorageV1CSIDriverApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadStorageV1CSIDriverUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/csidrivers/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadStorageV1CSINodeResponse(response ReadStorageV1CSINodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadStorageV1CSINodeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadStorageV1CSINodeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadStorageV1CSINodeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadStorageV1CSINodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/csinodes/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadStorageV1StorageClassResponse(response ReadStorageV1StorageClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadStorageV1StorageClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadStorageV1StorageClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadStorageV1StorageClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadStorageV1StorageClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/storageclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadStorageV1VolumeAttachmentResponse(response ReadStorageV1VolumeAttachmentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadStorageV1VolumeAttachmentApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadStorageV1VolumeAttachmentApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadStorageV1VolumeAttachmentApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadStorageV1VolumeAttachmentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/volumeattachments/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadStorageV1VolumeAttachmentStatusResponse(response ReadStorageV1VolumeAttachmentStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadStorageV1VolumeAttachmentStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadStorageV1VolumeAttachmentStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadStorageV1VolumeAttachmentStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadStorageV1VolumeAttachmentStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/volumeattachments/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReadStorageV1alpha1NamespacedCSIStorageCapacityResponse(response ReadStorageV1alpha1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadStorageV1alpha1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadStorageV1alpha1NamespacedCSIStorageCapacityApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities/{name}: unexpected response type: %T`, response)
	}
}

func encodeReadStorageV1beta1NamespacedCSIStorageCapacityResponse(response ReadStorageV1beta1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadStorageV1beta1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReadStorageV1beta1NamespacedCSIStorageCapacityApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReadStorageV1beta1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceAdmissionregistrationV1MutatingWebhookConfigurationResponse(response ReplaceAdmissionregistrationV1MutatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceAdmissionregistrationV1ValidatingWebhookConfigurationResponse(response ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceApiextensionsV1CustomResourceDefinitionResponse(response ReplaceApiextensionsV1CustomResourceDefinitionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceApiextensionsV1CustomResourceDefinitionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceApiextensionsV1CustomResourceDefinitionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceApiextensionsV1CustomResourceDefinitionApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceApiextensionsV1CustomResourceDefinitionApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceApiextensionsV1CustomResourceDefinitionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceApiextensionsV1CustomResourceDefinitionStatusResponse(response ReplaceApiextensionsV1CustomResourceDefinitionStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceApiextensionsV1CustomResourceDefinitionStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceApiextensionsV1CustomResourceDefinitionStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceApiextensionsV1CustomResourceDefinitionStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceApiextensionsV1CustomResourceDefinitionStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceApiextensionsV1CustomResourceDefinitionStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceApiextensionsV1CustomResourceDefinitionStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceApiextensionsV1CustomResourceDefinitionStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceApiregistrationV1APIServiceResponse(response ReplaceApiregistrationV1APIServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceApiregistrationV1APIServiceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceApiregistrationV1APIServiceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceApiregistrationV1APIServiceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceApiregistrationV1APIServiceApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceApiregistrationV1APIServiceApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceApiregistrationV1APIServiceApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceApiregistrationV1APIServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiregistration.k8s.io/v1/apiservices/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceApiregistrationV1APIServiceStatusResponse(response ReplaceApiregistrationV1APIServiceStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceApiregistrationV1APIServiceStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceApiregistrationV1APIServiceStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceApiregistrationV1APIServiceStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceApiregistrationV1APIServiceStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceApiregistrationV1APIServiceStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceApiregistrationV1APIServiceStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceApiregistrationV1APIServiceStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiregistration.k8s.io/v1/apiservices/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceAppsV1NamespacedControllerRevisionResponse(response ReplaceAppsV1NamespacedControllerRevisionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAppsV1NamespacedControllerRevisionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedControllerRevisionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedControllerRevisionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedControllerRevisionApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedControllerRevisionApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedControllerRevisionApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedControllerRevisionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceAppsV1NamespacedDaemonSetResponse(response ReplaceAppsV1NamespacedDaemonSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAppsV1NamespacedDaemonSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedDaemonSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedDaemonSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedDaemonSetApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedDaemonSetApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedDaemonSetApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedDaemonSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceAppsV1NamespacedDaemonSetStatusResponse(response ReplaceAppsV1NamespacedDaemonSetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAppsV1NamespacedDaemonSetStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedDaemonSetStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedDaemonSetStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedDaemonSetStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedDaemonSetStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedDaemonSetStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedDaemonSetStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceAppsV1NamespacedDeploymentResponse(response ReplaceAppsV1NamespacedDeploymentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAppsV1NamespacedDeploymentApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedDeploymentApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedDeploymentApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedDeploymentApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedDeploymentApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedDeploymentApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedDeploymentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/deployments/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceAppsV1NamespacedDeploymentScaleResponse(response ReplaceAppsV1NamespacedDeploymentScaleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAppsV1NamespacedDeploymentScaleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedDeploymentScaleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedDeploymentScaleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedDeploymentScaleApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedDeploymentScaleApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedDeploymentScaleApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedDeploymentScaleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale: unexpected response type: %T`, response)
	}
}

func encodeReplaceAppsV1NamespacedDeploymentStatusResponse(response ReplaceAppsV1NamespacedDeploymentStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAppsV1NamespacedDeploymentStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedDeploymentStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedDeploymentStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedDeploymentStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedDeploymentStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedDeploymentStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedDeploymentStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceAppsV1NamespacedReplicaSetResponse(response ReplaceAppsV1NamespacedReplicaSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAppsV1NamespacedReplicaSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedReplicaSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedReplicaSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedReplicaSetApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedReplicaSetApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedReplicaSetApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedReplicaSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/replicasets/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceAppsV1NamespacedReplicaSetScaleResponse(response ReplaceAppsV1NamespacedReplicaSetScaleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAppsV1NamespacedReplicaSetScaleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedReplicaSetScaleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedReplicaSetScaleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedReplicaSetScaleApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedReplicaSetScaleApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedReplicaSetScaleApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedReplicaSetScaleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale: unexpected response type: %T`, response)
	}
}

func encodeReplaceAppsV1NamespacedReplicaSetStatusResponse(response ReplaceAppsV1NamespacedReplicaSetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAppsV1NamespacedReplicaSetStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedReplicaSetStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedReplicaSetStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedReplicaSetStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedReplicaSetStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedReplicaSetStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedReplicaSetStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceAppsV1NamespacedStatefulSetResponse(response ReplaceAppsV1NamespacedStatefulSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAppsV1NamespacedStatefulSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedStatefulSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedStatefulSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedStatefulSetApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedStatefulSetApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedStatefulSetApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedStatefulSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceAppsV1NamespacedStatefulSetScaleResponse(response ReplaceAppsV1NamespacedStatefulSetScaleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAppsV1NamespacedStatefulSetScaleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedStatefulSetScaleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedStatefulSetScaleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedStatefulSetScaleApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedStatefulSetScaleApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedStatefulSetScaleApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedStatefulSetScaleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale: unexpected response type: %T`, response)
	}
}

func encodeReplaceAppsV1NamespacedStatefulSetStatusResponse(response ReplaceAppsV1NamespacedStatefulSetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAppsV1NamespacedStatefulSetStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedStatefulSetStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedStatefulSetStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedStatefulSetStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAppsV1NamespacedStatefulSetStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAppsV1NamespacedStatefulSetStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAppsV1NamespacedStatefulSetStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerResponse(response ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse(response ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse(response ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse(response ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerResponse(response ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusResponse(response ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceBatchV1NamespacedCronJobResponse(response ReplaceBatchV1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceBatchV1NamespacedCronJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceBatchV1NamespacedCronJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceBatchV1NamespacedCronJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceBatchV1NamespacedCronJobApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceBatchV1NamespacedCronJobApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceBatchV1NamespacedCronJobApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceBatchV1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceBatchV1NamespacedCronJobStatusResponse(response ReplaceBatchV1NamespacedCronJobStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceBatchV1NamespacedCronJobStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceBatchV1NamespacedCronJobStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceBatchV1NamespacedCronJobStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceBatchV1NamespacedCronJobStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceBatchV1NamespacedCronJobStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceBatchV1NamespacedCronJobStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceBatchV1NamespacedCronJobStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceBatchV1NamespacedJobResponse(response ReplaceBatchV1NamespacedJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceBatchV1NamespacedJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceBatchV1NamespacedJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceBatchV1NamespacedJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceBatchV1NamespacedJobApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceBatchV1NamespacedJobApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceBatchV1NamespacedJobApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceBatchV1NamespacedJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/jobs/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceBatchV1NamespacedJobStatusResponse(response ReplaceBatchV1NamespacedJobStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceBatchV1NamespacedJobStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceBatchV1NamespacedJobStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceBatchV1NamespacedJobStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceBatchV1NamespacedJobStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceBatchV1NamespacedJobStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceBatchV1NamespacedJobStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceBatchV1NamespacedJobStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceBatchV1beta1NamespacedCronJobResponse(response ReplaceBatchV1beta1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceBatchV1beta1NamespacedCronJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceBatchV1beta1NamespacedCronJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceBatchV1beta1NamespacedCronJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceBatchV1beta1NamespacedCronJobApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceBatchV1beta1NamespacedCronJobApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceBatchV1beta1NamespacedCronJobApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceBatchV1beta1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceBatchV1beta1NamespacedCronJobStatusResponse(response ReplaceBatchV1beta1NamespacedCronJobStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceBatchV1beta1NamespacedCronJobStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceBatchV1beta1NamespacedCronJobStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceBatchV1beta1NamespacedCronJobStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceBatchV1beta1NamespacedCronJobStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceBatchV1beta1NamespacedCronJobStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceBatchV1beta1NamespacedCronJobStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceBatchV1beta1NamespacedCronJobStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceCertificatesV1CertificateSigningRequestResponse(response ReplaceCertificatesV1CertificateSigningRequestRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCertificatesV1CertificateSigningRequestApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCertificatesV1CertificateSigningRequestApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCertificatesV1CertificateSigningRequestApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCertificatesV1CertificateSigningRequestApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCertificatesV1CertificateSigningRequestUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceCertificatesV1CertificateSigningRequestApprovalResponse(response ReplaceCertificatesV1CertificateSigningRequestApprovalRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCertificatesV1CertificateSigningRequestApprovalApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCertificatesV1CertificateSigningRequestApprovalApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCertificatesV1CertificateSigningRequestApprovalApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCertificatesV1CertificateSigningRequestApprovalApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCertificatesV1CertificateSigningRequestApprovalApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCertificatesV1CertificateSigningRequestApprovalApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCertificatesV1CertificateSigningRequestApprovalUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval: unexpected response type: %T`, response)
	}
}

func encodeReplaceCertificatesV1CertificateSigningRequestStatusResponse(response ReplaceCertificatesV1CertificateSigningRequestStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCertificatesV1CertificateSigningRequestStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCertificatesV1CertificateSigningRequestStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCertificatesV1CertificateSigningRequestStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCertificatesV1CertificateSigningRequestStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCertificatesV1CertificateSigningRequestStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCertificatesV1CertificateSigningRequestStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCertificatesV1CertificateSigningRequestStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoordinationV1NamespacedLeaseResponse(response ReplaceCoordinationV1NamespacedLeaseRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoordinationV1NamespacedLeaseApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoordinationV1NamespacedLeaseApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoordinationV1NamespacedLeaseApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoordinationV1NamespacedLeaseApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoordinationV1NamespacedLeaseApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoordinationV1NamespacedLeaseApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoordinationV1NamespacedLeaseUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespaceResponse(response ReplaceCoreV1NamespaceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespaceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespaceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespaceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespaceApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespaceApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespaceApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespaceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespaceFinalizeResponse(response ReplaceCoreV1NamespaceFinalizeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespaceFinalizeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespaceFinalizeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespaceFinalizeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespaceFinalizeApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespaceFinalizeApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespaceFinalizeApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespaceFinalizeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{name}/finalize: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespaceStatusResponse(response ReplaceCoreV1NamespaceStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespaceStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespaceStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespaceStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespaceStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespaceStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespaceStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespaceStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedConfigMapResponse(response ReplaceCoreV1NamespacedConfigMapRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedConfigMapApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedConfigMapApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedConfigMapApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedConfigMapApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedConfigMapApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedConfigMapApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedConfigMapUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/configmaps/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedEndpointsResponse(response ReplaceCoreV1NamespacedEndpointsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedEndpointsApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedEndpointsApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedEndpointsApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedEndpointsApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedEndpointsApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedEndpointsApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedEndpointsUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/endpoints/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedEventResponse(response ReplaceCoreV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedEventApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedEventApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedEventApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/events/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedLimitRangeResponse(response ReplaceCoreV1NamespacedLimitRangeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedLimitRangeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedLimitRangeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedLimitRangeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedLimitRangeApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedLimitRangeApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedLimitRangeApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedLimitRangeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/limitranges/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedPersistentVolumeClaimResponse(response ReplaceCoreV1NamespacedPersistentVolumeClaimRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedPersistentVolumeClaimStatusResponse(response ReplaceCoreV1NamespacedPersistentVolumeClaimStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedPodResponse(response ReplaceCoreV1NamespacedPodRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedPodApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedPodApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedPodApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedPodApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedPodApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedPodApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedPodUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedPodEphemeralcontainersResponse(response ReplaceCoreV1NamespacedPodEphemeralcontainersRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedPodEphemeralcontainersApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedPodEphemeralcontainersApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedPodEphemeralcontainersApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedPodEphemeralcontainersApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedPodEphemeralcontainersApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedPodEphemeralcontainersApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedPodEphemeralcontainersUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedPodStatusResponse(response ReplaceCoreV1NamespacedPodStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedPodStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedPodStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedPodStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedPodStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedPodStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedPodStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedPodStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/pods/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedPodTemplateResponse(response ReplaceCoreV1NamespacedPodTemplateRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedPodTemplateApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedPodTemplateApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedPodTemplateApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedPodTemplateApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedPodTemplateApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedPodTemplateApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedPodTemplateUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/podtemplates/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedReplicationControllerResponse(response ReplaceCoreV1NamespacedReplicationControllerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedReplicationControllerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedReplicationControllerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedReplicationControllerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedReplicationControllerApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedReplicationControllerApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedReplicationControllerApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedReplicationControllerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/replicationcontrollers/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedReplicationControllerScaleResponse(response ReplaceCoreV1NamespacedReplicationControllerScaleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedReplicationControllerScaleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedReplicationControllerScaleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedReplicationControllerScaleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedReplicationControllerScaleApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedReplicationControllerScaleApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedReplicationControllerScaleApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedReplicationControllerScaleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedReplicationControllerStatusResponse(response ReplaceCoreV1NamespacedReplicationControllerStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedReplicationControllerStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedReplicationControllerStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedReplicationControllerStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedReplicationControllerStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedReplicationControllerStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedReplicationControllerStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedReplicationControllerStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedResourceQuotaResponse(response ReplaceCoreV1NamespacedResourceQuotaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedResourceQuotaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedResourceQuotaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedResourceQuotaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedResourceQuotaApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedResourceQuotaApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedResourceQuotaApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedResourceQuotaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/resourcequotas/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedResourceQuotaStatusResponse(response ReplaceCoreV1NamespacedResourceQuotaStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedResourceQuotaStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedResourceQuotaStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedResourceQuotaStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedResourceQuotaStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedResourceQuotaStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedResourceQuotaStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedResourceQuotaStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/resourcequotas/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedSecretResponse(response ReplaceCoreV1NamespacedSecretRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedSecretApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedSecretApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedSecretApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedSecretApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedSecretApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedSecretApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedSecretUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/secrets/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedServiceResponse(response ReplaceCoreV1NamespacedServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedServiceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedServiceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedServiceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedServiceApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedServiceApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedServiceApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedServiceAccountResponse(response ReplaceCoreV1NamespacedServiceAccountRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedServiceAccountApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedServiceAccountApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedServiceAccountApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedServiceAccountApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedServiceAccountApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedServiceAccountApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedServiceAccountUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/serviceaccounts/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NamespacedServiceStatusResponse(response ReplaceCoreV1NamespacedServiceStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NamespacedServiceStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedServiceStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedServiceStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedServiceStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NamespacedServiceStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NamespacedServiceStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NamespacedServiceStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/namespaces/{namespace}/services/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NodeResponse(response ReplaceCoreV1NodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NodeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NodeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NodeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NodeApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NodeApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NodeApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1NodeStatusResponse(response ReplaceCoreV1NodeStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1NodeStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NodeStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NodeStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NodeStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1NodeStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1NodeStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1NodeStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/nodes/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1PersistentVolumeResponse(response ReplaceCoreV1PersistentVolumeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1PersistentVolumeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1PersistentVolumeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1PersistentVolumeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1PersistentVolumeApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1PersistentVolumeApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1PersistentVolumeApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1PersistentVolumeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/persistentvolumes/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceCoreV1PersistentVolumeStatusResponse(response ReplaceCoreV1PersistentVolumeStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceCoreV1PersistentVolumeStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1PersistentVolumeStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1PersistentVolumeStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1PersistentVolumeStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceCoreV1PersistentVolumeStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceCoreV1PersistentVolumeStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceCoreV1PersistentVolumeStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/persistentvolumes/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceDiscoveryV1NamespacedEndpointSliceResponse(response ReplaceDiscoveryV1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceDiscoveryV1NamespacedEndpointSliceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceDiscoveryV1NamespacedEndpointSliceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceDiscoveryV1NamespacedEndpointSliceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceDiscoveryV1NamespacedEndpointSliceApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceDiscoveryV1NamespacedEndpointSliceApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceDiscoveryV1NamespacedEndpointSliceApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceDiscoveryV1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceDiscoveryV1beta1NamespacedEndpointSliceResponse(response ReplaceDiscoveryV1beta1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceDiscoveryV1beta1NamespacedEndpointSliceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceDiscoveryV1beta1NamespacedEndpointSliceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceDiscoveryV1beta1NamespacedEndpointSliceApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceDiscoveryV1beta1NamespacedEndpointSliceApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceDiscoveryV1beta1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceEventsV1NamespacedEventResponse(response ReplaceEventsV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceEventsV1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceEventsV1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceEventsV1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceEventsV1NamespacedEventApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceEventsV1NamespacedEventApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceEventsV1NamespacedEventApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceEventsV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceEventsV1beta1NamespacedEventResponse(response ReplaceEventsV1beta1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceEventsV1beta1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceEventsV1beta1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceEventsV1beta1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceEventsV1beta1NamespacedEventApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceEventsV1beta1NamespacedEventApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceEventsV1beta1NamespacedEventApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceEventsV1beta1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceFlowcontrolApiserverV1beta1FlowSchemaResponse(response ReplaceFlowcontrolApiserverV1beta1FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta1FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusResponse(response ReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(response ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusResponse(response ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceFlowcontrolApiserverV1beta2FlowSchemaResponse(response ReplaceFlowcontrolApiserverV1beta2FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta2FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusResponse(response ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(response ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusResponse(response ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceInternalApiserverV1alpha1StorageVersionResponse(response ReplaceInternalApiserverV1alpha1StorageVersionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceInternalApiserverV1alpha1StorageVersionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceInternalApiserverV1alpha1StorageVersionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceInternalApiserverV1alpha1StorageVersionApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceInternalApiserverV1alpha1StorageVersionApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceInternalApiserverV1alpha1StorageVersionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceInternalApiserverV1alpha1StorageVersionStatusResponse(response ReplaceInternalApiserverV1alpha1StorageVersionStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceInternalApiserverV1alpha1StorageVersionStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceInternalApiserverV1alpha1StorageVersionStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceInternalApiserverV1alpha1StorageVersionStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceInternalApiserverV1alpha1StorageVersionStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceInternalApiserverV1alpha1StorageVersionStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceInternalApiserverV1alpha1StorageVersionStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceInternalApiserverV1alpha1StorageVersionStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceNetworkingV1IngressClassResponse(response ReplaceNetworkingV1IngressClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceNetworkingV1IngressClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceNetworkingV1IngressClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceNetworkingV1IngressClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceNetworkingV1IngressClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceNetworkingV1IngressClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceNetworkingV1IngressClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceNetworkingV1IngressClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/ingressclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceNetworkingV1NamespacedIngressResponse(response ReplaceNetworkingV1NamespacedIngressRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceNetworkingV1NamespacedIngressApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceNetworkingV1NamespacedIngressApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceNetworkingV1NamespacedIngressApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceNetworkingV1NamespacedIngressApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceNetworkingV1NamespacedIngressApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceNetworkingV1NamespacedIngressApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceNetworkingV1NamespacedIngressUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceNetworkingV1NamespacedIngressStatusResponse(response ReplaceNetworkingV1NamespacedIngressStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceNetworkingV1NamespacedIngressStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceNetworkingV1NamespacedIngressStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceNetworkingV1NamespacedIngressStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceNetworkingV1NamespacedIngressStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceNetworkingV1NamespacedIngressStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceNetworkingV1NamespacedIngressStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceNetworkingV1NamespacedIngressStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceNetworkingV1NamespacedNetworkPolicyResponse(response ReplaceNetworkingV1NamespacedNetworkPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceNetworkingV1NamespacedNetworkPolicyApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceNetworkingV1NamespacedNetworkPolicyApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceNetworkingV1NamespacedNetworkPolicyApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceNetworkingV1NamespacedNetworkPolicyApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceNetworkingV1NamespacedNetworkPolicyApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceNetworkingV1NamespacedNetworkPolicyApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceNetworkingV1NamespacedNetworkPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceNodeV1RuntimeClassResponse(response ReplaceNodeV1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceNodeV1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceNodeV1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceNodeV1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceNodeV1RuntimeClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceNodeV1RuntimeClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceNodeV1RuntimeClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceNodeV1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1/runtimeclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceNodeV1alpha1RuntimeClassResponse(response ReplaceNodeV1alpha1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceNodeV1alpha1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceNodeV1alpha1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceNodeV1alpha1RuntimeClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceNodeV1alpha1RuntimeClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceNodeV1alpha1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1alpha1/runtimeclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceNodeV1beta1RuntimeClassResponse(response ReplaceNodeV1beta1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceNodeV1beta1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceNodeV1beta1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceNodeV1beta1RuntimeClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceNodeV1beta1RuntimeClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceNodeV1beta1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1beta1/runtimeclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplacePolicyV1NamespacedPodDisruptionBudgetResponse(response ReplacePolicyV1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplacePolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplacePolicyV1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplacePolicyV1NamespacedPodDisruptionBudgetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplacePolicyV1NamespacedPodDisruptionBudgetApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplacePolicyV1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplacePolicyV1NamespacedPodDisruptionBudgetApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplacePolicyV1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplacePolicyV1NamespacedPodDisruptionBudgetStatusResponse(response ReplacePolicyV1NamespacedPodDisruptionBudgetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplacePolicyV1NamespacedPodDisruptionBudgetStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplacePolicyV1NamespacedPodDisruptionBudgetStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplacePolicyV1NamespacedPodDisruptionBudgetStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplacePolicyV1NamespacedPodDisruptionBudgetStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplacePolicyV1NamespacedPodDisruptionBudgetStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplacePolicyV1NamespacedPodDisruptionBudgetStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplacePolicyV1NamespacedPodDisruptionBudgetStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplacePolicyV1beta1NamespacedPodDisruptionBudgetResponse(response ReplacePolicyV1beta1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse(response ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplacePolicyV1beta1PodSecurityPolicyResponse(response ReplacePolicyV1beta1PodSecurityPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplacePolicyV1beta1PodSecurityPolicyApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplacePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplacePolicyV1beta1PodSecurityPolicyApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplacePolicyV1beta1PodSecurityPolicyApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplacePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplacePolicyV1beta1PodSecurityPolicyApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplacePolicyV1beta1PodSecurityPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/podsecuritypolicies/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceRbacAuthorizationV1ClusterRoleResponse(response ReplaceRbacAuthorizationV1ClusterRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceRbacAuthorizationV1ClusterRoleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceRbacAuthorizationV1ClusterRoleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceRbacAuthorizationV1ClusterRoleApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceRbacAuthorizationV1ClusterRoleApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceRbacAuthorizationV1ClusterRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceRbacAuthorizationV1ClusterRoleBindingResponse(response ReplaceRbacAuthorizationV1ClusterRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceRbacAuthorizationV1ClusterRoleBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceRbacAuthorizationV1ClusterRoleBindingApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceRbacAuthorizationV1ClusterRoleBindingApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceRbacAuthorizationV1ClusterRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceRbacAuthorizationV1NamespacedRoleResponse(response ReplaceRbacAuthorizationV1NamespacedRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceRbacAuthorizationV1NamespacedRoleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceRbacAuthorizationV1NamespacedRoleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceRbacAuthorizationV1NamespacedRoleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceRbacAuthorizationV1NamespacedRoleApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceRbacAuthorizationV1NamespacedRoleApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceRbacAuthorizationV1NamespacedRoleApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceRbacAuthorizationV1NamespacedRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceRbacAuthorizationV1NamespacedRoleBindingResponse(response ReplaceRbacAuthorizationV1NamespacedRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceRbacAuthorizationV1NamespacedRoleBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceRbacAuthorizationV1NamespacedRoleBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceRbacAuthorizationV1NamespacedRoleBindingApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceRbacAuthorizationV1NamespacedRoleBindingApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceRbacAuthorizationV1NamespacedRoleBindingApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceRbacAuthorizationV1NamespacedRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceSchedulingV1PriorityClassResponse(response ReplaceSchedulingV1PriorityClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceSchedulingV1PriorityClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceSchedulingV1PriorityClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceSchedulingV1PriorityClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceSchedulingV1PriorityClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceSchedulingV1PriorityClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceSchedulingV1PriorityClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceSchedulingV1PriorityClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/scheduling.k8s.io/v1/priorityclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceStorageV1CSIDriverResponse(response ReplaceStorageV1CSIDriverRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceStorageV1CSIDriverApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceStorageV1CSIDriverApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceStorageV1CSIDriverApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceStorageV1CSIDriverApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceStorageV1CSIDriverApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceStorageV1CSIDriverApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceStorageV1CSIDriverUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/csidrivers/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceStorageV1CSINodeResponse(response ReplaceStorageV1CSINodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceStorageV1CSINodeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceStorageV1CSINodeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceStorageV1CSINodeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceStorageV1CSINodeApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceStorageV1CSINodeApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceStorageV1CSINodeApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceStorageV1CSINodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/csinodes/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceStorageV1StorageClassResponse(response ReplaceStorageV1StorageClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceStorageV1StorageClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceStorageV1StorageClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceStorageV1StorageClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceStorageV1StorageClassApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceStorageV1StorageClassApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceStorageV1StorageClassApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceStorageV1StorageClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/storageclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceStorageV1VolumeAttachmentResponse(response ReplaceStorageV1VolumeAttachmentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceStorageV1VolumeAttachmentApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceStorageV1VolumeAttachmentApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceStorageV1VolumeAttachmentApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceStorageV1VolumeAttachmentApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceStorageV1VolumeAttachmentApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceStorageV1VolumeAttachmentApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceStorageV1VolumeAttachmentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/volumeattachments/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceStorageV1VolumeAttachmentStatusResponse(response ReplaceStorageV1VolumeAttachmentStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceStorageV1VolumeAttachmentStatusApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceStorageV1VolumeAttachmentStatusApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceStorageV1VolumeAttachmentStatusApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceStorageV1VolumeAttachmentStatusApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceStorageV1VolumeAttachmentStatusApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceStorageV1VolumeAttachmentStatusApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceStorageV1VolumeAttachmentStatusUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/volumeattachments/{name}/status: unexpected response type: %T`, response)
	}
}

func encodeReplaceStorageV1alpha1NamespacedCSIStorageCapacityResponse(response ReplaceStorageV1alpha1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceStorageV1alpha1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceStorageV1alpha1NamespacedCSIStorageCapacityApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceStorageV1alpha1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceStorageV1alpha1NamespacedCSIStorageCapacityApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities/{name}: unexpected response type: %T`, response)
	}
}

func encodeReplaceStorageV1beta1NamespacedCSIStorageCapacityResponse(response ReplaceStorageV1beta1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReplaceStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceStorageV1beta1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceStorageV1beta1NamespacedCSIStorageCapacityApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReplaceStorageV1beta1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufCreated:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(201)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *ReplaceStorageV1beta1NamespacedCSIStorageCapacityApplicationYamlCreated:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(201)
		return errors.New(`application/yaml encoder not implemented`)
	case *ReplaceStorageV1beta1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchAdmissionregistrationV1MutatingWebhookConfigurationResponse(response WatchAdmissionregistrationV1MutatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchAdmissionregistrationV1MutatingWebhookConfigurationListResponse(response WatchAdmissionregistrationV1MutatingWebhookConfigurationListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAdmissionregistrationV1MutatingWebhookConfigurationListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations: unexpected response type: %T`, response)
	}
}

func encodeWatchAdmissionregistrationV1ValidatingWebhookConfigurationResponse(response WatchAdmissionregistrationV1ValidatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchAdmissionregistrationV1ValidatingWebhookConfigurationListResponse(response WatchAdmissionregistrationV1ValidatingWebhookConfigurationListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAdmissionregistrationV1ValidatingWebhookConfigurationListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations: unexpected response type: %T`, response)
	}
}

func encodeWatchApiextensionsV1CustomResourceDefinitionResponse(response WatchApiextensionsV1CustomResourceDefinitionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchApiextensionsV1CustomResourceDefinitionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchApiextensionsV1CustomResourceDefinitionApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchApiextensionsV1CustomResourceDefinitionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchApiextensionsV1CustomResourceDefinitionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchApiextensionsV1CustomResourceDefinitionListResponse(response WatchApiextensionsV1CustomResourceDefinitionListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchApiextensionsV1CustomResourceDefinitionListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchApiextensionsV1CustomResourceDefinitionListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchApiextensionsV1CustomResourceDefinitionListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchApiextensionsV1CustomResourceDefinitionListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchApiextensionsV1CustomResourceDefinitionListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchApiextensionsV1CustomResourceDefinitionListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions: unexpected response type: %T`, response)
	}
}

func encodeWatchApiregistrationV1APIServiceResponse(response WatchApiregistrationV1APIServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchApiregistrationV1APIServiceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchApiregistrationV1APIServiceApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchApiregistrationV1APIServiceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchApiregistrationV1APIServiceApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchApiregistrationV1APIServiceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchApiregistrationV1APIServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiregistration.k8s.io/v1/watch/apiservices/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchApiregistrationV1APIServiceListResponse(response WatchApiregistrationV1APIServiceListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchApiregistrationV1APIServiceListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchApiregistrationV1APIServiceListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchApiregistrationV1APIServiceListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchApiregistrationV1APIServiceListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchApiregistrationV1APIServiceListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchApiregistrationV1APIServiceListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apiregistration.k8s.io/v1/watch/apiservices: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1ControllerRevisionListForAllNamespacesResponse(response WatchAppsV1ControllerRevisionListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAppsV1ControllerRevisionListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1ControllerRevisionListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAppsV1ControllerRevisionListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAppsV1ControllerRevisionListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAppsV1ControllerRevisionListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAppsV1ControllerRevisionListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/watch/controllerrevisions: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1DaemonSetListForAllNamespacesResponse(response WatchAppsV1DaemonSetListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAppsV1DaemonSetListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1DaemonSetListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAppsV1DaemonSetListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAppsV1DaemonSetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAppsV1DaemonSetListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAppsV1DaemonSetListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/watch/daemonsets: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1DeploymentListForAllNamespacesResponse(response WatchAppsV1DeploymentListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAppsV1DeploymentListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1DeploymentListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAppsV1DeploymentListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAppsV1DeploymentListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAppsV1DeploymentListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAppsV1DeploymentListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/watch/deployments: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedControllerRevisionResponse(response WatchAppsV1NamespacedControllerRevisionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAppsV1NamespacedControllerRevisionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedControllerRevisionApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedControllerRevisionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAppsV1NamespacedControllerRevisionApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedControllerRevisionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAppsV1NamespacedControllerRevisionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedControllerRevisionListResponse(response WatchAppsV1NamespacedControllerRevisionListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAppsV1NamespacedControllerRevisionListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedControllerRevisionListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedControllerRevisionListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAppsV1NamespacedControllerRevisionListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedControllerRevisionListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAppsV1NamespacedControllerRevisionListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedDaemonSetResponse(response WatchAppsV1NamespacedDaemonSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAppsV1NamespacedDaemonSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedDaemonSetApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedDaemonSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAppsV1NamespacedDaemonSetApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedDaemonSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAppsV1NamespacedDaemonSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/watch/namespaces/{namespace}/daemonsets/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedDaemonSetListResponse(response WatchAppsV1NamespacedDaemonSetListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAppsV1NamespacedDaemonSetListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedDaemonSetListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedDaemonSetListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAppsV1NamespacedDaemonSetListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedDaemonSetListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAppsV1NamespacedDaemonSetListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/watch/namespaces/{namespace}/daemonsets: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedDeploymentResponse(response WatchAppsV1NamespacedDeploymentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAppsV1NamespacedDeploymentApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedDeploymentApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedDeploymentApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAppsV1NamespacedDeploymentApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedDeploymentApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAppsV1NamespacedDeploymentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/watch/namespaces/{namespace}/deployments/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedDeploymentListResponse(response WatchAppsV1NamespacedDeploymentListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAppsV1NamespacedDeploymentListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedDeploymentListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedDeploymentListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAppsV1NamespacedDeploymentListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedDeploymentListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAppsV1NamespacedDeploymentListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/watch/namespaces/{namespace}/deployments: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedReplicaSetResponse(response WatchAppsV1NamespacedReplicaSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAppsV1NamespacedReplicaSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedReplicaSetApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedReplicaSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAppsV1NamespacedReplicaSetApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedReplicaSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAppsV1NamespacedReplicaSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/watch/namespaces/{namespace}/replicasets/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedReplicaSetListResponse(response WatchAppsV1NamespacedReplicaSetListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAppsV1NamespacedReplicaSetListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedReplicaSetListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedReplicaSetListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAppsV1NamespacedReplicaSetListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedReplicaSetListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAppsV1NamespacedReplicaSetListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/watch/namespaces/{namespace}/replicasets: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedStatefulSetResponse(response WatchAppsV1NamespacedStatefulSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAppsV1NamespacedStatefulSetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedStatefulSetApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedStatefulSetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAppsV1NamespacedStatefulSetApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedStatefulSetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAppsV1NamespacedStatefulSetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/watch/namespaces/{namespace}/statefulsets/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedStatefulSetListResponse(response WatchAppsV1NamespacedStatefulSetListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAppsV1NamespacedStatefulSetListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedStatefulSetListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedStatefulSetListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAppsV1NamespacedStatefulSetListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAppsV1NamespacedStatefulSetListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAppsV1NamespacedStatefulSetListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/watch/namespaces/{namespace}/statefulsets: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1ReplicaSetListForAllNamespacesResponse(response WatchAppsV1ReplicaSetListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAppsV1ReplicaSetListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1ReplicaSetListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAppsV1ReplicaSetListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAppsV1ReplicaSetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAppsV1ReplicaSetListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAppsV1ReplicaSetListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/watch/replicasets: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1StatefulSetListForAllNamespacesResponse(response WatchAppsV1StatefulSetListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAppsV1StatefulSetListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1StatefulSetListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAppsV1StatefulSetListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAppsV1StatefulSetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAppsV1StatefulSetListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAppsV1StatefulSetListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/apps/v1/watch/statefulsets: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesResponse(response WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v1/watch/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV1NamespacedHorizontalPodAutoscalerResponse(response WatchAutoscalingV1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAutoscalingV1NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV1NamespacedHorizontalPodAutoscalerListResponse(response WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesResponse(response WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta1/watch/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse(response WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListResponse(response WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesResponse(response WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta2/watch/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerResponse(response WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListResponse(response WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1CronJobListForAllNamespacesResponse(response WatchBatchV1CronJobListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchBatchV1CronJobListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1CronJobListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchBatchV1CronJobListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchBatchV1CronJobListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchBatchV1CronJobListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchBatchV1CronJobListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/watch/cronjobs: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1JobListForAllNamespacesResponse(response WatchBatchV1JobListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchBatchV1JobListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1JobListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchBatchV1JobListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchBatchV1JobListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchBatchV1JobListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchBatchV1JobListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/watch/jobs: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1NamespacedCronJobResponse(response WatchBatchV1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchBatchV1NamespacedCronJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1NamespacedCronJobApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchBatchV1NamespacedCronJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchBatchV1NamespacedCronJobApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchBatchV1NamespacedCronJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchBatchV1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/watch/namespaces/{namespace}/cronjobs/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1NamespacedCronJobListResponse(response WatchBatchV1NamespacedCronJobListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchBatchV1NamespacedCronJobListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1NamespacedCronJobListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchBatchV1NamespacedCronJobListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchBatchV1NamespacedCronJobListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchBatchV1NamespacedCronJobListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchBatchV1NamespacedCronJobListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/watch/namespaces/{namespace}/cronjobs: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1NamespacedJobResponse(response WatchBatchV1NamespacedJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchBatchV1NamespacedJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1NamespacedJobApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchBatchV1NamespacedJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchBatchV1NamespacedJobApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchBatchV1NamespacedJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchBatchV1NamespacedJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1NamespacedJobListResponse(response WatchBatchV1NamespacedJobListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchBatchV1NamespacedJobListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1NamespacedJobListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchBatchV1NamespacedJobListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchBatchV1NamespacedJobListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchBatchV1NamespacedJobListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchBatchV1NamespacedJobListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1/watch/namespaces/{namespace}/jobs: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1beta1CronJobListForAllNamespacesResponse(response WatchBatchV1beta1CronJobListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchBatchV1beta1CronJobListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1beta1CronJobListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchBatchV1beta1CronJobListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchBatchV1beta1CronJobListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchBatchV1beta1CronJobListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchBatchV1beta1CronJobListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1beta1/watch/cronjobs: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1beta1NamespacedCronJobResponse(response WatchBatchV1beta1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchBatchV1beta1NamespacedCronJobApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1beta1NamespacedCronJobApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchBatchV1beta1NamespacedCronJobApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchBatchV1beta1NamespacedCronJobApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchBatchV1beta1NamespacedCronJobApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchBatchV1beta1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1beta1NamespacedCronJobListResponse(response WatchBatchV1beta1NamespacedCronJobListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchBatchV1beta1NamespacedCronJobListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1beta1NamespacedCronJobListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchBatchV1beta1NamespacedCronJobListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchBatchV1beta1NamespacedCronJobListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchBatchV1beta1NamespacedCronJobListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchBatchV1beta1NamespacedCronJobListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs: unexpected response type: %T`, response)
	}
}

func encodeWatchCertificatesV1CertificateSigningRequestResponse(response WatchCertificatesV1CertificateSigningRequestRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCertificatesV1CertificateSigningRequestApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCertificatesV1CertificateSigningRequestApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCertificatesV1CertificateSigningRequestApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCertificatesV1CertificateSigningRequestUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/certificates.k8s.io/v1/watch/certificatesigningrequests/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchCertificatesV1CertificateSigningRequestListResponse(response WatchCertificatesV1CertificateSigningRequestListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCertificatesV1CertificateSigningRequestListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCertificatesV1CertificateSigningRequestListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCertificatesV1CertificateSigningRequestListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCertificatesV1CertificateSigningRequestListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCertificatesV1CertificateSigningRequestListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCertificatesV1CertificateSigningRequestListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/certificates.k8s.io/v1/watch/certificatesigningrequests: unexpected response type: %T`, response)
	}
}

func encodeWatchCoordinationV1LeaseListForAllNamespacesResponse(response WatchCoordinationV1LeaseListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoordinationV1LeaseListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoordinationV1LeaseListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoordinationV1LeaseListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoordinationV1LeaseListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoordinationV1LeaseListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoordinationV1LeaseListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/coordination.k8s.io/v1/watch/leases: unexpected response type: %T`, response)
	}
}

func encodeWatchCoordinationV1NamespacedLeaseResponse(response WatchCoordinationV1NamespacedLeaseRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoordinationV1NamespacedLeaseApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoordinationV1NamespacedLeaseApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoordinationV1NamespacedLeaseApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoordinationV1NamespacedLeaseApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoordinationV1NamespacedLeaseApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoordinationV1NamespacedLeaseUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchCoordinationV1NamespacedLeaseListResponse(response WatchCoordinationV1NamespacedLeaseListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoordinationV1NamespacedLeaseListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoordinationV1NamespacedLeaseListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoordinationV1NamespacedLeaseListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoordinationV1NamespacedLeaseListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoordinationV1NamespacedLeaseListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoordinationV1NamespacedLeaseListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1ConfigMapListForAllNamespacesResponse(response WatchCoreV1ConfigMapListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1ConfigMapListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1ConfigMapListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1ConfigMapListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1ConfigMapListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1ConfigMapListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1ConfigMapListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/configmaps: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1EndpointsListForAllNamespacesResponse(response WatchCoreV1EndpointsListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1EndpointsListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1EndpointsListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1EndpointsListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1EndpointsListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1EndpointsListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1EndpointsListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/endpoints: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1EventListForAllNamespacesResponse(response WatchCoreV1EventListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1EventListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1EventListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1EventListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1EventListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1EventListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1EventListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/events: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1LimitRangeListForAllNamespacesResponse(response WatchCoreV1LimitRangeListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1LimitRangeListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1LimitRangeListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1LimitRangeListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1LimitRangeListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1LimitRangeListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1LimitRangeListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/limitranges: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespaceResponse(response WatchCoreV1NamespaceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespaceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespaceApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespaceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespaceApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespaceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespaceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespaceListResponse(response WatchCoreV1NamespaceListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespaceListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespaceListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespaceListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespaceListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespaceListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespaceListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedConfigMapResponse(response WatchCoreV1NamespacedConfigMapRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedConfigMapApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedConfigMapApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedConfigMapApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedConfigMapApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedConfigMapApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedConfigMapUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/configmaps/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedConfigMapListResponse(response WatchCoreV1NamespacedConfigMapListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedConfigMapListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedConfigMapListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedConfigMapListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedConfigMapListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedConfigMapListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedConfigMapListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/configmaps: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedEndpointsResponse(response WatchCoreV1NamespacedEndpointsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedEndpointsApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedEndpointsApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedEndpointsApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedEndpointsApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedEndpointsApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedEndpointsUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/endpoints/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedEndpointsListResponse(response WatchCoreV1NamespacedEndpointsListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedEndpointsListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedEndpointsListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedEndpointsListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedEndpointsListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedEndpointsListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedEndpointsListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/endpoints: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedEventResponse(response WatchCoreV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedEventApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedEventApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/events/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedEventListResponse(response WatchCoreV1NamespacedEventListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedEventListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedEventListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedEventListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedEventListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedEventListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedEventListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/events: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedLimitRangeResponse(response WatchCoreV1NamespacedLimitRangeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedLimitRangeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedLimitRangeApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedLimitRangeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedLimitRangeApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedLimitRangeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedLimitRangeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/limitranges/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedLimitRangeListResponse(response WatchCoreV1NamespacedLimitRangeListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedLimitRangeListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedLimitRangeListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedLimitRangeListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedLimitRangeListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedLimitRangeListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedLimitRangeListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/limitranges: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedPersistentVolumeClaimResponse(response WatchCoreV1NamespacedPersistentVolumeClaimRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedPersistentVolumeClaimApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedPersistentVolumeClaimApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedPersistentVolumeClaimApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedPersistentVolumeClaimApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedPersistentVolumeClaimApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedPersistentVolumeClaimUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedPersistentVolumeClaimListResponse(response WatchCoreV1NamespacedPersistentVolumeClaimListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedPersistentVolumeClaimListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedPersistentVolumeClaimListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedPersistentVolumeClaimListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedPersistentVolumeClaimListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedPersistentVolumeClaimListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedPersistentVolumeClaimListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedPodResponse(response WatchCoreV1NamespacedPodRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedPodApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedPodApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedPodApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedPodApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedPodApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedPodUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/pods/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedPodListResponse(response WatchCoreV1NamespacedPodListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedPodListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedPodListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedPodListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedPodListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedPodListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedPodListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/pods: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedPodTemplateResponse(response WatchCoreV1NamespacedPodTemplateRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedPodTemplateApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedPodTemplateApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedPodTemplateApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedPodTemplateApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedPodTemplateApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedPodTemplateUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/podtemplates/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedPodTemplateListResponse(response WatchCoreV1NamespacedPodTemplateListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedPodTemplateListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedPodTemplateListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedPodTemplateListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedPodTemplateListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedPodTemplateListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedPodTemplateListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/podtemplates: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedReplicationControllerResponse(response WatchCoreV1NamespacedReplicationControllerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedReplicationControllerApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedReplicationControllerApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedReplicationControllerApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedReplicationControllerApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedReplicationControllerApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedReplicationControllerUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedReplicationControllerListResponse(response WatchCoreV1NamespacedReplicationControllerListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedReplicationControllerListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedReplicationControllerListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedReplicationControllerListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedReplicationControllerListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedReplicationControllerListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedReplicationControllerListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/replicationcontrollers: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedResourceQuotaResponse(response WatchCoreV1NamespacedResourceQuotaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedResourceQuotaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedResourceQuotaApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedResourceQuotaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedResourceQuotaApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedResourceQuotaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedResourceQuotaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedResourceQuotaListResponse(response WatchCoreV1NamespacedResourceQuotaListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedResourceQuotaListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedResourceQuotaListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedResourceQuotaListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedResourceQuotaListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedResourceQuotaListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedResourceQuotaListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/resourcequotas: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedSecretResponse(response WatchCoreV1NamespacedSecretRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedSecretApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedSecretApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedSecretApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedSecretApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedSecretApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedSecretUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/secrets/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedSecretListResponse(response WatchCoreV1NamespacedSecretListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedSecretListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedSecretListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedSecretListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedSecretListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedSecretListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedSecretListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/secrets: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedServiceResponse(response WatchCoreV1NamespacedServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedServiceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedServiceApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedServiceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedServiceApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedServiceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedServiceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/services/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedServiceAccountResponse(response WatchCoreV1NamespacedServiceAccountRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedServiceAccountApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedServiceAccountApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedServiceAccountApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedServiceAccountApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedServiceAccountApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedServiceAccountUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedServiceAccountListResponse(response WatchCoreV1NamespacedServiceAccountListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedServiceAccountListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedServiceAccountListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedServiceAccountListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedServiceAccountListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedServiceAccountListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedServiceAccountListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/serviceaccounts: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedServiceListResponse(response WatchCoreV1NamespacedServiceListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NamespacedServiceListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedServiceListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedServiceListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NamespacedServiceListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NamespacedServiceListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NamespacedServiceListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/namespaces/{namespace}/services: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NodeResponse(response WatchCoreV1NodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NodeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NodeApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NodeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NodeApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NodeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/nodes/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NodeListResponse(response WatchCoreV1NodeListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1NodeListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NodeListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1NodeListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1NodeListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1NodeListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1NodeListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/nodes: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1PersistentVolumeResponse(response WatchCoreV1PersistentVolumeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1PersistentVolumeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1PersistentVolumeApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1PersistentVolumeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1PersistentVolumeApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1PersistentVolumeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1PersistentVolumeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/persistentvolumes/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1PersistentVolumeClaimListForAllNamespacesResponse(response WatchCoreV1PersistentVolumeClaimListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1PersistentVolumeClaimListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/persistentvolumeclaims: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1PersistentVolumeListResponse(response WatchCoreV1PersistentVolumeListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1PersistentVolumeListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1PersistentVolumeListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1PersistentVolumeListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1PersistentVolumeListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1PersistentVolumeListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1PersistentVolumeListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/persistentvolumes: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1PodListForAllNamespacesResponse(response WatchCoreV1PodListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1PodListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1PodListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1PodListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1PodListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1PodListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1PodListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/pods: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1PodTemplateListForAllNamespacesResponse(response WatchCoreV1PodTemplateListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1PodTemplateListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1PodTemplateListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1PodTemplateListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1PodTemplateListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1PodTemplateListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1PodTemplateListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/podtemplates: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1ReplicationControllerListForAllNamespacesResponse(response WatchCoreV1ReplicationControllerListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1ReplicationControllerListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1ReplicationControllerListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1ReplicationControllerListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1ReplicationControllerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1ReplicationControllerListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1ReplicationControllerListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/replicationcontrollers: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1ResourceQuotaListForAllNamespacesResponse(response WatchCoreV1ResourceQuotaListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1ResourceQuotaListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1ResourceQuotaListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1ResourceQuotaListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1ResourceQuotaListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1ResourceQuotaListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1ResourceQuotaListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/resourcequotas: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1SecretListForAllNamespacesResponse(response WatchCoreV1SecretListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1SecretListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1SecretListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1SecretListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1SecretListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1SecretListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1SecretListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/secrets: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1ServiceAccountListForAllNamespacesResponse(response WatchCoreV1ServiceAccountListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1ServiceAccountListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1ServiceAccountListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1ServiceAccountListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1ServiceAccountListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1ServiceAccountListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1ServiceAccountListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/serviceaccounts: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1ServiceListForAllNamespacesResponse(response WatchCoreV1ServiceListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchCoreV1ServiceListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1ServiceListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchCoreV1ServiceListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchCoreV1ServiceListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchCoreV1ServiceListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchCoreV1ServiceListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/api/v1/watch/services: unexpected response type: %T`, response)
	}
}

func encodeWatchDiscoveryV1EndpointSliceListForAllNamespacesResponse(response WatchDiscoveryV1EndpointSliceListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchDiscoveryV1EndpointSliceListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1/watch/endpointslices: unexpected response type: %T`, response)
	}
}

func encodeWatchDiscoveryV1NamespacedEndpointSliceResponse(response WatchDiscoveryV1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchDiscoveryV1NamespacedEndpointSliceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchDiscoveryV1NamespacedEndpointSliceApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchDiscoveryV1NamespacedEndpointSliceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchDiscoveryV1NamespacedEndpointSliceApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchDiscoveryV1NamespacedEndpointSliceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchDiscoveryV1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1/watch/namespaces/{namespace}/endpointslices/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchDiscoveryV1NamespacedEndpointSliceListResponse(response WatchDiscoveryV1NamespacedEndpointSliceListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchDiscoveryV1NamespacedEndpointSliceListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchDiscoveryV1NamespacedEndpointSliceListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchDiscoveryV1NamespacedEndpointSliceListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchDiscoveryV1NamespacedEndpointSliceListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchDiscoveryV1NamespacedEndpointSliceListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchDiscoveryV1NamespacedEndpointSliceListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1/watch/namespaces/{namespace}/endpointslices: unexpected response type: %T`, response)
	}
}

func encodeWatchDiscoveryV1beta1EndpointSliceListForAllNamespacesResponse(response WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1beta1/watch/endpointslices: unexpected response type: %T`, response)
	}
}

func encodeWatchDiscoveryV1beta1NamespacedEndpointSliceResponse(response WatchDiscoveryV1beta1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchDiscoveryV1beta1NamespacedEndpointSliceApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchDiscoveryV1beta1NamespacedEndpointSliceApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchDiscoveryV1beta1NamespacedEndpointSliceApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchDiscoveryV1beta1NamespacedEndpointSliceApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchDiscoveryV1beta1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1beta1/watch/namespaces/{namespace}/endpointslices/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchDiscoveryV1beta1NamespacedEndpointSliceListResponse(response WatchDiscoveryV1beta1NamespacedEndpointSliceListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchDiscoveryV1beta1NamespacedEndpointSliceListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchDiscoveryV1beta1NamespacedEndpointSliceListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchDiscoveryV1beta1NamespacedEndpointSliceListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchDiscoveryV1beta1NamespacedEndpointSliceListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchDiscoveryV1beta1NamespacedEndpointSliceListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchDiscoveryV1beta1NamespacedEndpointSliceListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/discovery.k8s.io/v1beta1/watch/namespaces/{namespace}/endpointslices: unexpected response type: %T`, response)
	}
}

func encodeWatchEventsV1EventListForAllNamespacesResponse(response WatchEventsV1EventListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchEventsV1EventListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchEventsV1EventListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchEventsV1EventListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchEventsV1EventListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchEventsV1EventListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchEventsV1EventListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1/watch/events: unexpected response type: %T`, response)
	}
}

func encodeWatchEventsV1NamespacedEventResponse(response WatchEventsV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchEventsV1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchEventsV1NamespacedEventApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchEventsV1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchEventsV1NamespacedEventApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchEventsV1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchEventsV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1/watch/namespaces/{namespace}/events/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchEventsV1NamespacedEventListResponse(response WatchEventsV1NamespacedEventListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchEventsV1NamespacedEventListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchEventsV1NamespacedEventListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchEventsV1NamespacedEventListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchEventsV1NamespacedEventListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchEventsV1NamespacedEventListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchEventsV1NamespacedEventListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1/watch/namespaces/{namespace}/events: unexpected response type: %T`, response)
	}
}

func encodeWatchEventsV1beta1EventListForAllNamespacesResponse(response WatchEventsV1beta1EventListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchEventsV1beta1EventListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchEventsV1beta1EventListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchEventsV1beta1EventListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchEventsV1beta1EventListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchEventsV1beta1EventListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchEventsV1beta1EventListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1beta1/watch/events: unexpected response type: %T`, response)
	}
}

func encodeWatchEventsV1beta1NamespacedEventResponse(response WatchEventsV1beta1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchEventsV1beta1NamespacedEventApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchEventsV1beta1NamespacedEventApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchEventsV1beta1NamespacedEventApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchEventsV1beta1NamespacedEventApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchEventsV1beta1NamespacedEventApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchEventsV1beta1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchEventsV1beta1NamespacedEventListResponse(response WatchEventsV1beta1NamespacedEventListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchEventsV1beta1NamespacedEventListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchEventsV1beta1NamespacedEventListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchEventsV1beta1NamespacedEventListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchEventsV1beta1NamespacedEventListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchEventsV1beta1NamespacedEventListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchEventsV1beta1NamespacedEventListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events: unexpected response type: %T`, response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta1FlowSchemaResponse(response WatchFlowcontrolApiserverV1beta1FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta1FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/flowschemas/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta1FlowSchemaListResponse(response WatchFlowcontrolApiserverV1beta1FlowSchemaListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta1FlowSchemaListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/flowschemas: unexpected response type: %T`, response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(response WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/prioritylevelconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListResponse(response WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/prioritylevelconfigurations: unexpected response type: %T`, response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta2FlowSchemaResponse(response WatchFlowcontrolApiserverV1beta2FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta2FlowSchemaUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta2FlowSchemaListResponse(response WatchFlowcontrolApiserverV1beta2FlowSchemaListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta2FlowSchemaListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas: unexpected response type: %T`, response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(response WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListResponse(response WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations: unexpected response type: %T`, response)
	}
}

func encodeWatchInternalApiserverV1alpha1StorageVersionResponse(response WatchInternalApiserverV1alpha1StorageVersionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchInternalApiserverV1alpha1StorageVersionApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchInternalApiserverV1alpha1StorageVersionApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchInternalApiserverV1alpha1StorageVersionApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchInternalApiserverV1alpha1StorageVersionUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/internal.apiserver.k8s.io/v1alpha1/watch/storageversions/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchInternalApiserverV1alpha1StorageVersionListResponse(response WatchInternalApiserverV1alpha1StorageVersionListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchInternalApiserverV1alpha1StorageVersionListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchInternalApiserverV1alpha1StorageVersionListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchInternalApiserverV1alpha1StorageVersionListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchInternalApiserverV1alpha1StorageVersionListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchInternalApiserverV1alpha1StorageVersionListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchInternalApiserverV1alpha1StorageVersionListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/internal.apiserver.k8s.io/v1alpha1/watch/storageversions: unexpected response type: %T`, response)
	}
}

func encodeWatchNetworkingV1IngressClassResponse(response WatchNetworkingV1IngressClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchNetworkingV1IngressClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNetworkingV1IngressClassApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchNetworkingV1IngressClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchNetworkingV1IngressClassApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchNetworkingV1IngressClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchNetworkingV1IngressClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/watch/ingressclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchNetworkingV1IngressClassListResponse(response WatchNetworkingV1IngressClassListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchNetworkingV1IngressClassListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNetworkingV1IngressClassListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchNetworkingV1IngressClassListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchNetworkingV1IngressClassListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchNetworkingV1IngressClassListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchNetworkingV1IngressClassListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/watch/ingressclasses: unexpected response type: %T`, response)
	}
}

func encodeWatchNetworkingV1IngressListForAllNamespacesResponse(response WatchNetworkingV1IngressListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchNetworkingV1IngressListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNetworkingV1IngressListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchNetworkingV1IngressListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchNetworkingV1IngressListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchNetworkingV1IngressListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchNetworkingV1IngressListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/watch/ingresses: unexpected response type: %T`, response)
	}
}

func encodeWatchNetworkingV1NamespacedIngressResponse(response WatchNetworkingV1NamespacedIngressRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchNetworkingV1NamespacedIngressApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNetworkingV1NamespacedIngressApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchNetworkingV1NamespacedIngressApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchNetworkingV1NamespacedIngressApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchNetworkingV1NamespacedIngressApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchNetworkingV1NamespacedIngressUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchNetworkingV1NamespacedIngressListResponse(response WatchNetworkingV1NamespacedIngressListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchNetworkingV1NamespacedIngressListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNetworkingV1NamespacedIngressListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchNetworkingV1NamespacedIngressListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchNetworkingV1NamespacedIngressListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchNetworkingV1NamespacedIngressListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchNetworkingV1NamespacedIngressListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses: unexpected response type: %T`, response)
	}
}

func encodeWatchNetworkingV1NamespacedNetworkPolicyResponse(response WatchNetworkingV1NamespacedNetworkPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchNetworkingV1NamespacedNetworkPolicyApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNetworkingV1NamespacedNetworkPolicyApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchNetworkingV1NamespacedNetworkPolicyApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchNetworkingV1NamespacedNetworkPolicyApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchNetworkingV1NamespacedNetworkPolicyApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchNetworkingV1NamespacedNetworkPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchNetworkingV1NamespacedNetworkPolicyListResponse(response WatchNetworkingV1NamespacedNetworkPolicyListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchNetworkingV1NamespacedNetworkPolicyListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNetworkingV1NamespacedNetworkPolicyListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchNetworkingV1NamespacedNetworkPolicyListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchNetworkingV1NamespacedNetworkPolicyListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchNetworkingV1NamespacedNetworkPolicyListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchNetworkingV1NamespacedNetworkPolicyListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies: unexpected response type: %T`, response)
	}
}

func encodeWatchNetworkingV1NetworkPolicyListForAllNamespacesResponse(response WatchNetworkingV1NetworkPolicyListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchNetworkingV1NetworkPolicyListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/networking.k8s.io/v1/watch/networkpolicies: unexpected response type: %T`, response)
	}
}

func encodeWatchNodeV1RuntimeClassResponse(response WatchNodeV1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchNodeV1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNodeV1RuntimeClassApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchNodeV1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchNodeV1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchNodeV1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchNodeV1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1/watch/runtimeclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchNodeV1RuntimeClassListResponse(response WatchNodeV1RuntimeClassListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchNodeV1RuntimeClassListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNodeV1RuntimeClassListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchNodeV1RuntimeClassListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchNodeV1RuntimeClassListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchNodeV1RuntimeClassListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchNodeV1RuntimeClassListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1/watch/runtimeclasses: unexpected response type: %T`, response)
	}
}

func encodeWatchNodeV1alpha1RuntimeClassResponse(response WatchNodeV1alpha1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchNodeV1alpha1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNodeV1alpha1RuntimeClassApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchNodeV1alpha1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchNodeV1alpha1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1alpha1/watch/runtimeclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchNodeV1alpha1RuntimeClassListResponse(response WatchNodeV1alpha1RuntimeClassListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchNodeV1alpha1RuntimeClassListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNodeV1alpha1RuntimeClassListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchNodeV1alpha1RuntimeClassListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchNodeV1alpha1RuntimeClassListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchNodeV1alpha1RuntimeClassListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchNodeV1alpha1RuntimeClassListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1alpha1/watch/runtimeclasses: unexpected response type: %T`, response)
	}
}

func encodeWatchNodeV1beta1RuntimeClassResponse(response WatchNodeV1beta1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchNodeV1beta1RuntimeClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNodeV1beta1RuntimeClassApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchNodeV1beta1RuntimeClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchNodeV1beta1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1beta1/watch/runtimeclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchNodeV1beta1RuntimeClassListResponse(response WatchNodeV1beta1RuntimeClassListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchNodeV1beta1RuntimeClassListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNodeV1beta1RuntimeClassListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchNodeV1beta1RuntimeClassListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchNodeV1beta1RuntimeClassListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchNodeV1beta1RuntimeClassListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchNodeV1beta1RuntimeClassListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/node.k8s.io/v1beta1/watch/runtimeclasses: unexpected response type: %T`, response)
	}
}

func encodeWatchPolicyV1NamespacedPodDisruptionBudgetResponse(response WatchPolicyV1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchPolicyV1NamespacedPodDisruptionBudgetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchPolicyV1NamespacedPodDisruptionBudgetApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchPolicyV1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchPolicyV1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchPolicyV1NamespacedPodDisruptionBudgetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchPolicyV1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchPolicyV1NamespacedPodDisruptionBudgetListResponse(response WatchPolicyV1NamespacedPodDisruptionBudgetListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchPolicyV1NamespacedPodDisruptionBudgetListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchPolicyV1NamespacedPodDisruptionBudgetListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchPolicyV1NamespacedPodDisruptionBudgetListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchPolicyV1NamespacedPodDisruptionBudgetListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchPolicyV1NamespacedPodDisruptionBudgetListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchPolicyV1NamespacedPodDisruptionBudgetListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1/watch/namespaces/{namespace}/poddisruptionbudgets: unexpected response type: %T`, response)
	}
}

func encodeWatchPolicyV1PodDisruptionBudgetListForAllNamespacesResponse(response WatchPolicyV1PodDisruptionBudgetListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchPolicyV1PodDisruptionBudgetListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1/watch/poddisruptionbudgets: unexpected response type: %T`, response)
	}
}

func encodeWatchPolicyV1beta1NamespacedPodDisruptionBudgetResponse(response WatchPolicyV1beta1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchPolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchPolicyV1beta1NamespacedPodDisruptionBudgetApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchPolicyV1beta1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchPolicyV1beta1NamespacedPodDisruptionBudgetApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchPolicyV1beta1NamespacedPodDisruptionBudgetApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchPolicyV1beta1NamespacedPodDisruptionBudgetListResponse(response WatchPolicyV1beta1NamespacedPodDisruptionBudgetListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchPolicyV1beta1NamespacedPodDisruptionBudgetListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchPolicyV1beta1NamespacedPodDisruptionBudgetListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchPolicyV1beta1NamespacedPodDisruptionBudgetListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchPolicyV1beta1NamespacedPodDisruptionBudgetListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchPolicyV1beta1NamespacedPodDisruptionBudgetListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchPolicyV1beta1NamespacedPodDisruptionBudgetListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets: unexpected response type: %T`, response)
	}
}

func encodeWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesResponse(response WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/watch/poddisruptionbudgets: unexpected response type: %T`, response)
	}
}

func encodeWatchPolicyV1beta1PodSecurityPolicyResponse(response WatchPolicyV1beta1PodSecurityPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchPolicyV1beta1PodSecurityPolicyApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchPolicyV1beta1PodSecurityPolicyApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchPolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchPolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchPolicyV1beta1PodSecurityPolicyApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchPolicyV1beta1PodSecurityPolicyUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/watch/podsecuritypolicies/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchPolicyV1beta1PodSecurityPolicyListResponse(response WatchPolicyV1beta1PodSecurityPolicyListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchPolicyV1beta1PodSecurityPolicyListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchPolicyV1beta1PodSecurityPolicyListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchPolicyV1beta1PodSecurityPolicyListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchPolicyV1beta1PodSecurityPolicyListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchPolicyV1beta1PodSecurityPolicyListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchPolicyV1beta1PodSecurityPolicyListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/policy/v1beta1/watch/podsecuritypolicies: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1ClusterRoleResponse(response WatchRbacAuthorizationV1ClusterRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchRbacAuthorizationV1ClusterRoleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1ClusterRoleApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1ClusterRoleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchRbacAuthorizationV1ClusterRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/watch/clusterroles/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1ClusterRoleBindingResponse(response WatchRbacAuthorizationV1ClusterRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1ClusterRoleBindingApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1ClusterRoleBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchRbacAuthorizationV1ClusterRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1ClusterRoleBindingListResponse(response WatchRbacAuthorizationV1ClusterRoleBindingListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchRbacAuthorizationV1ClusterRoleBindingListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1ClusterRoleBindingListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1ClusterRoleBindingListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchRbacAuthorizationV1ClusterRoleBindingListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1ClusterRoleBindingListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchRbacAuthorizationV1ClusterRoleBindingListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1ClusterRoleListResponse(response WatchRbacAuthorizationV1ClusterRoleListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchRbacAuthorizationV1ClusterRoleListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1ClusterRoleListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1ClusterRoleListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchRbacAuthorizationV1ClusterRoleListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1ClusterRoleListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchRbacAuthorizationV1ClusterRoleListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/watch/clusterroles: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1NamespacedRoleResponse(response WatchRbacAuthorizationV1NamespacedRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchRbacAuthorizationV1NamespacedRoleApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1NamespacedRoleApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1NamespacedRoleApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchRbacAuthorizationV1NamespacedRoleApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1NamespacedRoleApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchRbacAuthorizationV1NamespacedRoleUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1NamespacedRoleBindingResponse(response WatchRbacAuthorizationV1NamespacedRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchRbacAuthorizationV1NamespacedRoleBindingApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1NamespacedRoleBindingApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1NamespacedRoleBindingApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchRbacAuthorizationV1NamespacedRoleBindingApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1NamespacedRoleBindingApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchRbacAuthorizationV1NamespacedRoleBindingUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1NamespacedRoleBindingListResponse(response WatchRbacAuthorizationV1NamespacedRoleBindingListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchRbacAuthorizationV1NamespacedRoleBindingListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1NamespacedRoleBindingListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1NamespacedRoleBindingListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchRbacAuthorizationV1NamespacedRoleBindingListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1NamespacedRoleBindingListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchRbacAuthorizationV1NamespacedRoleBindingListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1NamespacedRoleListResponse(response WatchRbacAuthorizationV1NamespacedRoleListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchRbacAuthorizationV1NamespacedRoleListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1NamespacedRoleListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1NamespacedRoleListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchRbacAuthorizationV1NamespacedRoleListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1NamespacedRoleListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchRbacAuthorizationV1NamespacedRoleListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1RoleBindingListForAllNamespacesResponse(response WatchRbacAuthorizationV1RoleBindingListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchRbacAuthorizationV1RoleBindingListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/watch/rolebindings: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1RoleListForAllNamespacesResponse(response WatchRbacAuthorizationV1RoleListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchRbacAuthorizationV1RoleListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/rbac.authorization.k8s.io/v1/watch/roles: unexpected response type: %T`, response)
	}
}

func encodeWatchSchedulingV1PriorityClassResponse(response WatchSchedulingV1PriorityClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchSchedulingV1PriorityClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchSchedulingV1PriorityClassApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchSchedulingV1PriorityClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchSchedulingV1PriorityClassApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchSchedulingV1PriorityClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchSchedulingV1PriorityClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/scheduling.k8s.io/v1/watch/priorityclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchSchedulingV1PriorityClassListResponse(response WatchSchedulingV1PriorityClassListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchSchedulingV1PriorityClassListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchSchedulingV1PriorityClassListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchSchedulingV1PriorityClassListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchSchedulingV1PriorityClassListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchSchedulingV1PriorityClassListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchSchedulingV1PriorityClassListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/scheduling.k8s.io/v1/watch/priorityclasses: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1CSIDriverResponse(response WatchStorageV1CSIDriverRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchStorageV1CSIDriverApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1CSIDriverApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchStorageV1CSIDriverApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchStorageV1CSIDriverApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchStorageV1CSIDriverApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchStorageV1CSIDriverUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/watch/csidrivers/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1CSIDriverListResponse(response WatchStorageV1CSIDriverListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchStorageV1CSIDriverListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1CSIDriverListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchStorageV1CSIDriverListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchStorageV1CSIDriverListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchStorageV1CSIDriverListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchStorageV1CSIDriverListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/watch/csidrivers: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1CSINodeResponse(response WatchStorageV1CSINodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchStorageV1CSINodeApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1CSINodeApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchStorageV1CSINodeApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchStorageV1CSINodeApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchStorageV1CSINodeApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchStorageV1CSINodeUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/watch/csinodes/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1CSINodeListResponse(response WatchStorageV1CSINodeListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchStorageV1CSINodeListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1CSINodeListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchStorageV1CSINodeListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchStorageV1CSINodeListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchStorageV1CSINodeListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchStorageV1CSINodeListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/watch/csinodes: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1StorageClassResponse(response WatchStorageV1StorageClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchStorageV1StorageClassApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1StorageClassApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchStorageV1StorageClassApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchStorageV1StorageClassApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchStorageV1StorageClassApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchStorageV1StorageClassUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/watch/storageclasses/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1StorageClassListResponse(response WatchStorageV1StorageClassListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchStorageV1StorageClassListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1StorageClassListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchStorageV1StorageClassListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchStorageV1StorageClassListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchStorageV1StorageClassListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchStorageV1StorageClassListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/watch/storageclasses: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1VolumeAttachmentResponse(response WatchStorageV1VolumeAttachmentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchStorageV1VolumeAttachmentApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1VolumeAttachmentApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchStorageV1VolumeAttachmentApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchStorageV1VolumeAttachmentApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchStorageV1VolumeAttachmentApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchStorageV1VolumeAttachmentUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/watch/volumeattachments/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1VolumeAttachmentListResponse(response WatchStorageV1VolumeAttachmentListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchStorageV1VolumeAttachmentListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1VolumeAttachmentListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchStorageV1VolumeAttachmentListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchStorageV1VolumeAttachmentListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchStorageV1VolumeAttachmentListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchStorageV1VolumeAttachmentListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1/watch/volumeattachments: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesResponse(response WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1alpha1/watch/csistoragecapacities: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1alpha1NamespacedCSIStorageCapacityResponse(response WatchStorageV1alpha1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1alpha1NamespacedCSIStorageCapacityApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchStorageV1alpha1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchStorageV1alpha1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchStorageV1alpha1NamespacedCSIStorageCapacityApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1alpha1/watch/namespaces/{namespace}/csistoragecapacities/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1alpha1NamespacedCSIStorageCapacityListResponse(response WatchStorageV1alpha1NamespacedCSIStorageCapacityListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchStorageV1alpha1NamespacedCSIStorageCapacityListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1alpha1NamespacedCSIStorageCapacityListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchStorageV1alpha1NamespacedCSIStorageCapacityListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchStorageV1alpha1NamespacedCSIStorageCapacityListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchStorageV1alpha1NamespacedCSIStorageCapacityListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchStorageV1alpha1NamespacedCSIStorageCapacityListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1alpha1/watch/namespaces/{namespace}/csistoragecapacities: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1beta1CSIStorageCapacityListForAllNamespacesResponse(response WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1beta1/watch/csistoragecapacities: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1beta1NamespacedCSIStorageCapacityResponse(response WatchStorageV1beta1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1beta1NamespacedCSIStorageCapacityApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchStorageV1beta1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchStorageV1beta1NamespacedCSIStorageCapacityApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchStorageV1beta1NamespacedCSIStorageCapacityApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchStorageV1beta1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1beta1/watch/namespaces/{namespace}/csistoragecapacities/{name}: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1beta1NamespacedCSIStorageCapacityListResponse(response WatchStorageV1beta1NamespacedCSIStorageCapacityListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WatchStorageV1beta1NamespacedCSIStorageCapacityListApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1beta1NamespacedCSIStorageCapacityListApplicationJSONStreamWatchOK:
		w.Header().Set("Content-Type", "application/json;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/json;stream=watch encoder not implemented`)
	case *WatchStorageV1beta1NamespacedCSIStorageCapacityListApplicationVndKubernetesProtobufOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf encoder not implemented`)
	case *WatchStorageV1beta1NamespacedCSIStorageCapacityListApplicationVndKubernetesProtobufStreamWatchOK:
		w.Header().Set("Content-Type", "application/vnd.kubernetes.protobuf;stream=watch")
		w.WriteHeader(200)
		return errors.New(`application/vnd.kubernetes.protobuf;stream=watch encoder not implemented`)
	case *WatchStorageV1beta1NamespacedCSIStorageCapacityListApplicationYamlOK:
		w.Header().Set("Content-Type", "application/yaml")
		w.WriteHeader(200)
		return errors.New(`application/yaml encoder not implemented`)
	case *WatchStorageV1beta1NamespacedCSIStorageCapacityListUnauthorized:
		w.WriteHeader(401)
		return nil
	default:
		return errors.Errorf(`/apis/storage.k8s.io/v1beta1/watch/namespaces/{namespace}/csistoragecapacities: unexpected response type: %T`, response)
	}
}
