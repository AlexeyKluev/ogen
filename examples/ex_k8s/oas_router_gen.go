// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	http.NotFound(w, r)
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	args := map[string]string{}
	// Static code generated router with unwrapped path search.
	switch r.Method {
	case "GET":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
				elem = elem[len(prefix):]
			} else {
				break
			}

			if len(elem) == 0 {
				s.handleGetCodeVersionRequest(args, w, r)
				return
			}
			switch elem[0] {
			case '.': // Prefix: ".well-known/openid-configuration/"
				if prefix := ".well-known/openid-configuration/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
					elem = elem[len(prefix):]
				} else {
					break
				}

				// Leaf: GetServiceAccountIssuerOpenIDConfiguration
				s.handleGetServiceAccountIssuerOpenIDConfigurationRequest(args, w, r)
				return
			case 'a': // Prefix: "api"
				if prefix := "api"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
					elem = elem[len(prefix):]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleGetCoreAPIVersionsRequest(args, w, r)
					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
						elem = elem[len(prefix):]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleGetCoreAPIVersionsRequest(args, w, r)
						return
					}
					switch elem[0] {
					case 'v': // Prefix: "v1/"
						if prefix := "v1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
							elem = elem[len(prefix):]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetCoreV1APIResourcesRequest(args, w, r)
							return
						}
						switch elem[0] {
						case 'c': // Prefix: "co"
							if prefix := "co"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleListCoreV1ConfigMapForAllNamespacesRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 'm': // Prefix: "mponentstatuses"
								if prefix := "mponentstatuses"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListCoreV1ComponentStatusRequest(args, w, r)
									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Param: "name"
									// Leaf parameter
									args["name"] = elem

									// Leaf: ReadCoreV1ComponentStatus
									s.handleReadCoreV1ComponentStatusRequest(args, w, r)
									return
								case 'n': // Prefix: "nfigmaps"
									if prefix := "nfigmaps"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListCoreV1ConfigMapForAllNamespaces
									s.handleListCoreV1ConfigMapForAllNamespacesRequest(args, w, r)
									return
								}
							case 'n': // Prefix: "nfigmaps"
								if prefix := "nfigmaps"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								// Leaf: ListCoreV1ConfigMapForAllNamespaces
								s.handleListCoreV1ConfigMapForAllNamespacesRequest(args, w, r)
								return
							}
						case 'e': // Prefix: "e"
							if prefix := "e"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleListCoreV1EventForAllNamespacesRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 'n': // Prefix: "ndpoints"
								if prefix := "ndpoints"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListCoreV1EndpointsForAllNamespacesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'v': // Prefix: "vents"
									if prefix := "vents"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListCoreV1EventForAllNamespaces
									s.handleListCoreV1EventForAllNamespacesRequest(args, w, r)
									return
								}
							case 'v': // Prefix: "vents"
								if prefix := "vents"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								// Leaf: ListCoreV1EventForAllNamespaces
								s.handleListCoreV1EventForAllNamespacesRequest(args, w, r)
								return
							}
						case 'l': // Prefix: "limitranges"
							if prefix := "limitranges"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							// Leaf: ListCoreV1LimitRangeForAllNamespaces
							s.handleListCoreV1LimitRangeForAllNamespacesRequest(args, w, r)
							return
						case 'n': // Prefix: "n"
							if prefix := "n"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleListCoreV1NodeRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 'a': // Prefix: "amespaces"
								if prefix := "amespaces"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListCoreV1NamespaceRequest(args, w, r)
									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Param: "namespace"
									// Match until one of "/"
									idx := strings.IndexAny(elem, "/")
									if idx > 0 {
										args["namespace"] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											s.handleReadCoreV1NamespaceRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListCoreV1NamespacedEndpointsRequest(args, w, r)
												return
											}
											switch elem[0] {
											case 'c': // Prefix: "configmaps"
												if prefix := "configmaps"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListCoreV1NamespacedConfigMapRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: ReadCoreV1NamespacedConfigMap
													s.handleReadCoreV1NamespacedConfigMapRequest(args, w, r)
													return
												case 'e': // Prefix: "endpoints"
													if prefix := "endpoints"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Leaf: ListCoreV1NamespacedEndpoints
													s.handleListCoreV1NamespacedEndpointsRequest(args, w, r)
													return
												}
											case 'e': // Prefix: "e"
												if prefix := "e"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListCoreV1NamespacedEventRequest(args, w, r)
													return
												}
												switch elem[0] {
												case 'n': // Prefix: "ndpoints"
													if prefix := "ndpoints"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListCoreV1NamespacedEndpointsRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args["name"] = elem

														// Leaf: ReadCoreV1NamespacedEndpoints
														s.handleReadCoreV1NamespacedEndpointsRequest(args, w, r)
														return
													case 'v': // Prefix: "vents"
														if prefix := "vents"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Leaf: ListCoreV1NamespacedEvent
														s.handleListCoreV1NamespacedEventRequest(args, w, r)
														return
													}
												case 'v': // Prefix: "vents"
													if prefix := "vents"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListCoreV1NamespacedEventRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args["name"] = elem

														// Leaf: ReadCoreV1NamespacedEvent
														s.handleReadCoreV1NamespacedEventRequest(args, w, r)
														return
													}
												}
											case 'l': // Prefix: "limitranges"
												if prefix := "limitranges"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListCoreV1NamespacedLimitRangeRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: ReadCoreV1NamespacedLimitRange
													s.handleReadCoreV1NamespacedLimitRangeRequest(args, w, r)
													return
												}
											case 'p': // Prefix: "p"
												if prefix := "p"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListCoreV1NamespacedPodRequest(args, w, r)
													return
												}
												switch elem[0] {
												case 'e': // Prefix: "ersistentvolumeclaims"
													if prefix := "ersistentvolumeclaims"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListCoreV1NamespacedPersistentVolumeClaimRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Match until one of "/"
														idx := strings.IndexAny(elem, "/")
														if idx > 0 {
															args["name"] = elem[:idx]
															elem = elem[idx:]

															if len(elem) == 0 {
																s.handleReadCoreV1NamespacedPersistentVolumeClaimRequest(args, w, r)
																return
															}
															switch elem[0] {
															case '/': // Prefix: "/status"
																if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Leaf: ReadCoreV1NamespacedPersistentVolumeClaimStatus
																s.handleReadCoreV1NamespacedPersistentVolumeClaimStatusRequest(args, w, r)
																return
															}
														}
													case 'o': // Prefix: "ods"
														if prefix := "ods"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Leaf: ListCoreV1NamespacedPod
														s.handleListCoreV1NamespacedPodRequest(args, w, r)
														return
													}
												case 'o': // Prefix: "od"
													if prefix := "od"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListCoreV1NamespacedPodTemplateRequest(args, w, r)
														return
													}
													switch elem[0] {
													case 's': // Prefix: "s"
														if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleListCoreV1NamespacedPodRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Match until one of "/"
															idx := strings.IndexAny(elem, "/")
															if idx > 0 {
																args["name"] = elem[:idx]
																elem = elem[idx:]

																if len(elem) == 0 {
																	s.handleReadCoreV1NamespacedPodRequest(args, w, r)
																	return
																}
																switch elem[0] {
																case '/': // Prefix: "/"
																	if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																		elem = elem[len(prefix):]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		s.handleReadCoreV1NamespacedPodLogRequest(args, w, r)
																		return
																	}
																	switch elem[0] {
																	case 'e': // Prefix: "ephemeralcontainers"
																		if prefix := "ephemeralcontainers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																			elem = elem[len(prefix):]
																		} else {
																			break
																		}

																		if len(elem) == 0 {
																			s.handleReadCoreV1NamespacedPodEphemeralcontainersRequest(args, w, r)
																			return
																		}
																		switch elem[0] {
																		case 'l': // Prefix: "log"
																			if prefix := "log"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																				elem = elem[len(prefix):]
																			} else {
																				break
																			}

																			// Leaf: ReadCoreV1NamespacedPodLog
																			s.handleReadCoreV1NamespacedPodLogRequest(args, w, r)
																			return
																		}
																	case 'l': // Prefix: "log"
																		if prefix := "log"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																			elem = elem[len(prefix):]
																		} else {
																			break
																		}

																		// Leaf: ReadCoreV1NamespacedPodLog
																		s.handleReadCoreV1NamespacedPodLogRequest(args, w, r)
																		return
																	case 's': // Prefix: "status"
																		if prefix := "status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																			elem = elem[len(prefix):]
																		} else {
																			break
																		}

																		// Leaf: ReadCoreV1NamespacedPodStatus
																		s.handleReadCoreV1NamespacedPodStatusRequest(args, w, r)
																		return
																	}
																}
															}
														case 't': // Prefix: "templates"
															if prefix := "templates"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Leaf: ListCoreV1NamespacedPodTemplate
															s.handleListCoreV1NamespacedPodTemplateRequest(args, w, r)
															return
														}
													case 't': // Prefix: "templates"
														if prefix := "templates"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleListCoreV1NamespacedPodTemplateRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: ReadCoreV1NamespacedPodTemplate
															s.handleReadCoreV1NamespacedPodTemplateRequest(args, w, r)
															return
														}
													}
												}
											case 'r': // Prefix: "re"
												if prefix := "re"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListCoreV1NamespacedResourceQuotaRequest(args, w, r)
													return
												}
												switch elem[0] {
												case 'p': // Prefix: "plicationcontrollers"
													if prefix := "plicationcontrollers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListCoreV1NamespacedReplicationControllerRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Match until one of "/"
														idx := strings.IndexAny(elem, "/")
														if idx > 0 {
															args["name"] = elem[:idx]
															elem = elem[idx:]

															if len(elem) == 0 {
																s.handleReadCoreV1NamespacedReplicationControllerRequest(args, w, r)
																return
															}
															switch elem[0] {
															case '/': // Prefix: "/s"
																if prefix := "/s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																if len(elem) == 0 {
																	s.handleReadCoreV1NamespacedReplicationControllerStatusRequest(args, w, r)
																	return
																}
																switch elem[0] {
																case 'c': // Prefix: "cale"
																	if prefix := "cale"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																		elem = elem[len(prefix):]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		s.handleReadCoreV1NamespacedReplicationControllerScaleRequest(args, w, r)
																		return
																	}
																	switch elem[0] {
																	case 't': // Prefix: "tatus"
																		if prefix := "tatus"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																			elem = elem[len(prefix):]
																		} else {
																			break
																		}

																		// Leaf: ReadCoreV1NamespacedReplicationControllerStatus
																		s.handleReadCoreV1NamespacedReplicationControllerStatusRequest(args, w, r)
																		return
																	}
																case 't': // Prefix: "tatus"
																	if prefix := "tatus"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																		elem = elem[len(prefix):]
																	} else {
																		break
																	}

																	// Leaf: ReadCoreV1NamespacedReplicationControllerStatus
																	s.handleReadCoreV1NamespacedReplicationControllerStatusRequest(args, w, r)
																	return
																}
															}
														}
													case 's': // Prefix: "sourcequotas"
														if prefix := "sourcequotas"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Leaf: ListCoreV1NamespacedResourceQuota
														s.handleListCoreV1NamespacedResourceQuotaRequest(args, w, r)
														return
													}
												case 's': // Prefix: "sourcequotas"
													if prefix := "sourcequotas"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListCoreV1NamespacedResourceQuotaRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Match until one of "/"
														idx := strings.IndexAny(elem, "/")
														if idx > 0 {
															args["name"] = elem[:idx]
															elem = elem[idx:]

															if len(elem) == 0 {
																s.handleReadCoreV1NamespacedResourceQuotaRequest(args, w, r)
																return
															}
															switch elem[0] {
															case '/': // Prefix: "/status"
																if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Leaf: ReadCoreV1NamespacedResourceQuotaStatus
																s.handleReadCoreV1NamespacedResourceQuotaStatusRequest(args, w, r)
																return
															}
														}
													}
												}
											case 's': // Prefix: "s"
												if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleReadCoreV1NamespaceStatusRequest(args, w, r)
													return
												}
												switch elem[0] {
												case 'e': // Prefix: "e"
													if prefix := "e"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListCoreV1NamespacedServiceRequest(args, w, r)
														return
													}
													switch elem[0] {
													case 'c': // Prefix: "crets"
														if prefix := "crets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleListCoreV1NamespacedSecretRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: ReadCoreV1NamespacedSecret
															s.handleReadCoreV1NamespacedSecretRequest(args, w, r)
															return
														case 'r': // Prefix: "rvices"
															if prefix := "rvices"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Leaf: ListCoreV1NamespacedService
															s.handleListCoreV1NamespacedServiceRequest(args, w, r)
															return
														}
													case 'r': // Prefix: "rvice"
														if prefix := "rvice"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleListCoreV1NamespacedServiceAccountRequest(args, w, r)
															return
														}
														switch elem[0] {
														case 'a': // Prefix: "accounts"
															if prefix := "accounts"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															if len(elem) == 0 {
																s.handleListCoreV1NamespacedServiceAccountRequest(args, w, r)
																return
															}
															switch elem[0] {
															case '/': // Prefix: "/"
																if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Param: "name"
																// Leaf parameter
																args["name"] = elem

																// Leaf: ReadCoreV1NamespacedServiceAccount
																s.handleReadCoreV1NamespacedServiceAccountRequest(args, w, r)
																return
															}
														case 's': // Prefix: "s"
															if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															if len(elem) == 0 {
																s.handleListCoreV1NamespacedServiceRequest(args, w, r)
																return
															}
															switch elem[0] {
															case '/': // Prefix: "/"
																if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Param: "name"
																// Match until one of "/"
																idx := strings.IndexAny(elem, "/")
																if idx > 0 {
																	args["name"] = elem[:idx]
																	elem = elem[idx:]

																	if len(elem) == 0 {
																		s.handleReadCoreV1NamespacedServiceRequest(args, w, r)
																		return
																	}
																	switch elem[0] {
																	case '/': // Prefix: "/status"
																		if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																			elem = elem[len(prefix):]
																		} else {
																			break
																		}

																		// Leaf: ReadCoreV1NamespacedServiceStatus
																		s.handleReadCoreV1NamespacedServiceStatusRequest(args, w, r)
																		return
																	}
																}
															case 'a': // Prefix: "accounts"
																if prefix := "accounts"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Leaf: ListCoreV1NamespacedServiceAccount
																s.handleListCoreV1NamespacedServiceAccountRequest(args, w, r)
																return
															}
														}
													case 't': // Prefix: "tatus"
														if prefix := "tatus"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Leaf: ReadCoreV1NamespaceStatus
														s.handleReadCoreV1NamespaceStatusRequest(args, w, r)
														return
													}
												case 't': // Prefix: "tatus"
													if prefix := "tatus"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Leaf: ReadCoreV1NamespaceStatus
													s.handleReadCoreV1NamespaceStatusRequest(args, w, r)
													return
												}
											}
										}
									}
								case 'o': // Prefix: "odes"
									if prefix := "odes"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListCoreV1Node
									s.handleListCoreV1NodeRequest(args, w, r)
									return
								}
							case 'o': // Prefix: "odes"
								if prefix := "odes"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListCoreV1NodeRequest(args, w, r)
									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Param: "name"
									// Match until one of "/"
									idx := strings.IndexAny(elem, "/")
									if idx > 0 {
										args["name"] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											s.handleReadCoreV1NodeRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: ReadCoreV1NodeStatus
											s.handleReadCoreV1NodeStatusRequest(args, w, r)
											return
										}
									}
								}
							}
						case 'p': // Prefix: "p"
							if prefix := "p"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleListCoreV1PodForAllNamespacesRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 'e': // Prefix: "ersistentvolume"
								if prefix := "ersistentvolume"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListCoreV1PersistentVolumeClaimForAllNamespacesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'c': // Prefix: "claims"
									if prefix := "claims"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListCoreV1PersistentVolumeClaimForAllNamespaces
									s.handleListCoreV1PersistentVolumeClaimForAllNamespacesRequest(args, w, r)
									return
								case 'o': // Prefix: "ods"
									if prefix := "ods"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListCoreV1PodForAllNamespaces
									s.handleListCoreV1PodForAllNamespacesRequest(args, w, r)
									return
								case 's': // Prefix: "s"
									if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListCoreV1PersistentVolumeRequest(args, w, r)
										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "name"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["name"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												s.handleReadCoreV1PersistentVolumeRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Leaf: ReadCoreV1PersistentVolumeStatus
												s.handleReadCoreV1PersistentVolumeStatusRequest(args, w, r)
												return
											}
										}
									case 'c': // Prefix: "claims"
										if prefix := "claims"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: ListCoreV1PersistentVolumeClaimForAllNamespaces
										s.handleListCoreV1PersistentVolumeClaimForAllNamespacesRequest(args, w, r)
										return
									}
								}
							case 'o': // Prefix: "od"
								if prefix := "od"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListCoreV1PodTemplateForAllNamespacesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 's': // Prefix: "s"
									if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListCoreV1PodForAllNamespacesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 't': // Prefix: "templates"
										if prefix := "templates"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: ListCoreV1PodTemplateForAllNamespaces
										s.handleListCoreV1PodTemplateForAllNamespacesRequest(args, w, r)
										return
									}
								case 't': // Prefix: "templates"
									if prefix := "templates"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListCoreV1PodTemplateForAllNamespaces
									s.handleListCoreV1PodTemplateForAllNamespacesRequest(args, w, r)
									return
								}
							}
						case 'r': // Prefix: "re"
							if prefix := "re"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleListCoreV1ResourceQuotaForAllNamespacesRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 'p': // Prefix: "plicationcontrollers"
								if prefix := "plicationcontrollers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListCoreV1ReplicationControllerForAllNamespacesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 's': // Prefix: "sourcequotas"
									if prefix := "sourcequotas"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListCoreV1ResourceQuotaForAllNamespaces
									s.handleListCoreV1ResourceQuotaForAllNamespacesRequest(args, w, r)
									return
								}
							case 's': // Prefix: "sourcequotas"
								if prefix := "sourcequotas"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								// Leaf: ListCoreV1ResourceQuotaForAllNamespaces
								s.handleListCoreV1ResourceQuotaForAllNamespacesRequest(args, w, r)
								return
							}
						case 's': // Prefix: "se"
							if prefix := "se"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleListCoreV1ServiceAccountForAllNamespacesRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 'c': // Prefix: "crets"
								if prefix := "crets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListCoreV1SecretForAllNamespacesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'r': // Prefix: "rviceaccounts"
									if prefix := "rviceaccounts"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListCoreV1ServiceAccountForAllNamespaces
									s.handleListCoreV1ServiceAccountForAllNamespacesRequest(args, w, r)
									return
								}
							case 'r': // Prefix: "rvice"
								if prefix := "rvice"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListCoreV1ServiceForAllNamespacesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'a': // Prefix: "accounts"
									if prefix := "accounts"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListCoreV1ServiceAccountForAllNamespacesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 's': // Prefix: "s"
										if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: ListCoreV1ServiceForAllNamespaces
										s.handleListCoreV1ServiceForAllNamespacesRequest(args, w, r)
										return
									}
								case 's': // Prefix: "s"
									if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListCoreV1ServiceForAllNamespaces
									s.handleListCoreV1ServiceForAllNamespacesRequest(args, w, r)
									return
								}
							}
						case 'w': // Prefix: "watch/"
							if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleWatchCoreV1EndpointsListForAllNamespacesRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 'c': // Prefix: "configmaps"
								if prefix := "configmaps"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleWatchCoreV1ConfigMapListForAllNamespacesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'e': // Prefix: "endpoints"
									if prefix := "endpoints"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: WatchCoreV1EndpointsListForAllNamespaces
									s.handleWatchCoreV1EndpointsListForAllNamespacesRequest(args, w, r)
									return
								}
							case 'e': // Prefix: "e"
								if prefix := "e"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleWatchCoreV1EventListForAllNamespacesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'n': // Prefix: "ndpoints"
									if prefix := "ndpoints"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchCoreV1EndpointsListForAllNamespacesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'v': // Prefix: "vents"
										if prefix := "vents"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: WatchCoreV1EventListForAllNamespaces
										s.handleWatchCoreV1EventListForAllNamespacesRequest(args, w, r)
										return
									}
								case 'v': // Prefix: "vents"
									if prefix := "vents"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: WatchCoreV1EventListForAllNamespaces
									s.handleWatchCoreV1EventListForAllNamespacesRequest(args, w, r)
									return
								}
							case 'l': // Prefix: "limitranges"
								if prefix := "limitranges"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								// Leaf: WatchCoreV1LimitRangeListForAllNamespaces
								s.handleWatchCoreV1LimitRangeListForAllNamespacesRequest(args, w, r)
								return
							case 'n': // Prefix: "n"
								if prefix := "n"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleWatchCoreV1NodeRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'a': // Prefix: "amespaces"
									if prefix := "amespaces"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchCoreV1NamespaceListRequest(args, w, r)
										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "name"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["name"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												s.handleWatchCoreV1NamespaceRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchCoreV1NamespacedEndpointsRequest(args, w, r)
													return
												}
												switch elem[0] {
												case 'c': // Prefix: "configmaps"
													if prefix := "configmaps"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchCoreV1NamespacedConfigMapListRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args["name"] = elem

														// Leaf: WatchCoreV1NamespacedConfigMap
														s.handleWatchCoreV1NamespacedConfigMapRequest(args, w, r)
														return
													case 'e': // Prefix: "endpoints/"
														if prefix := "endpoints/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args["name"] = elem

														// Leaf: WatchCoreV1NamespacedEndpoints
														s.handleWatchCoreV1NamespacedEndpointsRequest(args, w, r)
														return
													}
												case 'e': // Prefix: "e"
													if prefix := "e"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchCoreV1NamespacedEventRequest(args, w, r)
														return
													}
													switch elem[0] {
													case 'n': // Prefix: "ndpoints"
														if prefix := "ndpoints"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchCoreV1NamespacedEndpointsListRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchCoreV1NamespacedEndpoints
															s.handleWatchCoreV1NamespacedEndpointsRequest(args, w, r)
															return
														case 'v': // Prefix: "vents/"
															if prefix := "vents/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchCoreV1NamespacedEvent
															s.handleWatchCoreV1NamespacedEventRequest(args, w, r)
															return
														}
													case 'v': // Prefix: "vents"
														if prefix := "vents"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchCoreV1NamespacedEventListRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchCoreV1NamespacedEvent
															s.handleWatchCoreV1NamespacedEventRequest(args, w, r)
															return
														}
													}
												case 'l': // Prefix: "limitranges"
													if prefix := "limitranges"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchCoreV1NamespacedLimitRangeListRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args["name"] = elem

														// Leaf: WatchCoreV1NamespacedLimitRange
														s.handleWatchCoreV1NamespacedLimitRangeRequest(args, w, r)
														return
													}
												case 'p': // Prefix: "p"
													if prefix := "p"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchCoreV1NamespacedPodRequest(args, w, r)
														return
													}
													switch elem[0] {
													case 'e': // Prefix: "ersistentvolumeclaims"
														if prefix := "ersistentvolumeclaims"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchCoreV1NamespacedPersistentVolumeClaimListRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchCoreV1NamespacedPersistentVolumeClaim
															s.handleWatchCoreV1NamespacedPersistentVolumeClaimRequest(args, w, r)
															return
														case 'o': // Prefix: "ods/"
															if prefix := "ods/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchCoreV1NamespacedPod
															s.handleWatchCoreV1NamespacedPodRequest(args, w, r)
															return
														}
													case 'o': // Prefix: "od"
														if prefix := "od"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchCoreV1NamespacedPodTemplateRequest(args, w, r)
															return
														}
														switch elem[0] {
														case 's': // Prefix: "s"
															if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															if len(elem) == 0 {
																s.handleWatchCoreV1NamespacedPodListRequest(args, w, r)
																return
															}
															switch elem[0] {
															case '/': // Prefix: "/"
																if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Param: "name"
																// Leaf parameter
																args["name"] = elem

																// Leaf: WatchCoreV1NamespacedPod
																s.handleWatchCoreV1NamespacedPodRequest(args, w, r)
																return
															case 't': // Prefix: "templates/"
																if prefix := "templates/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Param: "name"
																// Leaf parameter
																args["name"] = elem

																// Leaf: WatchCoreV1NamespacedPodTemplate
																s.handleWatchCoreV1NamespacedPodTemplateRequest(args, w, r)
																return
															}
														case 't': // Prefix: "templates"
															if prefix := "templates"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															if len(elem) == 0 {
																s.handleWatchCoreV1NamespacedPodTemplateListRequest(args, w, r)
																return
															}
															switch elem[0] {
															case '/': // Prefix: "/"
																if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Param: "name"
																// Leaf parameter
																args["name"] = elem

																// Leaf: WatchCoreV1NamespacedPodTemplate
																s.handleWatchCoreV1NamespacedPodTemplateRequest(args, w, r)
																return
															}
														}
													}
												case 'r': // Prefix: "re"
													if prefix := "re"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchCoreV1NamespacedResourceQuotaRequest(args, w, r)
														return
													}
													switch elem[0] {
													case 'p': // Prefix: "plicationcontrollers"
														if prefix := "plicationcontrollers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchCoreV1NamespacedReplicationControllerListRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchCoreV1NamespacedReplicationController
															s.handleWatchCoreV1NamespacedReplicationControllerRequest(args, w, r)
															return
														case 's': // Prefix: "sourcequotas/"
															if prefix := "sourcequotas/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchCoreV1NamespacedResourceQuota
															s.handleWatchCoreV1NamespacedResourceQuotaRequest(args, w, r)
															return
														}
													case 's': // Prefix: "sourcequotas"
														if prefix := "sourcequotas"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchCoreV1NamespacedResourceQuotaListRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchCoreV1NamespacedResourceQuota
															s.handleWatchCoreV1NamespacedResourceQuotaRequest(args, w, r)
															return
														}
													}
												case 's': // Prefix: "se"
													if prefix := "se"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchCoreV1NamespacedServiceRequest(args, w, r)
														return
													}
													switch elem[0] {
													case 'c': // Prefix: "crets"
														if prefix := "crets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchCoreV1NamespacedSecretListRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchCoreV1NamespacedSecret
															s.handleWatchCoreV1NamespacedSecretRequest(args, w, r)
															return
														case 'r': // Prefix: "rvices/"
															if prefix := "rvices/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchCoreV1NamespacedService
															s.handleWatchCoreV1NamespacedServiceRequest(args, w, r)
															return
														}
													case 'r': // Prefix: "rvice"
														if prefix := "rvice"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchCoreV1NamespacedServiceAccountRequest(args, w, r)
															return
														}
														switch elem[0] {
														case 'a': // Prefix: "accounts"
															if prefix := "accounts"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															if len(elem) == 0 {
																s.handleWatchCoreV1NamespacedServiceAccountListRequest(args, w, r)
																return
															}
															switch elem[0] {
															case '/': // Prefix: "/"
																if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Param: "name"
																// Leaf parameter
																args["name"] = elem

																// Leaf: WatchCoreV1NamespacedServiceAccount
																s.handleWatchCoreV1NamespacedServiceAccountRequest(args, w, r)
																return
															}
														case 's': // Prefix: "s"
															if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															if len(elem) == 0 {
																s.handleWatchCoreV1NamespacedServiceListRequest(args, w, r)
																return
															}
															switch elem[0] {
															case '/': // Prefix: "/"
																if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																if len(elem) == 0 {
																	break
																}
																switch elem[0] {
																case 'a': // Prefix: "accounts/"
																	if prefix := "accounts/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																		elem = elem[len(prefix):]
																	} else {
																		break
																	}

																	// Param: "name"
																	// Leaf parameter
																	args["name"] = elem

																	// Leaf: WatchCoreV1NamespacedServiceAccount
																	s.handleWatchCoreV1NamespacedServiceAccountRequest(args, w, r)
																	return
																}
																// Param: "name"
																// Leaf parameter
																args["name"] = elem

																// Leaf: WatchCoreV1NamespacedService
																s.handleWatchCoreV1NamespacedServiceRequest(args, w, r)
																return
															}
														}
													}
												}
											}
										}
									case 'o': // Prefix: "odes/"
										if prefix := "odes/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args["name"] = elem

										// Leaf: WatchCoreV1Node
										s.handleWatchCoreV1NodeRequest(args, w, r)
										return
									}
								case 'o': // Prefix: "odes"
									if prefix := "odes"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchCoreV1NodeListRequest(args, w, r)
										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args["name"] = elem

										// Leaf: WatchCoreV1Node
										s.handleWatchCoreV1NodeRequest(args, w, r)
										return
									}
								}
							case 'p': // Prefix: "p"
								if prefix := "p"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleWatchCoreV1PodListForAllNamespacesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'e': // Prefix: "ersistentvolume"
									if prefix := "ersistentvolume"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchCoreV1PersistentVolumeClaimListForAllNamespacesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'c': // Prefix: "claims"
										if prefix := "claims"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: WatchCoreV1PersistentVolumeClaimListForAllNamespaces
										s.handleWatchCoreV1PersistentVolumeClaimListForAllNamespacesRequest(args, w, r)
										return
									case 'o': // Prefix: "ods"
										if prefix := "ods"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: WatchCoreV1PodListForAllNamespaces
										s.handleWatchCoreV1PodListForAllNamespacesRequest(args, w, r)
										return
									case 's': // Prefix: "s"
										if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchCoreV1PersistentVolumeListRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "claims"
												if prefix := "claims"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Leaf: WatchCoreV1PersistentVolumeClaimListForAllNamespaces
												s.handleWatchCoreV1PersistentVolumeClaimListForAllNamespacesRequest(args, w, r)
												return
											}
											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: WatchCoreV1PersistentVolume
											s.handleWatchCoreV1PersistentVolumeRequest(args, w, r)
											return
										}
									}
								case 'o': // Prefix: "od"
									if prefix := "od"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchCoreV1PodTemplateListForAllNamespacesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 's': // Prefix: "s"
										if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchCoreV1PodListForAllNamespacesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 't': // Prefix: "templates"
											if prefix := "templates"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: WatchCoreV1PodTemplateListForAllNamespaces
											s.handleWatchCoreV1PodTemplateListForAllNamespacesRequest(args, w, r)
											return
										}
									case 't': // Prefix: "templates"
										if prefix := "templates"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: WatchCoreV1PodTemplateListForAllNamespaces
										s.handleWatchCoreV1PodTemplateListForAllNamespacesRequest(args, w, r)
										return
									}
								}
							case 'r': // Prefix: "re"
								if prefix := "re"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleWatchCoreV1ResourceQuotaListForAllNamespacesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'p': // Prefix: "plicationcontrollers"
									if prefix := "plicationcontrollers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchCoreV1ReplicationControllerListForAllNamespacesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 's': // Prefix: "sourcequotas"
										if prefix := "sourcequotas"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: WatchCoreV1ResourceQuotaListForAllNamespaces
										s.handleWatchCoreV1ResourceQuotaListForAllNamespacesRequest(args, w, r)
										return
									}
								case 's': // Prefix: "sourcequotas"
									if prefix := "sourcequotas"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: WatchCoreV1ResourceQuotaListForAllNamespaces
									s.handleWatchCoreV1ResourceQuotaListForAllNamespacesRequest(args, w, r)
									return
								}
							case 's': // Prefix: "se"
								if prefix := "se"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleWatchCoreV1ServiceAccountListForAllNamespacesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'c': // Prefix: "crets"
									if prefix := "crets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchCoreV1SecretListForAllNamespacesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'r': // Prefix: "rviceaccounts"
										if prefix := "rviceaccounts"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: WatchCoreV1ServiceAccountListForAllNamespaces
										s.handleWatchCoreV1ServiceAccountListForAllNamespacesRequest(args, w, r)
										return
									}
								case 'r': // Prefix: "rvice"
									if prefix := "rvice"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchCoreV1ServiceListForAllNamespacesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'a': // Prefix: "accounts"
										if prefix := "accounts"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchCoreV1ServiceAccountListForAllNamespacesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 's': // Prefix: "s"
											if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: WatchCoreV1ServiceListForAllNamespaces
											s.handleWatchCoreV1ServiceListForAllNamespacesRequest(args, w, r)
											return
										}
									case 's': // Prefix: "s"
										if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: WatchCoreV1ServiceListForAllNamespaces
										s.handleWatchCoreV1ServiceListForAllNamespacesRequest(args, w, r)
										return
									}
								}
							}
						}
					}
				case 's': // Prefix: "s/"
					if prefix := "s/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
						elem = elem[len(prefix):]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleGetAPIVersionsRequest(args, w, r)
						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
							elem = elem[len(prefix):]
						} else {
							break
						}

						// Leaf: GetCoreAPIVersions
						s.handleGetCoreAPIVersionsRequest(args, w, r)
						return
					case 'a': // Prefix: "a"
						if prefix := "a"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
							elem = elem[len(prefix):]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetApiextensionsAPIGroupRequest(args, w, r)
							return
						}
						switch elem[0] {
						case 'd': // Prefix: "dmissionregistration.k8s.io/"
							if prefix := "dmissionregistration.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetAdmissionregistrationAPIGroupRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 'p': // Prefix: "piextensions.k8s.io/"
								if prefix := "piextensions.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								// Leaf: GetApiextensionsAPIGroup
								s.handleGetApiextensionsAPIGroupRequest(args, w, r)
								return
							case 'v': // Prefix: "v1/"
								if prefix := "v1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetAdmissionregistrationV1APIResourcesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'm': // Prefix: "mutatingwebhookconfigurations"
									if prefix := "mutatingwebhookconfigurations"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListAdmissionregistrationV1MutatingWebhookConfigurationRequest(args, w, r)
										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args["name"] = elem

										// Leaf: ReadAdmissionregistrationV1MutatingWebhookConfiguration
										s.handleReadAdmissionregistrationV1MutatingWebhookConfigurationRequest(args, w, r)
										return
									}
								case 'v': // Prefix: "validatingwebhookconfigurations"
									if prefix := "validatingwebhookconfigurations"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListAdmissionregistrationV1ValidatingWebhookConfigurationRequest(args, w, r)
										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args["name"] = elem

										// Leaf: ReadAdmissionregistrationV1ValidatingWebhookConfiguration
										s.handleReadAdmissionregistrationV1ValidatingWebhookConfigurationRequest(args, w, r)
										return
									}
								case 'w': // Prefix: "watch/"
									if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchAdmissionregistrationV1ValidatingWebhookConfigurationRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'm': // Prefix: "mutatingwebhookconfigurations"
										if prefix := "mutatingwebhookconfigurations"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchAdmissionregistrationV1MutatingWebhookConfigurationListRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: WatchAdmissionregistrationV1MutatingWebhookConfiguration
											s.handleWatchAdmissionregistrationV1MutatingWebhookConfigurationRequest(args, w, r)
											return
										case 'v': // Prefix: "validatingwebhookconfigurations/"
											if prefix := "validatingwebhookconfigurations/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: WatchAdmissionregistrationV1ValidatingWebhookConfiguration
											s.handleWatchAdmissionregistrationV1ValidatingWebhookConfigurationRequest(args, w, r)
											return
										}
									case 'v': // Prefix: "validatingwebhookconfigurations"
										if prefix := "validatingwebhookconfigurations"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchAdmissionregistrationV1ValidatingWebhookConfigurationListRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: WatchAdmissionregistrationV1ValidatingWebhookConfiguration
											s.handleWatchAdmissionregistrationV1ValidatingWebhookConfigurationRequest(args, w, r)
											return
										}
									}
								}
							}
						case 'p': // Prefix: "p"
							if prefix := "p"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetAppsAPIGroupRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 'i': // Prefix: "i"
								if prefix := "i"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetApiregistrationAPIGroupRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'e': // Prefix: "extensions.k8s.io/"
									if prefix := "extensions.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetApiextensionsAPIGroupRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'r': // Prefix: "registration.k8s.io/"
										if prefix := "registration.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: GetApiregistrationAPIGroup
										s.handleGetApiregistrationAPIGroupRequest(args, w, r)
										return
									case 'v': // Prefix: "v1/"
										if prefix := "v1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleGetApiextensionsV1APIResourcesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'c': // Prefix: "customresourcedefinitions"
											if prefix := "customresourcedefinitions"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListApiextensionsV1CustomResourceDefinitionRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Match until one of "/"
												idx := strings.IndexAny(elem, "/")
												if idx > 0 {
													args["name"] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														s.handleReadApiextensionsV1CustomResourceDefinitionRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Leaf: ReadApiextensionsV1CustomResourceDefinitionStatus
														s.handleReadApiextensionsV1CustomResourceDefinitionStatusRequest(args, w, r)
														return
													}
												}
											}
										case 'w': // Prefix: "watch/customresourcedefinitions"
											if prefix := "watch/customresourcedefinitions"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchApiextensionsV1CustomResourceDefinitionListRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: WatchApiextensionsV1CustomResourceDefinition
												s.handleWatchApiextensionsV1CustomResourceDefinitionRequest(args, w, r)
												return
											}
										}
									}
								case 'p': // Prefix: "ps/"
									if prefix := "ps/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: GetAppsAPIGroup
									s.handleGetAppsAPIGroupRequest(args, w, r)
									return
								case 'r': // Prefix: "registration.k8s.io/"
									if prefix := "registration.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetApiregistrationAPIGroupRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'v': // Prefix: "v1/"
										if prefix := "v1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleGetApiregistrationV1APIResourcesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'a': // Prefix: "apiservices"
											if prefix := "apiservices"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListApiregistrationV1APIServiceRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Match until one of "/"
												idx := strings.IndexAny(elem, "/")
												if idx > 0 {
													args["name"] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														s.handleReadApiregistrationV1APIServiceRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Leaf: ReadApiregistrationV1APIServiceStatus
														s.handleReadApiregistrationV1APIServiceStatusRequest(args, w, r)
														return
													}
												}
											}
										case 'w': // Prefix: "watch/apiservices"
											if prefix := "watch/apiservices"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchApiregistrationV1APIServiceListRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: WatchApiregistrationV1APIService
												s.handleWatchApiregistrationV1APIServiceRequest(args, w, r)
												return
											}
										}
									}
								}
							case 'p': // Prefix: "ps/"
								if prefix := "ps/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetAppsAPIGroupRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'v': // Prefix: "v1/"
									if prefix := "v1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetAppsV1APIResourcesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'c': // Prefix: "controllerrevisions"
										if prefix := "controllerrevisions"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: ListAppsV1ControllerRevisionForAllNamespaces
										s.handleListAppsV1ControllerRevisionForAllNamespacesRequest(args, w, r)
										return
									case 'd': // Prefix: "d"
										if prefix := "d"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListAppsV1DeploymentForAllNamespacesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'a': // Prefix: "aemonsets"
											if prefix := "aemonsets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListAppsV1DaemonSetForAllNamespacesRequest(args, w, r)
												return
											}
											switch elem[0] {
											case 'e': // Prefix: "eployments"
												if prefix := "eployments"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Leaf: ListAppsV1DeploymentForAllNamespaces
												s.handleListAppsV1DeploymentForAllNamespacesRequest(args, w, r)
												return
											}
										case 'e': // Prefix: "eployments"
											if prefix := "eployments"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: ListAppsV1DeploymentForAllNamespaces
											s.handleListAppsV1DeploymentForAllNamespacesRequest(args, w, r)
											return
										}
									case 'n': // Prefix: "namespaces/"
										if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "namespace"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["namespace"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListAppsV1NamespacedDaemonSetRequest(args, w, r)
													return
												}
												switch elem[0] {
												case 'c': // Prefix: "controllerrevisions"
													if prefix := "controllerrevisions"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListAppsV1NamespacedControllerRevisionRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args["name"] = elem

														// Leaf: ReadAppsV1NamespacedControllerRevision
														s.handleReadAppsV1NamespacedControllerRevisionRequest(args, w, r)
														return
													case 'd': // Prefix: "daemonsets"
														if prefix := "daemonsets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Leaf: ListAppsV1NamespacedDaemonSet
														s.handleListAppsV1NamespacedDaemonSetRequest(args, w, r)
														return
													}
												case 'd': // Prefix: "d"
													if prefix := "d"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListAppsV1NamespacedDeploymentRequest(args, w, r)
														return
													}
													switch elem[0] {
													case 'a': // Prefix: "aemonsets"
														if prefix := "aemonsets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleListAppsV1NamespacedDaemonSetRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Match until one of "/"
															idx := strings.IndexAny(elem, "/")
															if idx > 0 {
																args["name"] = elem[:idx]
																elem = elem[idx:]

																if len(elem) == 0 {
																	s.handleReadAppsV1NamespacedDaemonSetRequest(args, w, r)
																	return
																}
																switch elem[0] {
																case '/': // Prefix: "/status"
																	if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																		elem = elem[len(prefix):]
																	} else {
																		break
																	}

																	// Leaf: ReadAppsV1NamespacedDaemonSetStatus
																	s.handleReadAppsV1NamespacedDaemonSetStatusRequest(args, w, r)
																	return
																}
															}
														case 'e': // Prefix: "eployments"
															if prefix := "eployments"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Leaf: ListAppsV1NamespacedDeployment
															s.handleListAppsV1NamespacedDeploymentRequest(args, w, r)
															return
														}
													case 'e': // Prefix: "eployments"
														if prefix := "eployments"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleListAppsV1NamespacedDeploymentRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Match until one of "/"
															idx := strings.IndexAny(elem, "/")
															if idx > 0 {
																args["name"] = elem[:idx]
																elem = elem[idx:]

																if len(elem) == 0 {
																	s.handleReadAppsV1NamespacedDeploymentRequest(args, w, r)
																	return
																}
																switch elem[0] {
																case '/': // Prefix: "/s"
																	if prefix := "/s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																		elem = elem[len(prefix):]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		s.handleReadAppsV1NamespacedDeploymentStatusRequest(args, w, r)
																		return
																	}
																	switch elem[0] {
																	case 'c': // Prefix: "cale"
																		if prefix := "cale"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																			elem = elem[len(prefix):]
																		} else {
																			break
																		}

																		if len(elem) == 0 {
																			s.handleReadAppsV1NamespacedDeploymentScaleRequest(args, w, r)
																			return
																		}
																		switch elem[0] {
																		case 't': // Prefix: "tatus"
																			if prefix := "tatus"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																				elem = elem[len(prefix):]
																			} else {
																				break
																			}

																			// Leaf: ReadAppsV1NamespacedDeploymentStatus
																			s.handleReadAppsV1NamespacedDeploymentStatusRequest(args, w, r)
																			return
																		}
																	case 't': // Prefix: "tatus"
																		if prefix := "tatus"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																			elem = elem[len(prefix):]
																		} else {
																			break
																		}

																		// Leaf: ReadAppsV1NamespacedDeploymentStatus
																		s.handleReadAppsV1NamespacedDeploymentStatusRequest(args, w, r)
																		return
																	}
																}
															}
														}
													}
												case 'r': // Prefix: "replicasets"
													if prefix := "replicasets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListAppsV1NamespacedReplicaSetRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Match until one of "/"
														idx := strings.IndexAny(elem, "/")
														if idx > 0 {
															args["name"] = elem[:idx]
															elem = elem[idx:]

															if len(elem) == 0 {
																s.handleReadAppsV1NamespacedReplicaSetRequest(args, w, r)
																return
															}
															switch elem[0] {
															case '/': // Prefix: "/s"
																if prefix := "/s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																if len(elem) == 0 {
																	s.handleReadAppsV1NamespacedReplicaSetStatusRequest(args, w, r)
																	return
																}
																switch elem[0] {
																case 'c': // Prefix: "cale"
																	if prefix := "cale"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																		elem = elem[len(prefix):]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		s.handleReadAppsV1NamespacedReplicaSetScaleRequest(args, w, r)
																		return
																	}
																	switch elem[0] {
																	case 't': // Prefix: "tatus"
																		if prefix := "tatus"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																			elem = elem[len(prefix):]
																		} else {
																			break
																		}

																		// Leaf: ReadAppsV1NamespacedReplicaSetStatus
																		s.handleReadAppsV1NamespacedReplicaSetStatusRequest(args, w, r)
																		return
																	}
																case 't': // Prefix: "tatus"
																	if prefix := "tatus"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																		elem = elem[len(prefix):]
																	} else {
																		break
																	}

																	// Leaf: ReadAppsV1NamespacedReplicaSetStatus
																	s.handleReadAppsV1NamespacedReplicaSetStatusRequest(args, w, r)
																	return
																}
															}
														}
													}
												case 's': // Prefix: "statefulsets"
													if prefix := "statefulsets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListAppsV1NamespacedStatefulSetRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Match until one of "/"
														idx := strings.IndexAny(elem, "/")
														if idx > 0 {
															args["name"] = elem[:idx]
															elem = elem[idx:]

															if len(elem) == 0 {
																s.handleReadAppsV1NamespacedStatefulSetRequest(args, w, r)
																return
															}
															switch elem[0] {
															case '/': // Prefix: "/s"
																if prefix := "/s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																if len(elem) == 0 {
																	s.handleReadAppsV1NamespacedStatefulSetStatusRequest(args, w, r)
																	return
																}
																switch elem[0] {
																case 'c': // Prefix: "cale"
																	if prefix := "cale"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																		elem = elem[len(prefix):]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		s.handleReadAppsV1NamespacedStatefulSetScaleRequest(args, w, r)
																		return
																	}
																	switch elem[0] {
																	case 't': // Prefix: "tatus"
																		if prefix := "tatus"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																			elem = elem[len(prefix):]
																		} else {
																			break
																		}

																		// Leaf: ReadAppsV1NamespacedStatefulSetStatus
																		s.handleReadAppsV1NamespacedStatefulSetStatusRequest(args, w, r)
																		return
																	}
																case 't': // Prefix: "tatus"
																	if prefix := "tatus"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																		elem = elem[len(prefix):]
																	} else {
																		break
																	}

																	// Leaf: ReadAppsV1NamespacedStatefulSetStatus
																	s.handleReadAppsV1NamespacedStatefulSetStatusRequest(args, w, r)
																	return
																}
															}
														}
													}
												}
											}
										}
									case 'r': // Prefix: "replicasets"
										if prefix := "replicasets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: ListAppsV1ReplicaSetForAllNamespaces
										s.handleListAppsV1ReplicaSetForAllNamespacesRequest(args, w, r)
										return
									case 's': // Prefix: "statefulsets"
										if prefix := "statefulsets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: ListAppsV1StatefulSetForAllNamespaces
										s.handleListAppsV1StatefulSetForAllNamespacesRequest(args, w, r)
										return
									case 'w': // Prefix: "watch/"
										if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchAppsV1DaemonSetListForAllNamespacesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'c': // Prefix: "controllerrevisions"
											if prefix := "controllerrevisions"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchAppsV1ControllerRevisionListForAllNamespacesRequest(args, w, r)
												return
											}
											switch elem[0] {
											case 'd': // Prefix: "daemonsets"
												if prefix := "daemonsets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Leaf: WatchAppsV1DaemonSetListForAllNamespaces
												s.handleWatchAppsV1DaemonSetListForAllNamespacesRequest(args, w, r)
												return
											}
										case 'd': // Prefix: "d"
											if prefix := "d"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchAppsV1DeploymentListForAllNamespacesRequest(args, w, r)
												return
											}
											switch elem[0] {
											case 'a': // Prefix: "aemonsets"
												if prefix := "aemonsets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchAppsV1DaemonSetListForAllNamespacesRequest(args, w, r)
													return
												}
												switch elem[0] {
												case 'e': // Prefix: "eployments"
													if prefix := "eployments"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Leaf: WatchAppsV1DeploymentListForAllNamespaces
													s.handleWatchAppsV1DeploymentListForAllNamespacesRequest(args, w, r)
													return
												}
											case 'e': // Prefix: "eployments"
												if prefix := "eployments"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Leaf: WatchAppsV1DeploymentListForAllNamespaces
												s.handleWatchAppsV1DeploymentListForAllNamespacesRequest(args, w, r)
												return
											}
										case 'n': // Prefix: "namespaces/"
											if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "namespace"
											// Match until one of "/"
											idx := strings.IndexAny(elem, "/")
											if idx > 0 {
												args["namespace"] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchAppsV1NamespacedDaemonSetRequest(args, w, r)
														return
													}
													switch elem[0] {
													case 'c': // Prefix: "controllerrevisions"
														if prefix := "controllerrevisions"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchAppsV1NamespacedControllerRevisionListRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchAppsV1NamespacedControllerRevision
															s.handleWatchAppsV1NamespacedControllerRevisionRequest(args, w, r)
															return
														case 'd': // Prefix: "daemonsets/"
															if prefix := "daemonsets/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchAppsV1NamespacedDaemonSet
															s.handleWatchAppsV1NamespacedDaemonSetRequest(args, w, r)
															return
														}
													case 'd': // Prefix: "d"
														if prefix := "d"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchAppsV1NamespacedDeploymentRequest(args, w, r)
															return
														}
														switch elem[0] {
														case 'a': // Prefix: "aemonsets"
															if prefix := "aemonsets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															if len(elem) == 0 {
																s.handleWatchAppsV1NamespacedDaemonSetListRequest(args, w, r)
																return
															}
															switch elem[0] {
															case '/': // Prefix: "/"
																if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Param: "name"
																// Leaf parameter
																args["name"] = elem

																// Leaf: WatchAppsV1NamespacedDaemonSet
																s.handleWatchAppsV1NamespacedDaemonSetRequest(args, w, r)
																return
															case 'e': // Prefix: "eployments/"
																if prefix := "eployments/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Param: "name"
																// Leaf parameter
																args["name"] = elem

																// Leaf: WatchAppsV1NamespacedDeployment
																s.handleWatchAppsV1NamespacedDeploymentRequest(args, w, r)
																return
															}
														case 'e': // Prefix: "eployments"
															if prefix := "eployments"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															if len(elem) == 0 {
																s.handleWatchAppsV1NamespacedDeploymentListRequest(args, w, r)
																return
															}
															switch elem[0] {
															case '/': // Prefix: "/"
																if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Param: "name"
																// Leaf parameter
																args["name"] = elem

																// Leaf: WatchAppsV1NamespacedDeployment
																s.handleWatchAppsV1NamespacedDeploymentRequest(args, w, r)
																return
															}
														}
													case 'r': // Prefix: "replicasets"
														if prefix := "replicasets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchAppsV1NamespacedReplicaSetListRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchAppsV1NamespacedReplicaSet
															s.handleWatchAppsV1NamespacedReplicaSetRequest(args, w, r)
															return
														}
													case 's': // Prefix: "statefulsets"
														if prefix := "statefulsets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchAppsV1NamespacedStatefulSetListRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchAppsV1NamespacedStatefulSet
															s.handleWatchAppsV1NamespacedStatefulSetRequest(args, w, r)
															return
														}
													}
												}
											}
										case 'r': // Prefix: "replicasets"
											if prefix := "replicasets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: WatchAppsV1ReplicaSetListForAllNamespaces
											s.handleWatchAppsV1ReplicaSetListForAllNamespacesRequest(args, w, r)
											return
										case 's': // Prefix: "statefulsets"
											if prefix := "statefulsets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: WatchAppsV1StatefulSetListForAllNamespaces
											s.handleWatchAppsV1StatefulSetListForAllNamespacesRequest(args, w, r)
											return
										}
									}
								}
							}
						case 'u': // Prefix: "ut"
							if prefix := "ut"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetAutoscalingAPIGroupRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 'h': // Prefix: "h"
								if prefix := "h"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetAuthorizationAPIGroupRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'e': // Prefix: "entication.k8s.io/"
									if prefix := "entication.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetAuthenticationAPIGroupRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'o': // Prefix: "orization.k8s.io/"
										if prefix := "orization.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: GetAuthorizationAPIGroup
										s.handleGetAuthorizationAPIGroupRequest(args, w, r)
										return
									case 'v': // Prefix: "v1/"
										if prefix := "v1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: GetAuthenticationV1APIResources
										s.handleGetAuthenticationV1APIResourcesRequest(args, w, r)
										return
									}
								case 'o': // Prefix: "o"
									if prefix := "o"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetAutoscalingAPIGroupRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'r': // Prefix: "rization.k8s.io/"
										if prefix := "rization.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleGetAuthorizationAPIGroupRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 's': // Prefix: "scaling/"
											if prefix := "scaling/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: GetAutoscalingAPIGroup
											s.handleGetAutoscalingAPIGroupRequest(args, w, r)
											return
										case 'v': // Prefix: "v1/"
											if prefix := "v1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: GetAuthorizationV1APIResources
											s.handleGetAuthorizationV1APIResourcesRequest(args, w, r)
											return
										}
									case 's': // Prefix: "scaling/"
										if prefix := "scaling/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: GetAutoscalingAPIGroup
										s.handleGetAutoscalingAPIGroupRequest(args, w, r)
										return
									}
								}
							case 'o': // Prefix: "oscaling/"
								if prefix := "oscaling/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetAutoscalingAPIGroupRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'v': // Prefix: "v"
									if prefix := "v"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetAutoscalingV2beta1APIResourcesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case '1': // Prefix: "1/"
										if prefix := "1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleGetAutoscalingV1APIResourcesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '2': // Prefix: "2beta1/"
											if prefix := "2beta1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: GetAutoscalingV2beta1APIResources
											s.handleGetAutoscalingV2beta1APIResourcesRequest(args, w, r)
											return
										case 'h': // Prefix: "horizontalpodautoscalers"
											if prefix := "horizontalpodautoscalers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: ListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces
											s.handleListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesRequest(args, w, r)
											return
										case 'n': // Prefix: "namespaces/"
											if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "namespace"
											// Match until one of "/"
											idx := strings.IndexAny(elem, "/")
											if idx > 0 {
												args["namespace"] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/horizontalpodautoscalers"
													if prefix := "/horizontalpodautoscalers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListAutoscalingV1NamespacedHorizontalPodAutoscalerRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Match until one of "/"
														idx := strings.IndexAny(elem, "/")
														if idx > 0 {
															args["name"] = elem[:idx]
															elem = elem[idx:]

															if len(elem) == 0 {
																s.handleReadAutoscalingV1NamespacedHorizontalPodAutoscalerRequest(args, w, r)
																return
															}
															switch elem[0] {
															case '/': // Prefix: "/status"
																if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Leaf: ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus
																s.handleReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest(args, w, r)
																return
															}
														}
													}
												}
											}
										case 'w': // Prefix: "watch/"
											if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest(args, w, r)
												return
											}
											switch elem[0] {
											case 'h': // Prefix: "horizontalpodautoscalers"
												if prefix := "horizontalpodautoscalers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesRequest(args, w, r)
													return
												}
												switch elem[0] {
												case 'n': // Prefix: "namespaces/"
													if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "namespace"
													// Match until one of "/"
													idx := strings.IndexAny(elem, "/")
													if idx > 0 {
														args["namespace"] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case '/': // Prefix: "/horizontalpodautoscalers/"
															if prefix := "/horizontalpodautoscalers/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchAutoscalingV1NamespacedHorizontalPodAutoscaler
															s.handleWatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest(args, w, r)
															return
														}
													}
												}
											case 'n': // Prefix: "namespaces/"
												if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "namespace"
												// Match until one of "/"
												idx := strings.IndexAny(elem, "/")
												if idx > 0 {
													args["namespace"] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case '/': // Prefix: "/horizontalpodautoscalers"
														if prefix := "/horizontalpodautoscalers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchAutoscalingV1NamespacedHorizontalPodAutoscalerListRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchAutoscalingV1NamespacedHorizontalPodAutoscaler
															s.handleWatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest(args, w, r)
															return
														}
													}
												}
											}
										}
									case '2': // Prefix: "2beta"
										if prefix := "2beta"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleGetAutoscalingV2beta2APIResourcesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '1': // Prefix: "1/"
											if prefix := "1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleGetAutoscalingV2beta1APIResourcesRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '2': // Prefix: "2/"
												if prefix := "2/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Leaf: GetAutoscalingV2beta2APIResources
												s.handleGetAutoscalingV2beta2APIResourcesRequest(args, w, r)
												return
											case 'h': // Prefix: "horizontalpodautoscalers"
												if prefix := "horizontalpodautoscalers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Leaf: ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces
												s.handleListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRequest(args, w, r)
												return
											case 'n': // Prefix: "namespaces/"
												if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "namespace"
												// Match until one of "/"
												idx := strings.IndexAny(elem, "/")
												if idx > 0 {
													args["namespace"] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case '/': // Prefix: "/horizontalpodautoscalers"
														if prefix := "/horizontalpodautoscalers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Match until one of "/"
															idx := strings.IndexAny(elem, "/")
															if idx > 0 {
																args["name"] = elem[:idx]
																elem = elem[idx:]

																if len(elem) == 0 {
																	s.handleReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest(args, w, r)
																	return
																}
																switch elem[0] {
																case '/': // Prefix: "/status"
																	if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																		elem = elem[len(prefix):]
																	} else {
																		break
																	}

																	// Leaf: ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus
																	s.handleReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest(args, w, r)
																	return
																}
															}
														}
													}
												}
											case 'w': // Prefix: "watch/"
												if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest(args, w, r)
													return
												}
												switch elem[0] {
												case 'h': // Prefix: "horizontalpodautoscalers"
													if prefix := "horizontalpodautoscalers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRequest(args, w, r)
														return
													}
													switch elem[0] {
													case 'n': // Prefix: "namespaces/"
														if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "namespace"
														// Match until one of "/"
														idx := strings.IndexAny(elem, "/")
														if idx > 0 {
															args["namespace"] = elem[:idx]
															elem = elem[idx:]

															if len(elem) == 0 {
																break
															}
															switch elem[0] {
															case '/': // Prefix: "/horizontalpodautoscalers/"
																if prefix := "/horizontalpodautoscalers/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Param: "name"
																// Leaf parameter
																args["name"] = elem

																// Leaf: WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler
																s.handleWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest(args, w, r)
																return
															}
														}
													}
												case 'n': // Prefix: "namespaces/"
													if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "namespace"
													// Match until one of "/"
													idx := strings.IndexAny(elem, "/")
													if idx > 0 {
														args["namespace"] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case '/': // Prefix: "/horizontalpodautoscalers"
															if prefix := "/horizontalpodautoscalers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															if len(elem) == 0 {
																s.handleWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRequest(args, w, r)
																return
															}
															switch elem[0] {
															case '/': // Prefix: "/"
																if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Param: "name"
																// Leaf parameter
																args["name"] = elem

																// Leaf: WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler
																s.handleWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest(args, w, r)
																return
															}
														}
													}
												}
											}
										case '2': // Prefix: "2/"
											if prefix := "2/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleGetAutoscalingV2beta2APIResourcesRequest(args, w, r)
												return
											}
											switch elem[0] {
											case 'h': // Prefix: "horizontalpodautoscalers"
												if prefix := "horizontalpodautoscalers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Leaf: ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces
												s.handleListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesRequest(args, w, r)
												return
											case 'n': // Prefix: "namespaces/"
												if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "namespace"
												// Match until one of "/"
												idx := strings.IndexAny(elem, "/")
												if idx > 0 {
													args["namespace"] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case '/': // Prefix: "/horizontalpodautoscalers"
														if prefix := "/horizontalpodautoscalers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Match until one of "/"
															idx := strings.IndexAny(elem, "/")
															if idx > 0 {
																args["name"] = elem[:idx]
																elem = elem[idx:]

																if len(elem) == 0 {
																	s.handleReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest(args, w, r)
																	return
																}
																switch elem[0] {
																case '/': // Prefix: "/status"
																	if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																		elem = elem[len(prefix):]
																	} else {
																		break
																	}

																	// Leaf: ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus
																	s.handleReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest(args, w, r)
																	return
																}
															}
														}
													}
												}
											case 'w': // Prefix: "watch/"
												if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest(args, w, r)
													return
												}
												switch elem[0] {
												case 'h': // Prefix: "horizontalpodautoscalers"
													if prefix := "horizontalpodautoscalers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesRequest(args, w, r)
														return
													}
													switch elem[0] {
													case 'n': // Prefix: "namespaces/"
														if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "namespace"
														// Match until one of "/"
														idx := strings.IndexAny(elem, "/")
														if idx > 0 {
															args["namespace"] = elem[:idx]
															elem = elem[idx:]

															if len(elem) == 0 {
																break
															}
															switch elem[0] {
															case '/': // Prefix: "/horizontalpodautoscalers/"
																if prefix := "/horizontalpodautoscalers/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Param: "name"
																// Leaf parameter
																args["name"] = elem

																// Leaf: WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler
																s.handleWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest(args, w, r)
																return
															}
														}
													}
												case 'n': // Prefix: "namespaces/"
													if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "namespace"
													// Match until one of "/"
													idx := strings.IndexAny(elem, "/")
													if idx > 0 {
														args["namespace"] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case '/': // Prefix: "/horizontalpodautoscalers"
															if prefix := "/horizontalpodautoscalers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															if len(elem) == 0 {
																s.handleWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListRequest(args, w, r)
																return
															}
															switch elem[0] {
															case '/': // Prefix: "/"
																if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Param: "name"
																// Leaf parameter
																args["name"] = elem

																// Leaf: WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler
																s.handleWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest(args, w, r)
																return
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					case 'b': // Prefix: "batch/"
						if prefix := "batch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
							elem = elem[len(prefix):]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetBatchAPIGroupRequest(args, w, r)
							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if prefix := "v1"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetBatchV1beta1APIResourcesRequest(args, w, r)
								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetBatchV1APIResourcesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'b': // Prefix: "beta1/"
									if prefix := "beta1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: GetBatchV1beta1APIResources
									s.handleGetBatchV1beta1APIResourcesRequest(args, w, r)
									return
								case 'c': // Prefix: "cronjobs"
									if prefix := "cronjobs"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListBatchV1CronJobForAllNamespaces
									s.handleListBatchV1CronJobForAllNamespacesRequest(args, w, r)
									return
								case 'j': // Prefix: "jobs"
									if prefix := "jobs"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListBatchV1JobForAllNamespaces
									s.handleListBatchV1JobForAllNamespacesRequest(args, w, r)
									return
								case 'n': // Prefix: "namespaces/"
									if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Param: "namespace"
									// Match until one of "/"
									idx := strings.IndexAny(elem, "/")
									if idx > 0 {
										args["namespace"] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListBatchV1NamespacedJobRequest(args, w, r)
												return
											}
											switch elem[0] {
											case 'c': // Prefix: "cronjobs"
												if prefix := "cronjobs"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListBatchV1NamespacedCronJobRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Match until one of "/"
													idx := strings.IndexAny(elem, "/")
													if idx > 0 {
														args["name"] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															s.handleReadBatchV1NamespacedCronJobRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/status"
															if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Leaf: ReadBatchV1NamespacedCronJobStatus
															s.handleReadBatchV1NamespacedCronJobStatusRequest(args, w, r)
															return
														}
													}
												case 'j': // Prefix: "jobs"
													if prefix := "jobs"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Leaf: ListBatchV1NamespacedJob
													s.handleListBatchV1NamespacedJobRequest(args, w, r)
													return
												}
											case 'j': // Prefix: "jobs"
												if prefix := "jobs"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListBatchV1NamespacedJobRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Match until one of "/"
													idx := strings.IndexAny(elem, "/")
													if idx > 0 {
														args["name"] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															s.handleReadBatchV1NamespacedJobRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/status"
															if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Leaf: ReadBatchV1NamespacedJobStatus
															s.handleReadBatchV1NamespacedJobStatusRequest(args, w, r)
															return
														}
													}
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchBatchV1JobListForAllNamespacesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'c': // Prefix: "cronjobs"
										if prefix := "cronjobs"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchBatchV1CronJobListForAllNamespacesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'j': // Prefix: "jobs"
											if prefix := "jobs"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: WatchBatchV1JobListForAllNamespaces
											s.handleWatchBatchV1JobListForAllNamespacesRequest(args, w, r)
											return
										}
									case 'j': // Prefix: "jobs"
										if prefix := "jobs"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: WatchBatchV1JobListForAllNamespaces
										s.handleWatchBatchV1JobListForAllNamespacesRequest(args, w, r)
										return
									case 'n': // Prefix: "namespaces/"
										if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "namespace"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["namespace"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchBatchV1NamespacedJobRequest(args, w, r)
													return
												}
												switch elem[0] {
												case 'c': // Prefix: "cronjobs"
													if prefix := "cronjobs"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchBatchV1NamespacedCronJobListRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args["name"] = elem

														// Leaf: WatchBatchV1NamespacedCronJob
														s.handleWatchBatchV1NamespacedCronJobRequest(args, w, r)
														return
													case 'j': // Prefix: "jobs/"
														if prefix := "jobs/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args["name"] = elem

														// Leaf: WatchBatchV1NamespacedJob
														s.handleWatchBatchV1NamespacedJobRequest(args, w, r)
														return
													}
												case 'j': // Prefix: "jobs"
													if prefix := "jobs"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchBatchV1NamespacedJobListRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args["name"] = elem

														// Leaf: WatchBatchV1NamespacedJob
														s.handleWatchBatchV1NamespacedJobRequest(args, w, r)
														return
													}
												}
											}
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if prefix := "beta1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetBatchV1beta1APIResourcesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'c': // Prefix: "cronjobs"
									if prefix := "cronjobs"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListBatchV1beta1CronJobForAllNamespaces
									s.handleListBatchV1beta1CronJobForAllNamespacesRequest(args, w, r)
									return
								case 'n': // Prefix: "namespaces/"
									if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Param: "namespace"
									// Match until one of "/"
									idx := strings.IndexAny(elem, "/")
									if idx > 0 {
										args["namespace"] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/cronjobs"
											if prefix := "/cronjobs"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListBatchV1beta1NamespacedCronJobRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Match until one of "/"
												idx := strings.IndexAny(elem, "/")
												if idx > 0 {
													args["name"] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														s.handleReadBatchV1beta1NamespacedCronJobRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Leaf: ReadBatchV1beta1NamespacedCronJobStatus
														s.handleReadBatchV1beta1NamespacedCronJobStatusRequest(args, w, r)
														return
													}
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchBatchV1beta1NamespacedCronJobRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'c': // Prefix: "cronjobs"
										if prefix := "cronjobs"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchBatchV1beta1CronJobListForAllNamespacesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'n': // Prefix: "namespaces/"
											if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "namespace"
											// Match until one of "/"
											idx := strings.IndexAny(elem, "/")
											if idx > 0 {
												args["namespace"] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/cronjobs/"
													if prefix := "/cronjobs/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchBatchV1beta1NamespacedCronJob
													s.handleWatchBatchV1beta1NamespacedCronJobRequest(args, w, r)
													return
												}
											}
										}
									case 'n': // Prefix: "namespaces/"
										if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "namespace"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["namespace"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/cronjobs"
												if prefix := "/cronjobs"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchBatchV1beta1NamespacedCronJobListRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchBatchV1beta1NamespacedCronJob
													s.handleWatchBatchV1beta1NamespacedCronJobRequest(args, w, r)
													return
												}
											}
										}
									}
								}
							}
						}
					case 'c': // Prefix: "c"
						if prefix := "c"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
							elem = elem[len(prefix):]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetCoordinationAPIGroupRequest(args, w, r)
							return
						}
						switch elem[0] {
						case 'e': // Prefix: "ertificates.k8s.io/"
							if prefix := "ertificates.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetCertificatesAPIGroupRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 'o': // Prefix: "oordination.k8s.io/"
								if prefix := "oordination.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								// Leaf: GetCoordinationAPIGroup
								s.handleGetCoordinationAPIGroupRequest(args, w, r)
								return
							case 'v': // Prefix: "v1/"
								if prefix := "v1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetCertificatesV1APIResourcesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'c': // Prefix: "certificatesigningrequests"
									if prefix := "certificatesigningrequests"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListCertificatesV1CertificateSigningRequestRequest(args, w, r)
										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "name"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["name"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												s.handleReadCertificatesV1CertificateSigningRequestRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleReadCertificatesV1CertificateSigningRequestStatusRequest(args, w, r)
													return
												}
												switch elem[0] {
												case 'a': // Prefix: "approval"
													if prefix := "approval"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleReadCertificatesV1CertificateSigningRequestApprovalRequest(args, w, r)
														return
													}
													switch elem[0] {
													case 's': // Prefix: "status"
														if prefix := "status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Leaf: ReadCertificatesV1CertificateSigningRequestStatus
														s.handleReadCertificatesV1CertificateSigningRequestStatusRequest(args, w, r)
														return
													}
												case 's': // Prefix: "status"
													if prefix := "status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Leaf: ReadCertificatesV1CertificateSigningRequestStatus
													s.handleReadCertificatesV1CertificateSigningRequestStatusRequest(args, w, r)
													return
												}
											}
										}
									}
								case 'w': // Prefix: "watch/certificatesigningrequests"
									if prefix := "watch/certificatesigningrequests"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchCertificatesV1CertificateSigningRequestListRequest(args, w, r)
										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args["name"] = elem

										// Leaf: WatchCertificatesV1CertificateSigningRequest
										s.handleWatchCertificatesV1CertificateSigningRequestRequest(args, w, r)
										return
									}
								}
							}
						case 'o': // Prefix: "oordination.k8s.io/"
							if prefix := "oordination.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetCoordinationAPIGroupRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if prefix := "v1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetCoordinationV1APIResourcesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'l': // Prefix: "leases"
									if prefix := "leases"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListCoordinationV1LeaseForAllNamespaces
									s.handleListCoordinationV1LeaseForAllNamespacesRequest(args, w, r)
									return
								case 'n': // Prefix: "namespaces/"
									if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Param: "namespace"
									// Match until one of "/"
									idx := strings.IndexAny(elem, "/")
									if idx > 0 {
										args["namespace"] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/leases"
											if prefix := "/leases"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListCoordinationV1NamespacedLeaseRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: ReadCoordinationV1NamespacedLease
												s.handleReadCoordinationV1NamespacedLeaseRequest(args, w, r)
												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchCoordinationV1NamespacedLeaseRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'l': // Prefix: "leases"
										if prefix := "leases"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchCoordinationV1LeaseListForAllNamespacesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'n': // Prefix: "namespaces/"
											if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "namespace"
											// Match until one of "/"
											idx := strings.IndexAny(elem, "/")
											if idx > 0 {
												args["namespace"] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/leases/"
													if prefix := "/leases/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchCoordinationV1NamespacedLease
													s.handleWatchCoordinationV1NamespacedLeaseRequest(args, w, r)
													return
												}
											}
										}
									case 'n': // Prefix: "namespaces/"
										if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "namespace"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["namespace"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/leases"
												if prefix := "/leases"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchCoordinationV1NamespacedLeaseListRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchCoordinationV1NamespacedLease
													s.handleWatchCoordinationV1NamespacedLeaseRequest(args, w, r)
													return
												}
											}
										}
									}
								}
							}
						}
					case 'd': // Prefix: "discovery.k8s.io/"
						if prefix := "discovery.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
							elem = elem[len(prefix):]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetDiscoveryAPIGroupRequest(args, w, r)
							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if prefix := "v1"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetDiscoveryV1beta1APIResourcesRequest(args, w, r)
								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetDiscoveryV1APIResourcesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'b': // Prefix: "beta1/"
									if prefix := "beta1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: GetDiscoveryV1beta1APIResources
									s.handleGetDiscoveryV1beta1APIResourcesRequest(args, w, r)
									return
								case 'e': // Prefix: "endpointslices"
									if prefix := "endpointslices"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListDiscoveryV1EndpointSliceForAllNamespaces
									s.handleListDiscoveryV1EndpointSliceForAllNamespacesRequest(args, w, r)
									return
								case 'n': // Prefix: "namespaces/"
									if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Param: "namespace"
									// Match until one of "/"
									idx := strings.IndexAny(elem, "/")
									if idx > 0 {
										args["namespace"] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/endpointslices"
											if prefix := "/endpointslices"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListDiscoveryV1NamespacedEndpointSliceRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: ReadDiscoveryV1NamespacedEndpointSlice
												s.handleReadDiscoveryV1NamespacedEndpointSliceRequest(args, w, r)
												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchDiscoveryV1NamespacedEndpointSliceRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'e': // Prefix: "endpointslices"
										if prefix := "endpointslices"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchDiscoveryV1EndpointSliceListForAllNamespacesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'n': // Prefix: "namespaces/"
											if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "namespace"
											// Match until one of "/"
											idx := strings.IndexAny(elem, "/")
											if idx > 0 {
												args["namespace"] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/endpointslices/"
													if prefix := "/endpointslices/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchDiscoveryV1NamespacedEndpointSlice
													s.handleWatchDiscoveryV1NamespacedEndpointSliceRequest(args, w, r)
													return
												}
											}
										}
									case 'n': // Prefix: "namespaces/"
										if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "namespace"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["namespace"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/endpointslices"
												if prefix := "/endpointslices"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchDiscoveryV1NamespacedEndpointSliceListRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchDiscoveryV1NamespacedEndpointSlice
													s.handleWatchDiscoveryV1NamespacedEndpointSliceRequest(args, w, r)
													return
												}
											}
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if prefix := "beta1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetDiscoveryV1beta1APIResourcesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'e': // Prefix: "endpointslices"
									if prefix := "endpointslices"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListDiscoveryV1beta1EndpointSliceForAllNamespaces
									s.handleListDiscoveryV1beta1EndpointSliceForAllNamespacesRequest(args, w, r)
									return
								case 'n': // Prefix: "namespaces/"
									if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Param: "namespace"
									// Match until one of "/"
									idx := strings.IndexAny(elem, "/")
									if idx > 0 {
										args["namespace"] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/endpointslices"
											if prefix := "/endpointslices"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListDiscoveryV1beta1NamespacedEndpointSliceRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: ReadDiscoveryV1beta1NamespacedEndpointSlice
												s.handleReadDiscoveryV1beta1NamespacedEndpointSliceRequest(args, w, r)
												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchDiscoveryV1beta1NamespacedEndpointSliceRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'e': // Prefix: "endpointslices"
										if prefix := "endpointslices"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchDiscoveryV1beta1EndpointSliceListForAllNamespacesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'n': // Prefix: "namespaces/"
											if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "namespace"
											// Match until one of "/"
											idx := strings.IndexAny(elem, "/")
											if idx > 0 {
												args["namespace"] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/endpointslices/"
													if prefix := "/endpointslices/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchDiscoveryV1beta1NamespacedEndpointSlice
													s.handleWatchDiscoveryV1beta1NamespacedEndpointSliceRequest(args, w, r)
													return
												}
											}
										}
									case 'n': // Prefix: "namespaces/"
										if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "namespace"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["namespace"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/endpointslices"
												if prefix := "/endpointslices"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchDiscoveryV1beta1NamespacedEndpointSliceListRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchDiscoveryV1beta1NamespacedEndpointSlice
													s.handleWatchDiscoveryV1beta1NamespacedEndpointSliceRequest(args, w, r)
													return
												}
											}
										}
									}
								}
							}
						}
					case 'e': // Prefix: "events.k8s.io/"
						if prefix := "events.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
							elem = elem[len(prefix):]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetEventsAPIGroupRequest(args, w, r)
							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if prefix := "v1"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetEventsV1beta1APIResourcesRequest(args, w, r)
								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetEventsV1APIResourcesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'b': // Prefix: "beta1/"
									if prefix := "beta1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: GetEventsV1beta1APIResources
									s.handleGetEventsV1beta1APIResourcesRequest(args, w, r)
									return
								case 'e': // Prefix: "events"
									if prefix := "events"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListEventsV1EventForAllNamespaces
									s.handleListEventsV1EventForAllNamespacesRequest(args, w, r)
									return
								case 'n': // Prefix: "namespaces/"
									if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Param: "namespace"
									// Match until one of "/"
									idx := strings.IndexAny(elem, "/")
									if idx > 0 {
										args["namespace"] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/events"
											if prefix := "/events"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListEventsV1NamespacedEventRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: ReadEventsV1NamespacedEvent
												s.handleReadEventsV1NamespacedEventRequest(args, w, r)
												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchEventsV1NamespacedEventRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'e': // Prefix: "events"
										if prefix := "events"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchEventsV1EventListForAllNamespacesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'n': // Prefix: "namespaces/"
											if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "namespace"
											// Match until one of "/"
											idx := strings.IndexAny(elem, "/")
											if idx > 0 {
												args["namespace"] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/events/"
													if prefix := "/events/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchEventsV1NamespacedEvent
													s.handleWatchEventsV1NamespacedEventRequest(args, w, r)
													return
												}
											}
										}
									case 'n': // Prefix: "namespaces/"
										if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "namespace"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["namespace"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/events"
												if prefix := "/events"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchEventsV1NamespacedEventListRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchEventsV1NamespacedEvent
													s.handleWatchEventsV1NamespacedEventRequest(args, w, r)
													return
												}
											}
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if prefix := "beta1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetEventsV1beta1APIResourcesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'e': // Prefix: "events"
									if prefix := "events"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListEventsV1beta1EventForAllNamespaces
									s.handleListEventsV1beta1EventForAllNamespacesRequest(args, w, r)
									return
								case 'n': // Prefix: "namespaces/"
									if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Param: "namespace"
									// Match until one of "/"
									idx := strings.IndexAny(elem, "/")
									if idx > 0 {
										args["namespace"] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/events"
											if prefix := "/events"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListEventsV1beta1NamespacedEventRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: ReadEventsV1beta1NamespacedEvent
												s.handleReadEventsV1beta1NamespacedEventRequest(args, w, r)
												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchEventsV1beta1NamespacedEventRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'e': // Prefix: "events"
										if prefix := "events"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchEventsV1beta1EventListForAllNamespacesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'n': // Prefix: "namespaces/"
											if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "namespace"
											// Match until one of "/"
											idx := strings.IndexAny(elem, "/")
											if idx > 0 {
												args["namespace"] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/events/"
													if prefix := "/events/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchEventsV1beta1NamespacedEvent
													s.handleWatchEventsV1beta1NamespacedEventRequest(args, w, r)
													return
												}
											}
										}
									case 'n': // Prefix: "namespaces/"
										if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "namespace"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["namespace"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/events"
												if prefix := "/events"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchEventsV1beta1NamespacedEventListRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchEventsV1beta1NamespacedEvent
													s.handleWatchEventsV1beta1NamespacedEventRequest(args, w, r)
													return
												}
											}
										}
									}
								}
							}
						}
					case 'f': // Prefix: "flowcontrol.apiserver.k8s.io/"
						if prefix := "flowcontrol.apiserver.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
							elem = elem[len(prefix):]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetFlowcontrolApiserverAPIGroupRequest(args, w, r)
							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1beta"
							if prefix := "v1beta"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetFlowcontrolApiserverV1beta2APIResourcesRequest(args, w, r)
								return
							}
							switch elem[0] {
							case '1': // Prefix: "1/"
								if prefix := "1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetFlowcontrolApiserverV1beta1APIResourcesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case '2': // Prefix: "2/"
									if prefix := "2/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: GetFlowcontrolApiserverV1beta2APIResources
									s.handleGetFlowcontrolApiserverV1beta2APIResourcesRequest(args, w, r)
									return
								case 'f': // Prefix: "flowschemas"
									if prefix := "flowschemas"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListFlowcontrolApiserverV1beta1FlowSchemaRequest(args, w, r)
										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "name"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["name"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												s.handleReadFlowcontrolApiserverV1beta1FlowSchemaRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Leaf: ReadFlowcontrolApiserverV1beta1FlowSchemaStatus
												s.handleReadFlowcontrolApiserverV1beta1FlowSchemaStatusRequest(args, w, r)
												return
											}
										}
									}
								case 'p': // Prefix: "prioritylevelconfigurations"
									if prefix := "prioritylevelconfigurations"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest(args, w, r)
										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "name"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["name"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												s.handleReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Leaf: ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus
												s.handleReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRequest(args, w, r)
												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'f': // Prefix: "flowschemas"
										if prefix := "flowschemas"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchFlowcontrolApiserverV1beta1FlowSchemaListRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: WatchFlowcontrolApiserverV1beta1FlowSchema
											s.handleWatchFlowcontrolApiserverV1beta1FlowSchemaRequest(args, w, r)
											return
										case 'p': // Prefix: "prioritylevelconfigurations/"
											if prefix := "prioritylevelconfigurations/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: WatchFlowcontrolApiserverV1beta1PriorityLevelConfiguration
											s.handleWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest(args, w, r)
											return
										}
									case 'p': // Prefix: "prioritylevelconfigurations"
										if prefix := "prioritylevelconfigurations"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: WatchFlowcontrolApiserverV1beta1PriorityLevelConfiguration
											s.handleWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest(args, w, r)
											return
										}
									}
								}
							case '2': // Prefix: "2/"
								if prefix := "2/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetFlowcontrolApiserverV1beta2APIResourcesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'f': // Prefix: "flowschemas"
									if prefix := "flowschemas"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListFlowcontrolApiserverV1beta2FlowSchemaRequest(args, w, r)
										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "name"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["name"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												s.handleReadFlowcontrolApiserverV1beta2FlowSchemaRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Leaf: ReadFlowcontrolApiserverV1beta2FlowSchemaStatus
												s.handleReadFlowcontrolApiserverV1beta2FlowSchemaStatusRequest(args, w, r)
												return
											}
										}
									}
								case 'p': // Prefix: "prioritylevelconfigurations"
									if prefix := "prioritylevelconfigurations"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest(args, w, r)
										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "name"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["name"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												s.handleReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Leaf: ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus
												s.handleReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest(args, w, r)
												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'f': // Prefix: "flowschemas"
										if prefix := "flowschemas"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchFlowcontrolApiserverV1beta2FlowSchemaListRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: WatchFlowcontrolApiserverV1beta2FlowSchema
											s.handleWatchFlowcontrolApiserverV1beta2FlowSchemaRequest(args, w, r)
											return
										case 'p': // Prefix: "prioritylevelconfigurations/"
											if prefix := "prioritylevelconfigurations/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration
											s.handleWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest(args, w, r)
											return
										}
									case 'p': // Prefix: "prioritylevelconfigurations"
										if prefix := "prioritylevelconfigurations"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration
											s.handleWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest(args, w, r)
											return
										}
									}
								}
							}
						}
					case 'i': // Prefix: "internal.apiserver.k8s.io/"
						if prefix := "internal.apiserver.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
							elem = elem[len(prefix):]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetInternalApiserverAPIGroupRequest(args, w, r)
							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1alpha1/"
							if prefix := "v1alpha1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetInternalApiserverV1alpha1APIResourcesRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 's': // Prefix: "storageversions"
								if prefix := "storageversions"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListInternalApiserverV1alpha1StorageVersionRequest(args, w, r)
									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Param: "name"
									// Match until one of "/"
									idx := strings.IndexAny(elem, "/")
									if idx > 0 {
										args["name"] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											s.handleReadInternalApiserverV1alpha1StorageVersionRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: ReadInternalApiserverV1alpha1StorageVersionStatus
											s.handleReadInternalApiserverV1alpha1StorageVersionStatusRequest(args, w, r)
											return
										}
									}
								}
							case 'w': // Prefix: "watch/storageversions"
								if prefix := "watch/storageversions"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleWatchInternalApiserverV1alpha1StorageVersionListRequest(args, w, r)
									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Param: "name"
									// Leaf parameter
									args["name"] = elem

									// Leaf: WatchInternalApiserverV1alpha1StorageVersion
									s.handleWatchInternalApiserverV1alpha1StorageVersionRequest(args, w, r)
									return
								}
							}
						}
					case 'n': // Prefix: "n"
						if prefix := "n"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
							elem = elem[len(prefix):]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetNodeAPIGroupRequest(args, w, r)
							return
						}
						switch elem[0] {
						case 'e': // Prefix: "etworking.k8s.io/"
							if prefix := "etworking.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetNetworkingAPIGroupRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 'o': // Prefix: "ode.k8s.io/"
								if prefix := "ode.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								// Leaf: GetNodeAPIGroup
								s.handleGetNodeAPIGroupRequest(args, w, r)
								return
							case 'v': // Prefix: "v1/"
								if prefix := "v1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetNetworkingV1APIResourcesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'i': // Prefix: "ingress"
									if prefix := "ingress"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListNetworkingV1IngressForAllNamespacesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'c': // Prefix: "classes"
										if prefix := "classes"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListNetworkingV1IngressClassRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: ReadNetworkingV1IngressClass
											s.handleReadNetworkingV1IngressClassRequest(args, w, r)
											return
										case 'e': // Prefix: "es"
											if prefix := "es"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: ListNetworkingV1IngressForAllNamespaces
											s.handleListNetworkingV1IngressForAllNamespacesRequest(args, w, r)
											return
										}
									case 'e': // Prefix: "es"
										if prefix := "es"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: ListNetworkingV1IngressForAllNamespaces
										s.handleListNetworkingV1IngressForAllNamespacesRequest(args, w, r)
										return
									}
								case 'n': // Prefix: "n"
									if prefix := "n"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListNetworkingV1NetworkPolicyForAllNamespacesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'a': // Prefix: "amespaces/"
										if prefix := "amespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'e': // Prefix: "etworkpolicies"
											if prefix := "etworkpolicies"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: ListNetworkingV1NetworkPolicyForAllNamespaces
											s.handleListNetworkingV1NetworkPolicyForAllNamespacesRequest(args, w, r)
											return
										}
										// Param: "namespace"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["namespace"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListNetworkingV1NamespacedNetworkPolicyRequest(args, w, r)
													return
												}
												switch elem[0] {
												case 'i': // Prefix: "ingresses"
													if prefix := "ingresses"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListNetworkingV1NamespacedIngressRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Match until one of "/"
														idx := strings.IndexAny(elem, "/")
														if idx > 0 {
															args["name"] = elem[:idx]
															elem = elem[idx:]

															if len(elem) == 0 {
																s.handleReadNetworkingV1NamespacedIngressRequest(args, w, r)
																return
															}
															switch elem[0] {
															case '/': // Prefix: "/status"
																if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																	elem = elem[len(prefix):]
																} else {
																	break
																}

																// Leaf: ReadNetworkingV1NamespacedIngressStatus
																s.handleReadNetworkingV1NamespacedIngressStatusRequest(args, w, r)
																return
															}
														}
													case 'n': // Prefix: "networkpolicies"
														if prefix := "networkpolicies"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Leaf: ListNetworkingV1NamespacedNetworkPolicy
														s.handleListNetworkingV1NamespacedNetworkPolicyRequest(args, w, r)
														return
													}
												case 'n': // Prefix: "networkpolicies"
													if prefix := "networkpolicies"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListNetworkingV1NamespacedNetworkPolicyRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args["name"] = elem

														// Leaf: ReadNetworkingV1NamespacedNetworkPolicy
														s.handleReadNetworkingV1NamespacedNetworkPolicyRequest(args, w, r)
														return
													}
												}
											}
										}
									case 'e': // Prefix: "etworkpolicies"
										if prefix := "etworkpolicies"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: ListNetworkingV1NetworkPolicyForAllNamespaces
										s.handleListNetworkingV1NetworkPolicyForAllNamespacesRequest(args, w, r)
										return
									}
								case 'w': // Prefix: "watch/"
									if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchNetworkingV1NamespacedIngressRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'i': // Prefix: "ingress"
										if prefix := "ingress"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchNetworkingV1IngressListForAllNamespacesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'c': // Prefix: "classes"
											if prefix := "classes"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchNetworkingV1IngressClassListRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: WatchNetworkingV1IngressClass
												s.handleWatchNetworkingV1IngressClassRequest(args, w, r)
												return
											case 'e': // Prefix: "es"
												if prefix := "es"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Leaf: WatchNetworkingV1IngressListForAllNamespaces
												s.handleWatchNetworkingV1IngressListForAllNamespacesRequest(args, w, r)
												return
											}
										case 'e': // Prefix: "es"
											if prefix := "es"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: WatchNetworkingV1IngressListForAllNamespaces
											s.handleWatchNetworkingV1IngressListForAllNamespacesRequest(args, w, r)
											return
										case 'n': // Prefix: "namespaces/"
											if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "namespace"
											// Match until one of "/"
											idx := strings.IndexAny(elem, "/")
											if idx > 0 {
												args["namespace"] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/ingresses/"
													if prefix := "/ingresses/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchNetworkingV1NamespacedIngress
													s.handleWatchNetworkingV1NamespacedIngressRequest(args, w, r)
													return
												}
											}
										}
									case 'n': // Prefix: "n"
										if prefix := "n"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchNetworkingV1NetworkPolicyListForAllNamespacesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'a': // Prefix: "amespaces/"
											if prefix := "amespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'e': // Prefix: "etworkpolicies"
												if prefix := "etworkpolicies"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Leaf: WatchNetworkingV1NetworkPolicyListForAllNamespaces
												s.handleWatchNetworkingV1NetworkPolicyListForAllNamespacesRequest(args, w, r)
												return
											}
											// Param: "namespace"
											// Match until one of "/"
											idx := strings.IndexAny(elem, "/")
											if idx > 0 {
												args["namespace"] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchNetworkingV1NamespacedNetworkPolicyRequest(args, w, r)
														return
													}
													switch elem[0] {
													case 'i': // Prefix: "ingresses"
														if prefix := "ingresses"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchNetworkingV1NamespacedIngressListRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchNetworkingV1NamespacedIngress
															s.handleWatchNetworkingV1NamespacedIngressRequest(args, w, r)
															return
														case 'n': // Prefix: "networkpolicies/"
															if prefix := "networkpolicies/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchNetworkingV1NamespacedNetworkPolicy
															s.handleWatchNetworkingV1NamespacedNetworkPolicyRequest(args, w, r)
															return
														}
													case 'n': // Prefix: "networkpolicies"
														if prefix := "networkpolicies"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchNetworkingV1NamespacedNetworkPolicyListRequest(args, w, r)
															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
																elem = elem[len(prefix):]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args["name"] = elem

															// Leaf: WatchNetworkingV1NamespacedNetworkPolicy
															s.handleWatchNetworkingV1NamespacedNetworkPolicyRequest(args, w, r)
															return
														}
													}
												}
											}
										case 'e': // Prefix: "etworkpolicies"
											if prefix := "etworkpolicies"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: WatchNetworkingV1NetworkPolicyListForAllNamespaces
											s.handleWatchNetworkingV1NetworkPolicyListForAllNamespacesRequest(args, w, r)
											return
										}
									}
								}
							}
						case 'o': // Prefix: "ode.k8s.io/"
							if prefix := "ode.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetNodeAPIGroupRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 'v': // Prefix: "v1"
								if prefix := "v1"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetNodeV1alpha1APIResourcesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetNodeV1APIResourcesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'a': // Prefix: "alpha1/"
										if prefix := "alpha1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: GetNodeV1alpha1APIResources
										s.handleGetNodeV1alpha1APIResourcesRequest(args, w, r)
										return
									case 'r': // Prefix: "runtimeclasses"
										if prefix := "runtimeclasses"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListNodeV1RuntimeClassRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: ReadNodeV1RuntimeClass
											s.handleReadNodeV1RuntimeClassRequest(args, w, r)
											return
										}
									case 'w': // Prefix: "watch/runtimeclasses"
										if prefix := "watch/runtimeclasses"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchNodeV1RuntimeClassListRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: WatchNodeV1RuntimeClass
											s.handleWatchNodeV1RuntimeClassRequest(args, w, r)
											return
										}
									}
								case 'a': // Prefix: "alpha1/"
									if prefix := "alpha1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetNodeV1alpha1APIResourcesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'r': // Prefix: "runtimeclasses"
										if prefix := "runtimeclasses"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListNodeV1alpha1RuntimeClassRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: ReadNodeV1alpha1RuntimeClass
											s.handleReadNodeV1alpha1RuntimeClassRequest(args, w, r)
											return
										}
									case 'w': // Prefix: "watch/runtimeclasses"
										if prefix := "watch/runtimeclasses"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchNodeV1alpha1RuntimeClassListRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: WatchNodeV1alpha1RuntimeClass
											s.handleWatchNodeV1alpha1RuntimeClassRequest(args, w, r)
											return
										}
									}
								case 'b': // Prefix: "beta1/"
									if prefix := "beta1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetNodeV1beta1APIResourcesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'r': // Prefix: "runtimeclasses"
										if prefix := "runtimeclasses"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListNodeV1beta1RuntimeClassRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: ReadNodeV1beta1RuntimeClass
											s.handleReadNodeV1beta1RuntimeClassRequest(args, w, r)
											return
										}
									case 'w': // Prefix: "watch/runtimeclasses"
										if prefix := "watch/runtimeclasses"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchNodeV1beta1RuntimeClassListRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: WatchNodeV1beta1RuntimeClass
											s.handleWatchNodeV1beta1RuntimeClassRequest(args, w, r)
											return
										}
									}
								}
							}
						}
					case 'p': // Prefix: "policy/"
						if prefix := "policy/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
							elem = elem[len(prefix):]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetPolicyAPIGroupRequest(args, w, r)
							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if prefix := "v1"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetPolicyV1beta1APIResourcesRequest(args, w, r)
								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetPolicyV1APIResourcesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'b': // Prefix: "beta1/"
									if prefix := "beta1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: GetPolicyV1beta1APIResources
									s.handleGetPolicyV1beta1APIResourcesRequest(args, w, r)
									return
								case 'n': // Prefix: "namespaces/"
									if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Param: "namespace"
									// Match until one of "/"
									idx := strings.IndexAny(elem, "/")
									if idx > 0 {
										args["namespace"] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/poddisruptionbudgets"
											if prefix := "/poddisruptionbudgets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListPolicyV1NamespacedPodDisruptionBudgetRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Match until one of "/"
												idx := strings.IndexAny(elem, "/")
												if idx > 0 {
													args["name"] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														s.handleReadPolicyV1NamespacedPodDisruptionBudgetRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Leaf: ReadPolicyV1NamespacedPodDisruptionBudgetStatus
														s.handleReadPolicyV1NamespacedPodDisruptionBudgetStatusRequest(args, w, r)
														return
													}
												}
											}
										}
									}
								case 'p': // Prefix: "poddisruptionbudgets"
									if prefix := "poddisruptionbudgets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListPolicyV1PodDisruptionBudgetForAllNamespaces
									s.handleListPolicyV1PodDisruptionBudgetForAllNamespacesRequest(args, w, r)
									return
								case 'w': // Prefix: "watch/"
									if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchPolicyV1PodDisruptionBudgetListForAllNamespacesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'n': // Prefix: "namespaces/"
										if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'p': // Prefix: "poddisruptionbudgets"
											if prefix := "poddisruptionbudgets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: WatchPolicyV1PodDisruptionBudgetListForAllNamespaces
											s.handleWatchPolicyV1PodDisruptionBudgetListForAllNamespacesRequest(args, w, r)
											return
										}
										// Param: "namespace"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["namespace"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/poddisruptionbudgets"
												if prefix := "/poddisruptionbudgets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchPolicyV1NamespacedPodDisruptionBudgetListRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchPolicyV1NamespacedPodDisruptionBudget
													s.handleWatchPolicyV1NamespacedPodDisruptionBudgetRequest(args, w, r)
													return
												}
											}
										}
									case 'p': // Prefix: "poddisruptionbudgets"
										if prefix := "poddisruptionbudgets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: WatchPolicyV1PodDisruptionBudgetListForAllNamespaces
										s.handleWatchPolicyV1PodDisruptionBudgetListForAllNamespacesRequest(args, w, r)
										return
									}
								}
							case 'b': // Prefix: "beta1/"
								if prefix := "beta1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetPolicyV1beta1APIResourcesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'n': // Prefix: "namespaces/"
									if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Param: "namespace"
									// Match until one of "/"
									idx := strings.IndexAny(elem, "/")
									if idx > 0 {
										args["namespace"] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/poddisruptionbudgets"
											if prefix := "/poddisruptionbudgets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListPolicyV1beta1NamespacedPodDisruptionBudgetRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Match until one of "/"
												idx := strings.IndexAny(elem, "/")
												if idx > 0 {
													args["name"] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														s.handleReadPolicyV1beta1NamespacedPodDisruptionBudgetRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Leaf: ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus
														s.handleReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest(args, w, r)
														return
													}
												}
											}
										}
									}
								case 'p': // Prefix: "pod"
									if prefix := "pod"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListPolicyV1beta1PodSecurityPolicyRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'd': // Prefix: "disruptionbudgets"
										if prefix := "disruptionbudgets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListPolicyV1beta1PodDisruptionBudgetForAllNamespacesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 's': // Prefix: "securitypolicies"
											if prefix := "securitypolicies"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: ListPolicyV1beta1PodSecurityPolicy
											s.handleListPolicyV1beta1PodSecurityPolicyRequest(args, w, r)
											return
										}
									case 's': // Prefix: "securitypolicies"
										if prefix := "securitypolicies"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListPolicyV1beta1PodSecurityPolicyRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: ReadPolicyV1beta1PodSecurityPolicy
											s.handleReadPolicyV1beta1PodSecurityPolicyRequest(args, w, r)
											return
										}
									}
								case 'w': // Prefix: "watch/"
									if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'n': // Prefix: "namespaces/"
										if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'p': // Prefix: "poddisruptionbudgets"
											if prefix := "poddisruptionbudgets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces
											s.handleWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRequest(args, w, r)
											return
										}
										// Param: "namespace"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["namespace"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/poddisruptionbudgets"
												if prefix := "/poddisruptionbudgets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchPolicyV1beta1NamespacedPodDisruptionBudgetListRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchPolicyV1beta1NamespacedPodDisruptionBudget
													s.handleWatchPolicyV1beta1NamespacedPodDisruptionBudgetRequest(args, w, r)
													return
												}
											}
										}
									case 'p': // Prefix: "pod"
										if prefix := "pod"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchPolicyV1beta1PodSecurityPolicyRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'd': // Prefix: "disruptionbudgets"
											if prefix := "disruptionbudgets"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRequest(args, w, r)
												return
											}
											switch elem[0] {
											case 's': // Prefix: "securitypolicies/"
												if prefix := "securitypolicies/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: WatchPolicyV1beta1PodSecurityPolicy
												s.handleWatchPolicyV1beta1PodSecurityPolicyRequest(args, w, r)
												return
											}
										case 's': // Prefix: "securitypolicies"
											if prefix := "securitypolicies"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchPolicyV1beta1PodSecurityPolicyListRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: WatchPolicyV1beta1PodSecurityPolicy
												s.handleWatchPolicyV1beta1PodSecurityPolicyRequest(args, w, r)
												return
											}
										}
									}
								}
							}
						}
					case 'r': // Prefix: "rbac.authorization.k8s.io/"
						if prefix := "rbac.authorization.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
							elem = elem[len(prefix):]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetRbacAuthorizationAPIGroupRequest(args, w, r)
							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1/"
							if prefix := "v1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetRbacAuthorizationV1APIResourcesRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 'c': // Prefix: "clusterrole"
								if prefix := "clusterrole"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListRbacAuthorizationV1ClusterRoleBindingRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'b': // Prefix: "bindings"
									if prefix := "bindings"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListRbacAuthorizationV1ClusterRoleBindingRequest(args, w, r)
										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args["name"] = elem

										// Leaf: ReadRbacAuthorizationV1ClusterRoleBinding
										s.handleReadRbacAuthorizationV1ClusterRoleBindingRequest(args, w, r)
										return
									}
								case 's': // Prefix: "s"
									if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListRbacAuthorizationV1ClusterRoleRequest(args, w, r)
										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args["name"] = elem

										// Leaf: ReadRbacAuthorizationV1ClusterRole
										s.handleReadRbacAuthorizationV1ClusterRoleRequest(args, w, r)
										return
									case 'b': // Prefix: "bindings"
										if prefix := "bindings"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: ListRbacAuthorizationV1ClusterRoleBinding
										s.handleListRbacAuthorizationV1ClusterRoleBindingRequest(args, w, r)
										return
									}
								}
							case 'n': // Prefix: "namespaces/"
								if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								// Param: "namespace"
								// Match until one of "/"
								idx := strings.IndexAny(elem, "/")
								if idx > 0 {
									args["namespace"] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/role"
										if prefix := "/role"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListRbacAuthorizationV1NamespacedRoleBindingRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'b': // Prefix: "bindings"
											if prefix := "bindings"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListRbacAuthorizationV1NamespacedRoleBindingRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: ReadRbacAuthorizationV1NamespacedRoleBinding
												s.handleReadRbacAuthorizationV1NamespacedRoleBindingRequest(args, w, r)
												return
											}
										case 's': // Prefix: "s"
											if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListRbacAuthorizationV1NamespacedRoleRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: ReadRbacAuthorizationV1NamespacedRole
												s.handleReadRbacAuthorizationV1NamespacedRoleRequest(args, w, r)
												return
											case 'b': // Prefix: "bindings"
												if prefix := "bindings"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Leaf: ListRbacAuthorizationV1NamespacedRoleBinding
												s.handleListRbacAuthorizationV1NamespacedRoleBindingRequest(args, w, r)
												return
											}
										}
									}
								}
							case 'r': // Prefix: "role"
								if prefix := "role"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListRbacAuthorizationV1RoleForAllNamespacesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'b': // Prefix: "bindings"
									if prefix := "bindings"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListRbacAuthorizationV1RoleBindingForAllNamespacesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 's': // Prefix: "s"
										if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: ListRbacAuthorizationV1RoleForAllNamespaces
										s.handleListRbacAuthorizationV1RoleForAllNamespacesRequest(args, w, r)
										return
									}
								case 's': // Prefix: "s"
									if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Leaf: ListRbacAuthorizationV1RoleForAllNamespaces
									s.handleListRbacAuthorizationV1RoleForAllNamespacesRequest(args, w, r)
									return
								}
							case 'w': // Prefix: "watch/"
								if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleWatchRbacAuthorizationV1NamespacedRoleRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'c': // Prefix: "clusterrole"
									if prefix := "clusterrole"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchRbacAuthorizationV1ClusterRoleBindingRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'b': // Prefix: "bindings"
										if prefix := "bindings"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchRbacAuthorizationV1ClusterRoleBindingListRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: WatchRbacAuthorizationV1ClusterRoleBinding
											s.handleWatchRbacAuthorizationV1ClusterRoleBindingRequest(args, w, r)
											return
										}
									case 'n': // Prefix: "namespaces/"
										if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "namespace"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["namespace"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/roles/"
												if prefix := "/roles/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: WatchRbacAuthorizationV1NamespacedRole
												s.handleWatchRbacAuthorizationV1NamespacedRoleRequest(args, w, r)
												return
											}
										}
									case 's': // Prefix: "s"
										if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchRbacAuthorizationV1ClusterRoleListRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'b': // Prefix: "bindings/"
												if prefix := "bindings/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: WatchRbacAuthorizationV1ClusterRoleBinding
												s.handleWatchRbacAuthorizationV1ClusterRoleBindingRequest(args, w, r)
												return
											}
											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: WatchRbacAuthorizationV1ClusterRole
											s.handleWatchRbacAuthorizationV1ClusterRoleRequest(args, w, r)
											return
										}
									}
								case 'n': // Prefix: "namespaces/"
									if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									// Param: "namespace"
									// Match until one of "/"
									idx := strings.IndexAny(elem, "/")
									if idx > 0 {
										args["namespace"] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/role"
											if prefix := "/role"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchRbacAuthorizationV1NamespacedRoleBindingRequest(args, w, r)
												return
											}
											switch elem[0] {
											case 'b': // Prefix: "bindings"
												if prefix := "bindings"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchRbacAuthorizationV1NamespacedRoleBindingListRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchRbacAuthorizationV1NamespacedRoleBinding
													s.handleWatchRbacAuthorizationV1NamespacedRoleBindingRequest(args, w, r)
													return
												}
											case 's': // Prefix: "s"
												if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchRbacAuthorizationV1NamespacedRoleListRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'b': // Prefix: "bindings/"
														if prefix := "bindings/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args["name"] = elem

														// Leaf: WatchRbacAuthorizationV1NamespacedRoleBinding
														s.handleWatchRbacAuthorizationV1NamespacedRoleBindingRequest(args, w, r)
														return
													}
													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchRbacAuthorizationV1NamespacedRole
													s.handleWatchRbacAuthorizationV1NamespacedRoleRequest(args, w, r)
													return
												}
											}
										}
									}
								case 'r': // Prefix: "role"
									if prefix := "role"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchRbacAuthorizationV1RoleListForAllNamespacesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'b': // Prefix: "bindings"
										if prefix := "bindings"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 's': // Prefix: "s"
											if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Leaf: WatchRbacAuthorizationV1RoleListForAllNamespaces
											s.handleWatchRbacAuthorizationV1RoleListForAllNamespacesRequest(args, w, r)
											return
										}
									case 's': // Prefix: "s"
										if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: WatchRbacAuthorizationV1RoleListForAllNamespaces
										s.handleWatchRbacAuthorizationV1RoleListForAllNamespacesRequest(args, w, r)
										return
									}
								}
							}
						}
					case 's': // Prefix: "s"
						if prefix := "s"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
							elem = elem[len(prefix):]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetStorageAPIGroupRequest(args, w, r)
							return
						}
						switch elem[0] {
						case 'c': // Prefix: "cheduling.k8s.io/"
							if prefix := "cheduling.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetSchedulingAPIGroupRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 't': // Prefix: "torage.k8s.io/"
								if prefix := "torage.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								// Leaf: GetStorageAPIGroup
								s.handleGetStorageAPIGroupRequest(args, w, r)
								return
							case 'v': // Prefix: "v1/"
								if prefix := "v1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetSchedulingV1APIResourcesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case 'p': // Prefix: "priorityclasses"
									if prefix := "priorityclasses"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListSchedulingV1PriorityClassRequest(args, w, r)
										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args["name"] = elem

										// Leaf: ReadSchedulingV1PriorityClass
										s.handleReadSchedulingV1PriorityClassRequest(args, w, r)
										return
									}
								case 'w': // Prefix: "watch/priorityclasses"
									if prefix := "watch/priorityclasses"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchSchedulingV1PriorityClassListRequest(args, w, r)
										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args["name"] = elem

										// Leaf: WatchSchedulingV1PriorityClass
										s.handleWatchSchedulingV1PriorityClassRequest(args, w, r)
										return
									}
								}
							}
						case 't': // Prefix: "torage.k8s.io/"
							if prefix := "torage.k8s.io/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
								elem = elem[len(prefix):]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetStorageAPIGroupRequest(args, w, r)
								return
							}
							switch elem[0] {
							case 'v': // Prefix: "v1"
								if prefix := "v1"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
									elem = elem[len(prefix):]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetStorageV1alpha1APIResourcesRequest(args, w, r)
									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetStorageV1APIResourcesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'a': // Prefix: "alpha1/"
										if prefix := "alpha1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: GetStorageV1alpha1APIResources
										s.handleGetStorageV1alpha1APIResourcesRequest(args, w, r)
										return
									case 'c': // Prefix: "csi"
										if prefix := "csi"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListStorageV1CSINodeRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'd': // Prefix: "drivers"
											if prefix := "drivers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListStorageV1CSIDriverRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: ReadStorageV1CSIDriver
												s.handleReadStorageV1CSIDriverRequest(args, w, r)
												return
											case 'n': // Prefix: "nodes"
												if prefix := "nodes"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Leaf: ListStorageV1CSINode
												s.handleListStorageV1CSINodeRequest(args, w, r)
												return
											}
										case 'n': // Prefix: "nodes"
											if prefix := "nodes"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListStorageV1CSINodeRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: ReadStorageV1CSINode
												s.handleReadStorageV1CSINodeRequest(args, w, r)
												return
											}
										}
									case 's': // Prefix: "storageclasses"
										if prefix := "storageclasses"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListStorageV1StorageClassRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args["name"] = elem

											// Leaf: ReadStorageV1StorageClass
											s.handleReadStorageV1StorageClassRequest(args, w, r)
											return
										}
									case 'v': // Prefix: "volumeattachments"
										if prefix := "volumeattachments"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListStorageV1VolumeAttachmentRequest(args, w, r)
											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "name"
											// Match until one of "/"
											idx := strings.IndexAny(elem, "/")
											if idx > 0 {
												args["name"] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													s.handleReadStorageV1VolumeAttachmentRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/status"
													if prefix := "/status"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Leaf: ReadStorageV1VolumeAttachmentStatus
													s.handleReadStorageV1VolumeAttachmentStatusRequest(args, w, r)
													return
												}
											}
										}
									case 'w': // Prefix: "watch/"
										if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchStorageV1StorageClassRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'c': // Prefix: "csi"
											if prefix := "csi"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchStorageV1CSINodeRequest(args, w, r)
												return
											}
											switch elem[0] {
											case 'd': // Prefix: "drivers"
												if prefix := "drivers"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchStorageV1CSIDriverListRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchStorageV1CSIDriver
													s.handleWatchStorageV1CSIDriverRequest(args, w, r)
													return
												case 'n': // Prefix: "nodes/"
													if prefix := "nodes/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchStorageV1CSINode
													s.handleWatchStorageV1CSINodeRequest(args, w, r)
													return
												}
											case 'n': // Prefix: "nodes"
												if prefix := "nodes"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchStorageV1CSINodeListRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: WatchStorageV1CSINode
													s.handleWatchStorageV1CSINodeRequest(args, w, r)
													return
												}
											case 's': // Prefix: "storageclasses/"
												if prefix := "storageclasses/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: WatchStorageV1StorageClass
												s.handleWatchStorageV1StorageClassRequest(args, w, r)
												return
											}
										case 's': // Prefix: "storageclasses"
											if prefix := "storageclasses"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchStorageV1StorageClassListRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: WatchStorageV1StorageClass
												s.handleWatchStorageV1StorageClassRequest(args, w, r)
												return
											}
										case 'v': // Prefix: "volumeattachments"
											if prefix := "volumeattachments"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchStorageV1VolumeAttachmentListRequest(args, w, r)
												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args["name"] = elem

												// Leaf: WatchStorageV1VolumeAttachment
												s.handleWatchStorageV1VolumeAttachmentRequest(args, w, r)
												return
											}
										}
									}
								case 'a': // Prefix: "alpha1/"
									if prefix := "alpha1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetStorageV1alpha1APIResourcesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'c': // Prefix: "csistoragecapacities"
										if prefix := "csistoragecapacities"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: ListStorageV1alpha1CSIStorageCapacityForAllNamespaces
										s.handleListStorageV1alpha1CSIStorageCapacityForAllNamespacesRequest(args, w, r)
										return
									case 'n': // Prefix: "namespaces/"
										if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "namespace"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["namespace"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/csistoragecapacities"
												if prefix := "/csistoragecapacities"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListStorageV1alpha1NamespacedCSIStorageCapacityRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: ReadStorageV1alpha1NamespacedCSIStorageCapacity
													s.handleReadStorageV1alpha1NamespacedCSIStorageCapacityRequest(args, w, r)
													return
												}
											}
										}
									case 'w': // Prefix: "watch/"
										if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchStorageV1alpha1NamespacedCSIStorageCapacityRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'c': // Prefix: "csistoragecapacities"
											if prefix := "csistoragecapacities"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesRequest(args, w, r)
												return
											}
											switch elem[0] {
											case 'n': // Prefix: "namespaces/"
												if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "namespace"
												// Match until one of "/"
												idx := strings.IndexAny(elem, "/")
												if idx > 0 {
													args["namespace"] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case '/': // Prefix: "/csistoragecapacities/"
														if prefix := "/csistoragecapacities/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args["name"] = elem

														// Leaf: WatchStorageV1alpha1NamespacedCSIStorageCapacity
														s.handleWatchStorageV1alpha1NamespacedCSIStorageCapacityRequest(args, w, r)
														return
													}
												}
											}
										case 'n': // Prefix: "namespaces/"
											if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "namespace"
											// Match until one of "/"
											idx := strings.IndexAny(elem, "/")
											if idx > 0 {
												args["namespace"] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/csistoragecapacities"
													if prefix := "/csistoragecapacities"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchStorageV1alpha1NamespacedCSIStorageCapacityListRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args["name"] = elem

														// Leaf: WatchStorageV1alpha1NamespacedCSIStorageCapacity
														s.handleWatchStorageV1alpha1NamespacedCSIStorageCapacityRequest(args, w, r)
														return
													}
												}
											}
										}
									}
								case 'b': // Prefix: "beta1/"
									if prefix := "beta1/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
										elem = elem[len(prefix):]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetStorageV1beta1APIResourcesRequest(args, w, r)
										return
									}
									switch elem[0] {
									case 'c': // Prefix: "csistoragecapacities"
										if prefix := "csistoragecapacities"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Leaf: ListStorageV1beta1CSIStorageCapacityForAllNamespaces
										s.handleListStorageV1beta1CSIStorageCapacityForAllNamespacesRequest(args, w, r)
										return
									case 'n': // Prefix: "namespaces/"
										if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										// Param: "namespace"
										// Match until one of "/"
										idx := strings.IndexAny(elem, "/")
										if idx > 0 {
											args["namespace"] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/csistoragecapacities"
												if prefix := "/csistoragecapacities"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListStorageV1beta1NamespacedCSIStorageCapacityRequest(args, w, r)
													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args["name"] = elem

													// Leaf: ReadStorageV1beta1NamespacedCSIStorageCapacity
													s.handleReadStorageV1beta1NamespacedCSIStorageCapacityRequest(args, w, r)
													return
												}
											}
										}
									case 'w': // Prefix: "watch/"
										if prefix := "watch/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
											elem = elem[len(prefix):]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchStorageV1beta1NamespacedCSIStorageCapacityRequest(args, w, r)
											return
										}
										switch elem[0] {
										case 'c': // Prefix: "csistoragecapacities"
											if prefix := "csistoragecapacities"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchStorageV1beta1CSIStorageCapacityListForAllNamespacesRequest(args, w, r)
												return
											}
											switch elem[0] {
											case 'n': // Prefix: "namespaces/"
												if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
													elem = elem[len(prefix):]
												} else {
													break
												}

												// Param: "namespace"
												// Match until one of "/"
												idx := strings.IndexAny(elem, "/")
												if idx > 0 {
													args["namespace"] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case '/': // Prefix: "/csistoragecapacities/"
														if prefix := "/csistoragecapacities/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args["name"] = elem

														// Leaf: WatchStorageV1beta1NamespacedCSIStorageCapacity
														s.handleWatchStorageV1beta1NamespacedCSIStorageCapacityRequest(args, w, r)
														return
													}
												}
											}
										case 'n': // Prefix: "namespaces/"
											if prefix := "namespaces/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
												elem = elem[len(prefix):]
											} else {
												break
											}

											// Param: "namespace"
											// Match until one of "/"
											idx := strings.IndexAny(elem, "/")
											if idx > 0 {
												args["namespace"] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/csistoragecapacities"
													if prefix := "/csistoragecapacities"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
														elem = elem[len(prefix):]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchStorageV1beta1NamespacedCSIStorageCapacityListRequest(args, w, r)
														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if prefix := "/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
															elem = elem[len(prefix):]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args["name"] = elem

														// Leaf: WatchStorageV1beta1NamespacedCSIStorageCapacity
														s.handleWatchStorageV1beta1NamespacedCSIStorageCapacityRequest(args, w, r)
														return
													}
												}
											}
										}
									}
								}
							}
						}
					case 'v': // Prefix: "version/"
						if prefix := "version/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
							elem = elem[len(prefix):]
						} else {
							break
						}

						// Leaf: GetCodeVersion
						s.handleGetCodeVersionRequest(args, w, r)
						return
					}
				}
			case 'l': // Prefix: "logs/"
				if prefix := "logs/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
					elem = elem[len(prefix):]
				} else {
					break
				}

				// Param: "logpath"
				// Leaf parameter
				args["logpath"] = elem

				// Leaf: LogFileHandler
				s.handleLogFileHandlerRequest(args, w, r)
				return
			case 'v': // Prefix: "version/"
				if prefix := "version/"; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
					elem = elem[len(prefix):]
				} else {
					break
				}

				// Leaf: GetCodeVersion
				s.handleGetCodeVersionRequest(args, w, r)
				return
			}
		}
	}
	s.notFound(w, r)
}
